{"ast":null,"code":"var _jsxFileName = \"/Users/harshitrishav/Demo/jwt-auth-frontend/src/components/NotificationForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { Select, Input, Form, message, Modal, Typography } from \"antd\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Title\n} = Typography;\nconst NotificationForm = ({\n  isModalVisible,\n  setIsModalVisible\n}) => {\n  _s();\n  const [clients, setClients] = useState([]); // State to store clients\n  const [selectedClients, setSelectedClients] = useState([]); // Selected clients for notification\n  const [notificationMessage, setNotificationMessage] = useState(\"\"); // Notification message\n\n  // Fetching clients from API\n  useEffect(() => {\n    const fetchClients = async () => {\n      try {\n        const response = await axios.get(\"http://localhost:5005/api/clients\"); // Update with your API URL\n        setClients(response.data);\n      } catch (err) {\n        message.error(\"Failed to fetch clients.\");\n      }\n    };\n    fetchClients();\n  }, []);\n\n  // Handle the form submission\n  const handleSubmit = async () => {\n    try {\n      // If 'all' is selected, send the notification to all clients\n      const clientsToNotify = selectedClients.includes(\"all\") ? clients.map(client => client._id) : selectedClients;\n\n      // Sending the notification to the selected clients\n      await axios.post(\"http://localhost:5005/api/send-notification\", {\n        clients: clientsToNotify,\n        message: notificationMessage\n      });\n      message.success(\"Notification sent successfully!\");\n      setIsModalVisible(false); // Close modal after sending notification\n    } catch (err) {\n      message.error(\"Failed to send notification.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    title: \"Send Notification\",\n    visible: isModalVisible,\n    onCancel: () => setIsModalVisible(false),\n    footer: null,\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      layout: \"vertical\",\n      onFinish: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n        label: \"Select Clients\",\n        children: /*#__PURE__*/_jsxDEV(Select, {\n          mode: \"multiple\",\n          style: {\n            width: \"100%\"\n          },\n          placeholder: \"Select clients\",\n          onChange: value => setSelectedClients(value),\n          children: [/*#__PURE__*/_jsxDEV(Select.Option, {\n            value: \"all\",\n            children: \"All Clients\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 13\n          }, this), clients.map(client => /*#__PURE__*/_jsxDEV(Select.Option, {\n            value: client._id,\n            children: client.client_name\n          }, client._id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        label: \"Message\",\n        children: /*#__PURE__*/_jsxDEV(Input.TextArea, {\n          value: notificationMessage,\n          onChange: e => setNotificationMessage(e.target.value),\n          rows: 4,\n          placeholder: \"Enter notification message\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          type: \"primary\",\n          htmlType: \"submit\",\n          style: {\n            width: \"100%\"\n          },\n          children: \"Send Notification\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(NotificationForm, \"LsCMvhzVY8SUGMeZrve6mfI5R1g=\");\n_c = NotificationForm;\nexport default NotificationForm;\nvar _c;\n$RefreshReg$(_c, \"NotificationForm\");","map":{"version":3,"names":["React","useState","useEffect","axios","Select","Input","Form","message","Modal","Typography","jsxDEV","_jsxDEV","Title","NotificationForm","isModalVisible","setIsModalVisible","_s","clients","setClients","selectedClients","setSelectedClients","notificationMessage","setNotificationMessage","fetchClients","response","get","data","err","error","handleSubmit","clientsToNotify","includes","map","client","_id","post","success","title","visible","onCancel","footer","children","layout","onFinish","Item","label","mode","style","width","placeholder","onChange","value","Option","fileName","_jsxFileName","lineNumber","columnNumber","client_name","TextArea","e","target","rows","Button","type","htmlType","_c","$RefreshReg$"],"sources":["/Users/harshitrishav/Demo/jwt-auth-frontend/src/components/NotificationForm.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { Select, Input, Form, message, Modal, Typography } from \"antd\";\n\nconst { Title } = Typography;\n\nconst NotificationForm = ({ isModalVisible, setIsModalVisible }) => {\n  const [clients, setClients] = useState([]); // State to store clients\n  const [selectedClients, setSelectedClients] = useState([]); // Selected clients for notification\n  const [notificationMessage, setNotificationMessage] = useState(\"\"); // Notification message\n\n  // Fetching clients from API\n  useEffect(() => {\n    const fetchClients = async () => {\n      try {\n        const response = await axios.get(\"http://localhost:5005/api/clients\"); // Update with your API URL\n        setClients(response.data);\n      } catch (err) {\n        message.error(\"Failed to fetch clients.\");\n      }\n    };\n\n    fetchClients();\n  }, []);\n\n  // Handle the form submission\n  const handleSubmit = async () => {\n    try {\n      // If 'all' is selected, send the notification to all clients\n      const clientsToNotify = selectedClients.includes(\"all\") ? clients.map(client => client._id) : selectedClients;\n  \n      // Sending the notification to the selected clients\n      await axios.post(\"http://localhost:5005/api/send-notification\", {\n        clients: clientsToNotify,\n        message: notificationMessage,\n      });\n      message.success(\"Notification sent successfully!\");\n      setIsModalVisible(false); // Close modal after sending notification\n    } catch (err) {\n      message.error(\"Failed to send notification.\");\n    }\n  };\n\n  return (\n    <Modal\n      title=\"Send Notification\"\n      visible={isModalVisible}\n      onCancel={() => setIsModalVisible(false)}\n      footer={null}\n    >\n      <Form layout=\"vertical\" onFinish={handleSubmit}>\n        <Form.Item label=\"Select Clients\">\n          <Select\n            mode=\"multiple\"\n            style={{ width: \"100%\" }}\n            placeholder=\"Select clients\"\n            onChange={(value) => setSelectedClients(value)}\n          >\n            <Select.Option value=\"all\">All Clients</Select.Option>\n            {clients.map((client) => (\n              <Select.Option key={client._id} value={client._id}>\n                {client.client_name}\n              </Select.Option>\n            ))}\n          </Select>\n        </Form.Item>\n\n        <Form.Item label=\"Message\">\n          <Input.TextArea\n            value={notificationMessage}\n            onChange={(e) => setNotificationMessage(e.target.value)}\n            rows={4}\n            placeholder=\"Enter notification message\"\n          />\n        </Form.Item>\n\n        <Form.Item>\n          <Button type=\"primary\" htmlType=\"submit\" style={{ width: \"100%\" }}>\n            Send Notification\n          </Button>\n        </Form.Item>\n      </Form>\n    </Modal>\n  );\n};\n\nexport default NotificationForm;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}