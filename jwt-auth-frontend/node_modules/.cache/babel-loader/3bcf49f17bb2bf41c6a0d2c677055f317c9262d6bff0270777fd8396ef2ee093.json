{"ast":null,"code":"var _jsxFileName = \"/Users/harshitrishav/Demo/jwt-auth-frontend/src/App.js\",\n  _s = $RefreshSig$();\n// // import React from \"react\";\n// // import { BrowserRouter as Router, Route, Routes, Navigate } from \"react-router-dom\";\n// // import Login from \"./components/Login\";\n// // import Dashboard from \"./components/Dashboard\";\n// // import ClientProfile from \"./components/ClientProfile\";\n// // import HomePage from './components/HomePage';\n// // import Header from './components/Header';\n// // import Footer from './components/Footer';\n\n// // const App = () => {\n// //   const isAuthenticated = !!localStorage.getItem(\"jwtToken\"); // Check if user is authenticated\n\n// //   return (\n// //     <Router>\n// //       <Header />\n// //       <Routes>\n// //         <Route path=\"/\" element={<HomePage />} />\n// //         <Route path=\"/login\" element={isAuthenticated ? <Navigate to=\"/dashboard\" /> : <Login />} />\n\n// //         <Route path=\"/dashboard\" element={isAuthenticated ? <Dashboard /> : <Navigate to=\"/login\" />} />\n// //         <Route path=\"/client/:clientId\" element={isAuthenticated ? <ClientProfile /> : <Navigate to=\"/login\" />} />\n// //         <Route path=\"*\" element={<h2>404 - Page Not Found</h2>} />\n// //       </Routes>\n// //       <Footer />\n// //     </Router>\n// //   );\n// // };\n\n// // export default App;\n\n// import React from 'react';\n// import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';\n// import Login from './components/Login';\n// import Dashboard from './components/Dashboard';\n// import ClientProfile from './components/ClientProfile';\n// import HomePage from './components/HomePage';\n// import ContractManagement from './components/ContractManagement'; \n// import ActivityTracking from './components/ActivityTracking';\n// import Header from './components/Header';\n// import Footer from './components/Footer';\n\n// const App = () => {\n//   const token = localStorage.getItem('jwtToken'); // Get token from localStorage\n//   const isAuthenticated = !!token; // Check if the user is authenticated\n\n//   return (\n//     <Router>\n//       <Header />\n//       <Routes>\n//         <Route path=\"/\" element={<HomePage />} />\n\n//         {/* If not authenticated, show Login page */}\n//         <Route path=\"/login\" element={isAuthenticated ? <Navigate to=\"/login\" /> : <Login />} />\n\n//         {/* If authenticated, show Dashboard or Client Profile */}\n//         <Route \n//           path=\"/dashboard\" \n//           element={isAuthenticated ? <Dashboard /> : <Navigate to=\"/login\" />} \n//         />\n\n//         <Route \n//           path=\"/client/:clientId\" \n//           element={isAuthenticated ? <ClientProfile /> : <Navigate to=\"/login\" />} \n//         />\n\n//         {/* Client Pages */}\n//         <Route \n//           path=\"/contract-management\" \n//           element={isAuthenticated ? <ContractManagement /> : <Navigate to=\"/login\" />} \n//         />\n//         <Route \n//           path=\"/activity-tracking\" \n//           element={isAuthenticated ? <ActivityTracking /> : <Navigate to=\"/login\" />} \n//         />\n\n//         <Route path=\"*\" element={<h2>404 - Page Not Found</h2>} />\n//       </Routes>\n//       <Footer />\n//     </Router>\n//   );\n// };\n\n// export default App;\nimport React, { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Routes, Route, Navigate } from \"react-router-dom\";\nimport AdminLogin from './components/AdminLogin';\nimport ClientLogin from './components/ClientLogin';\nimport Dashboard from './components/Dashboard';\nimport ClientProfile from './components/ClientProfile';\nimport HomePage from './components/HomePage';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [role, setRole] = useState(null);\n  useEffect(() => {\n    const token = localStorage.getItem(\"jwtToken\");\n    if (token) {\n      try {\n        const decodedToken = JSON.parse(atob(token.split(\".\")[1])); // Decode the JWT token\n        setRole(decodedToken.role);\n        setIsAuthenticated(true);\n      } catch (error) {\n        setIsAuthenticated(false);\n        console.error(\"Invalid token\", error);\n      }\n    }\n  }, []);\n  const handleLogout = () => {\n    localStorage.removeItem(\"jwtToken\");\n    setIsAuthenticated(false);\n    setRole(null); // Reset role after logout\n  };\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      onLogout: handleLogout\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Routes, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        element: /*#__PURE__*/_jsxDEV(HomePage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 34\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/admin-login\",\n        element: isAuthenticated && role === \"admin\" ? /*#__PURE__*/_jsxDEV(Navigate, {\n          to: \"/dashboard\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 58\n        }, this) : /*#__PURE__*/_jsxDEV(AdminLogin, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 89\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/client-login\",\n        element: isAuthenticated && role === \"client\" ? /*#__PURE__*/_jsxDEV(Navigate, {\n          to: `/client/${role.clientId}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 59\n        }, this) : /*#__PURE__*/_jsxDEV(ClientLogin, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 106\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/dashboard\",\n        element: isAuthenticated && role === \"admin\" ? /*#__PURE__*/_jsxDEV(Dashboard, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 58\n        }, this) : /*#__PURE__*/_jsxDEV(Navigate, {\n          to: \"/admin-login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 74\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/client/:clientId\",\n        element: isAuthenticated && role === \"client\" ? /*#__PURE__*/_jsxDEV(ClientProfile, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 59\n        }, this) : /*#__PURE__*/_jsxDEV(Navigate, {\n          to: \"/client-login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 79\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"XS8AjXfMsM+d43V17JjtsSbG20M=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","BrowserRouter","Router","Routes","Route","Navigate","AdminLogin","ClientLogin","Dashboard","ClientProfile","HomePage","Header","Footer","jsxDEV","_jsxDEV","App","_s","isAuthenticated","setIsAuthenticated","role","setRole","token","localStorage","getItem","decodedToken","JSON","parse","atob","split","error","console","handleLogout","removeItem","children","onLogout","fileName","_jsxFileName","lineNumber","columnNumber","path","element","to","clientId","_c","$RefreshReg$"],"sources":["/Users/harshitrishav/Demo/jwt-auth-frontend/src/App.js"],"sourcesContent":["\n// // import React from \"react\";\n// // import { BrowserRouter as Router, Route, Routes, Navigate } from \"react-router-dom\";\n// // import Login from \"./components/Login\";\n// // import Dashboard from \"./components/Dashboard\";\n// // import ClientProfile from \"./components/ClientProfile\";\n// // import HomePage from './components/HomePage';\n// // import Header from './components/Header';\n// // import Footer from './components/Footer';\n\n// // const App = () => {\n// //   const isAuthenticated = !!localStorage.getItem(\"jwtToken\"); // Check if user is authenticated\n\n// //   return (\n// //     <Router>\n// //       <Header />\n// //       <Routes>\n// //         <Route path=\"/\" element={<HomePage />} />\n// //         <Route path=\"/login\" element={isAuthenticated ? <Navigate to=\"/dashboard\" /> : <Login />} />\n\n// //         <Route path=\"/dashboard\" element={isAuthenticated ? <Dashboard /> : <Navigate to=\"/login\" />} />\n// //         <Route path=\"/client/:clientId\" element={isAuthenticated ? <ClientProfile /> : <Navigate to=\"/login\" />} />\n// //         <Route path=\"*\" element={<h2>404 - Page Not Found</h2>} />\n// //       </Routes>\n// //       <Footer />\n// //     </Router>\n// //   );\n// // };\n\n// // export default App;\n\n// import React from 'react';\n// import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';\n// import Login from './components/Login';\n// import Dashboard from './components/Dashboard';\n// import ClientProfile from './components/ClientProfile';\n// import HomePage from './components/HomePage';\n// import ContractManagement from './components/ContractManagement'; \n// import ActivityTracking from './components/ActivityTracking';\n// import Header from './components/Header';\n// import Footer from './components/Footer';\n\n// const App = () => {\n//   const token = localStorage.getItem('jwtToken'); // Get token from localStorage\n//   const isAuthenticated = !!token; // Check if the user is authenticated\n\n//   return (\n//     <Router>\n//       <Header />\n//       <Routes>\n//         <Route path=\"/\" element={<HomePage />} />\n        \n//         {/* If not authenticated, show Login page */}\n//         <Route path=\"/login\" element={isAuthenticated ? <Navigate to=\"/login\" /> : <Login />} />\n\n//         {/* If authenticated, show Dashboard or Client Profile */}\n//         <Route \n//           path=\"/dashboard\" \n//           element={isAuthenticated ? <Dashboard /> : <Navigate to=\"/login\" />} \n//         />\n\n//         <Route \n//           path=\"/client/:clientId\" \n//           element={isAuthenticated ? <ClientProfile /> : <Navigate to=\"/login\" />} \n//         />\n\n//         {/* Client Pages */}\n//         <Route \n//           path=\"/contract-management\" \n//           element={isAuthenticated ? <ContractManagement /> : <Navigate to=\"/login\" />} \n//         />\n//         <Route \n//           path=\"/activity-tracking\" \n//           element={isAuthenticated ? <ActivityTracking /> : <Navigate to=\"/login\" />} \n//         />\n\n//         <Route path=\"*\" element={<h2>404 - Page Not Found</h2>} />\n//       </Routes>\n//       <Footer />\n//     </Router>\n//   );\n// };\n\n// export default App;\nimport React, { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Routes, Route, Navigate } from \"react-router-dom\";\nimport AdminLogin from './components/AdminLogin';\nimport ClientLogin from './components/ClientLogin';\nimport Dashboard from './components/Dashboard';\nimport ClientProfile from './components/ClientProfile';\nimport HomePage from './components/HomePage';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\n\nconst App = () => {\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [role, setRole] = useState(null);\n\n  useEffect(() => {\n    const token = localStorage.getItem(\"jwtToken\");\n    if (token) {\n      try {\n        const decodedToken = JSON.parse(atob(token.split(\".\")[1])); // Decode the JWT token\n        setRole(decodedToken.role);\n        setIsAuthenticated(true);\n      } catch (error) {\n        setIsAuthenticated(false);\n        console.error(\"Invalid token\", error);\n      }\n    }\n  }, []);\n\n  const handleLogout = () => {\n    localStorage.removeItem(\"jwtToken\");\n    setIsAuthenticated(false);\n    setRole(null); // Reset role after logout\n  };\n\n  return (\n    <Router>\n      <Header onLogout={handleLogout} />\n      <Routes>\n        <Route path=\"/\" element={<HomePage />} />\n        <Route\n          path=\"/admin-login\"\n          element={isAuthenticated && role === \"admin\" ? <Navigate to=\"/dashboard\" /> : <AdminLogin />}\n        />\n        <Route\n          path=\"/client-login\"\n          element={isAuthenticated && role === \"client\" ? <Navigate to={`/client/${role.clientId}`} /> : <ClientLogin />}\n        />\n        <Route\n          path=\"/dashboard\"\n          element={isAuthenticated && role === \"admin\" ? <Dashboard /> : <Navigate to=\"/admin-login\" />}\n        />\n        <Route\n          path=\"/client/:clientId\"\n          element={isAuthenticated && role === \"client\" ? <ClientProfile /> : <Navigate to=\"/client-login\" />}\n        />\n        {/* More routes here */}\n      </Routes>\n      <Footer />\n    </Router>\n  );\n};\n\nexport default App;\n"],"mappings":";;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,aAAa,IAAIC,MAAM,EAAEC,MAAM,EAAEC,KAAK,EAAEC,QAAQ,QAAQ,kBAAkB;AACnF,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAOC,WAAW,MAAM,0BAA0B;AAClD,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,aAAa,MAAM,4BAA4B;AACtD,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,MAAM,MAAM,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzC,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGnB,QAAQ,CAAC,KAAK,CAAC;EAC7D,MAAM,CAACoB,IAAI,EAAEC,OAAO,CAAC,GAAGrB,QAAQ,CAAC,IAAI,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACd,MAAMqB,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IAC9C,IAAIF,KAAK,EAAE;MACT,IAAI;QACF,MAAMG,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACN,KAAK,CAACO,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC5DR,OAAO,CAACI,YAAY,CAACL,IAAI,CAAC;QAC1BD,kBAAkB,CAAC,IAAI,CAAC;MAC1B,CAAC,CAAC,OAAOW,KAAK,EAAE;QACdX,kBAAkB,CAAC,KAAK,CAAC;QACzBY,OAAO,CAACD,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;MACvC;IACF;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAME,YAAY,GAAGA,CAAA,KAAM;IACzBT,YAAY,CAACU,UAAU,CAAC,UAAU,CAAC;IACnCd,kBAAkB,CAAC,KAAK,CAAC;IACzBE,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;EACjB,CAAC;EAED,oBACEN,OAAA,CAACZ,MAAM;IAAA+B,QAAA,gBACLnB,OAAA,CAACH,MAAM;MAACuB,QAAQ,EAAEH;IAAa;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAClCxB,OAAA,CAACX,MAAM;MAAA8B,QAAA,gBACLnB,OAAA,CAACV,KAAK;QAACmC,IAAI,EAAC,GAAG;QAACC,OAAO,eAAE1B,OAAA,CAACJ,QAAQ;UAAAyB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAE;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACzCxB,OAAA,CAACV,KAAK;QACJmC,IAAI,EAAC,cAAc;QACnBC,OAAO,EAAEvB,eAAe,IAAIE,IAAI,KAAK,OAAO,gBAAGL,OAAA,CAACT,QAAQ;UAACoC,EAAE,EAAC;QAAY;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,gBAAGxB,OAAA,CAACR,UAAU;UAAA6B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAE;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC9F,CAAC,eACFxB,OAAA,CAACV,KAAK;QACJmC,IAAI,EAAC,eAAe;QACpBC,OAAO,EAAEvB,eAAe,IAAIE,IAAI,KAAK,QAAQ,gBAAGL,OAAA,CAACT,QAAQ;UAACoC,EAAE,EAAE,WAAWtB,IAAI,CAACuB,QAAQ;QAAG;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,gBAAGxB,OAAA,CAACP,WAAW;UAAA4B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAE;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAChH,CAAC,eACFxB,OAAA,CAACV,KAAK;QACJmC,IAAI,EAAC,YAAY;QACjBC,OAAO,EAAEvB,eAAe,IAAIE,IAAI,KAAK,OAAO,gBAAGL,OAAA,CAACN,SAAS;UAAA2B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,gBAAGxB,OAAA,CAACT,QAAQ;UAACoC,EAAE,EAAC;QAAc;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAE;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC/F,CAAC,eACFxB,OAAA,CAACV,KAAK;QACJmC,IAAI,EAAC,mBAAmB;QACxBC,OAAO,EAAEvB,eAAe,IAAIE,IAAI,KAAK,QAAQ,gBAAGL,OAAA,CAACL,aAAa;UAAA0B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,gBAAGxB,OAAA,CAACT,QAAQ;UAACoC,EAAE,EAAC;QAAe;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAE;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEI,CAAC,eACTxB,OAAA,CAACF,MAAM;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEb,CAAC;AAACtB,EAAA,CAlDID,GAAG;AAAA4B,EAAA,GAAH5B,GAAG;AAoDT,eAAeA,GAAG;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}