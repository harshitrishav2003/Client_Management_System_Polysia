{"ast":null,"code":"// import React, { useEffect, useState } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import axios from \"axios\";\n// const ProjectsPage = () => {\n//   const [pendingProjects, setPendingProjects] = useState([]);\n//   const [approvedProjects, setApprovedProjects] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [editProject, setEditProject] = useState(null);\n//   const [formData, setFormData] = useState({\n//     project_name: '',\n//     description: '',\n//     start_date: '',\n//     end_date: '',\n//     status: 'Pending',\n//     budget: '',\n//     team_members: '',\n//   });\n//   const navigate = useNavigate();\n//   useEffect(() => {\n//     const fetchProjects = async () => {\n//       try {\n//         const response = await axios.get(\"http://localhost:5005/api/projects\");\n//         const allProjects = response.data;\n//         setPendingProjects(allProjects.filter(project => !project.isApproved));\n//         setApprovedProjects(allProjects.filter(project => project.isApproved));\n//         setLoading(false);\n//       } catch (err) {\n//         setError(\"Failed to fetch projects. Please try again later.\");\n//         setLoading(false);\n//       }\n//     };\n//     fetchProjects();\n//   }, []);\n//   const handleViewDetails = (projectId) => {\n//     navigate(`/project/${projectId}`);\n//   };\n//   const handleApprove = async (projectId) => {\n//     try {\n//       await axios.put(`http://localhost:5005/api/projects/${projectId}/approve`);\n//       alert(\"Project approved successfully\");\n//       setPendingProjects(prev => prev.filter(project => project._id !== projectId));\n//       const approvedProject = pendingProjects.find(project => project._id === projectId);\n//       setApprovedProjects(prev => [...prev, { ...approvedProject, isApproved: true }]);\n//     } catch (err) {\n//       console.error(\"Error approving project:\", err);\n//       alert(\"Failed to approve project\");\n//     }\n//   };\n//   const handleReject = async (projectId) => {\n//     try {\n//       await axios.put(`http://localhost:5005/api/projects/${projectId}/reject`);\n//       alert(\"Project rejected successfully\");\n//       setPendingProjects(prev => prev.filter(project => project._id !== projectId));\n//     } catch (err) {\n//       console.error(\"Error rejecting project:\", err);\n//       alert(\"Failed to reject project\");\n//     }\n//   };\n//   const handleStatusChange = async (projectId, status) => {\n//     try {\n//       await axios.put(`http://localhost:5005/api/projects/${projectId}`, { status });\n//       alert(\"Project status updated successfully\");\n//       setApprovedProjects(prevProjects =>\n//         prevProjects.map(project =>\n//           project._id === projectId ? { ...project, status: status } : project\n//         )\n//       );\n//     } catch (err) {\n//       console.error(\"Error updating project status:\", err);\n//       alert(\"Failed to update project status\");\n//     }\n//   };\n//   const handleEdit = (project) => {\n//     setEditProject(project);\n//     setFormData({\n//       project_name: project.project_name,\n//       description: project.description,\n//       start_date: project.start_date,\n//       end_date: project.end_date,\n//       status: project.status,\n//       budget: project.budget,\n//       team_members: project.team_members.join(', '), // Assuming team_members is an array of names\n//     });\n//   };\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData(prevData => ({\n//       ...prevData,\n//       [name]: value,\n//     }));\n//   };\n//   const handleSubmitEdit = async (e) => {\n//     e.preventDefault();\n//     try {\n//       const updatedProject = {\n//         ...formData,\n//         team_members: formData.team_members.split(',').map(member => member.trim()), // Convert to an array\n//       };\n//       await axios.put(`http://localhost:5005/api/projects/${editProject._id}`, updatedProject);\n//       alert(\"Project updated successfully\");\n//       setApprovedProjects(prev =>\n//         prev.map(project =>\n//           project._id === editProject._id ? { ...project, ...updatedProject } : project\n//         )\n//       );\n//       setEditProject(null);\n//       setFormData({ project_name: '', description: '', start_date: '', end_date: '', status: 'Pending', budget: '', team_members: '' });\n//     } catch (err) {\n//       console.error(\"Error updating project:\", err);\n//       alert(\"Failed to update project\");\n//     }\n//   };\n//   if (loading) return <div>Loading...</div>;\n//   if (error) return <div>{error}</div>;\n//   return (\n//     <div style={pageStyle}>\n//       <h2>Pending Projects</h2>\n//       {pendingProjects.length === 0 ? (\n//         <p>No pending projects found.</p>\n//       ) : (\n//         <table style={tableStyle}>\n//           <thead>\n//             <tr>\n//               <th>Project ID</th>\n//               <th>Project Name</th>\n//               <th>Client</th>\n//               <th>Actions</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {pendingProjects.map((project) => (\n//               <tr key={project._id}>\n//                 <td>{project._id}</td>\n//                 <td>{project.project_name}</td>\n//                 <td>{project.client_id.client_name}</td>\n//                 <td>\n//                   <button onClick={() => handleApprove(project._id)} style={{ ...buttonStyle, backgroundColor: \"#28a745\" }}>\n//                     Approve\n//                   </button>\n//                   <button onClick={() => handleReject(project._id)} style={{ ...buttonStyle, backgroundColor: \"#dc3545\" }}>\n//                     Reject\n//                   </button>\n//                 </td>\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       )}\n//       <h2>Approved Projects</h2>\n//       {approvedProjects.length === 0 ? (\n//         <p>No approved projects found.</p>\n//       ) : (\n//         <table style={tableStyle}>\n//           <thead>\n//             <tr>\n//               <th>Project ID</th>\n//               <th>Project Name</th>\n//               <th>Client</th>\n//               <th>Status</th>\n//               <th>Actions</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {approvedProjects.map((project) => (\n//               <tr key={project._id}>\n//                 <td>{project._id}</td>\n//                 <td>{project.project_name}</td>\n//                 <td>{project.client_id.client_name}</td>\n//                 <td>\n//                   <select\n//                     value={project.status}\n//                     onChange={(e) => handleStatusChange(project._id, e.target.value)}\n//                     style={selectStyle}\n//                   >\n//                     <option value=\"Pending\">Pending</option>\n//                     <option value=\"Ongoing\">Ongoing</option>\n//                     <option value=\"Completed\">Completed</option>\n//                   </select>\n//                 </td>\n//                 <td>\n//                   <button onClick={() => handleViewDetails(project._id)} style={buttonStyle}>\n//                     View Details\n//                   </button>\n//                   <button onClick={() => handleEdit(project)} style={{ ...buttonStyle, backgroundColor: \"#ffc107\" }}>\n//                     Edit\n//                   </button>\n//                 </td>\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       )}\n//       {/* Edit Project Form */}\n//       {editProject && (\n//         <div style={editFormStyle}>\n//           <h3>Edit Project</h3>\n//           <form onSubmit={handleSubmitEdit}>\n//             <label>\n//               Project Name:\n//               <input\n//                 type=\"text\"\n//                 name=\"project_name\"\n//                 value={formData.project_name}\n//                 onChange={handleInputChange}\n//                 required\n//               />\n//             </label>\n//             <label>\n//               Description:\n//               <textarea\n//                 name=\"description\"\n//                 value={formData.description}\n//                 onChange={handleInputChange}\n//                 required\n//               />\n//             </label>\n//             <label>\n//               Start Date:\n//               <input\n//                 type=\"date\"\n//                 name=\"start_date\"\n//                 value={formData.start_date}\n//                 onChange={handleInputChange}\n//                 required\n//               />\n//             </label>\n//             <label>\n//               End Date:\n//               <input\n//                 type=\"date\"\n//                 name=\"end_date\"\n//                 value={formData.end_date}\n//                 onChange={handleInputChange}\n//                 required\n//               />\n//             </label>\n//             <label>\n//               Status:\n//               <select\n//                 name=\"status\"\n//                 value={formData.status}\n//                 onChange={handleInputChange}\n//                 required\n//               >\n//                 <option value=\"Pending\">Pending</option>\n//                 <option value=\"Ongoing\">Ongoing</option>\n//                 <option value=\"Completed\">Completed</option>\n//               </select>\n//             </label>\n//             <label>\n//               Budget:\n//               <input\n//                 type=\"number\"\n//                 name=\"budget\"\n//                 value={formData.budget}\n//                 onChange={handleInputChange}\n//                 required\n//               />\n//             </label>\n//             <label>\n//               Team Members (comma separated):\n//               <input\n//                 type=\"text\"\n//                 name=\"team_members\"\n//                 value={formData.team_members}\n//                 onChange={handleInputChange}\n//                 required\n//               />\n//             </label>\n//             <button type=\"submit\" style={{ ...buttonStyle, backgroundColor: \"#007bff\" }}>\n//               Update Project\n//             </button>\n//             <button type=\"button\" onClick={() => setEditProject(null)} style={buttonStyle}>\n//               Cancel\n//             </button>\n//           </form>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n// const pageStyle = {\n//   padding: \"20px\",\n//   fontFamily: \"Arial, sans-serif\",\n// };\n// const tableStyle = {\n//   width: \"100%\",\n//   borderCollapse: \"collapse\",\n//   marginTop: \"20px\",\n//   border: \"1px solid #ccc\",\n// };\n// const buttonStyle = {\n//   padding: \"10px 20px\",\n//   margin: \"10px 5px\",\n//   border: \"none\",\n//   borderRadius: \"4px\",\n//   backgroundColor: \"#739ea7\",\n//   color: \"white\",\n//   cursor: \"pointer\",\n//   fontSize: \"14px\",\n// };\n// const selectStyle = {\n//   padding: \"5px 10px\",\n//   border: \"1px solid #ccc\",\n//   borderRadius: \"4px\",\n//   backgroundColor: \"#fff\",\n// };\n// const editFormStyle = {\n//   padding: \"20px\",\n//   border: \"1px solid #ccc\",\n//   marginTop: \"20px\",\n//   borderRadius: \"4px\",\n//   backgroundColor: \"#f8f9fa\",\n// };\n// export default ProjectsPage;\nimport React,{useEffect,useState}from\"react\";import{useNavigate}from\"react-router-dom\";import axios from\"axios\";import{Button,Table,Select,Modal,Input,Form,Typography,message,Spin,Card,Space,Alert}from\"antd\";import{EditOutlined,EyeOutlined,CheckOutlined,CloseOutlined}from\"@ant-design/icons\";import\"antd/dist/reset.css\";import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const{Title}=Typography;const{Option}=Select;const ProjectsPage=()=>{const[pendingProjects,setPendingProjects]=useState([]);const[approvedProjects,setApprovedProjects]=useState([]);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);const[editProject,setEditProject]=useState(null);const[form]=Form.useForm();const navigate=useNavigate();useEffect(()=>{const fetchProjects=async()=>{try{const response=await axios.get(\"http://localhost:5005/api/projects\");const allProjects=response.data;setPendingProjects(allProjects.filter(project=>!project.isApproved));setApprovedProjects(allProjects.filter(project=>project.isApproved));}catch(err){setError(\"Failed to fetch projects. Please try again later.\");}finally{setLoading(false);}};fetchProjects();},[]);const handleViewDetails=projectId=>navigate(`/project/${projectId}`);const handleApprove=async projectId=>{try{await axios.put(`http://localhost:5005/api/projects/${projectId}/approve`);message.success(\"Project approved successfully\");setPendingProjects(prev=>prev.filter(project=>project._id!==projectId));const approvedProject=pendingProjects.find(project=>project._id===projectId);setApprovedProjects(prev=>[...prev,{...approvedProject,isApproved:true}]);}catch(err){message.error(\"Failed to approve project\");}};const handleReject=async projectId=>{try{await axios.put(`http://localhost:5005/api/projects/${projectId}/reject`);message.success(\"Project rejected successfully\");setPendingProjects(prev=>prev.filter(project=>project._id!==projectId));}catch(err){message.error(\"Failed to reject project\");}};const handleStatusChange=async(projectId,status)=>{try{await axios.put(`http://localhost:5005/api/projects/${projectId}`,{status});message.success(\"Project status updated successfully\");setApprovedProjects(prevProjects=>prevProjects.map(project=>project._id===projectId?{...project,status}:project));}catch(err){message.error(\"Failed to update project status\");}};const handleEdit=project=>{setEditProject(project);form.setFieldsValue({...project,team_members:project.team_members.join(\", \")});};const handleEditSubmit=async()=>{try{const updatedProject={...form.getFieldsValue(),team_members:form.getFieldValue(\"team_members\").split(\", \")};await axios.put(`http://localhost:5005/api/projects/${editProject._id}`,updatedProject);message.success(\"Project updated successfully\");setApprovedProjects(prev=>prev.map(p=>p._id===editProject._id?updatedProject:p));setEditProject(null);}catch(err){message.error(\"Failed to update project\");}};return/*#__PURE__*/_jsxs(\"div\",{style:{padding:\"24px\"},children:[/*#__PURE__*/_jsx(Title,{level:2,style:{textAlign:\"center\",marginBottom:\"24px\"},children:\"Projects Management\"}),loading?/*#__PURE__*/_jsx(Spin,{size:\"large\",style:{display:\"block\",margin:\"auto\"}}):error?/*#__PURE__*/_jsx(Alert,{message:error,type:\"error\",showIcon:true}):/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Card,{title:\"Pending Projects\",bordered:false,style:{marginBottom:\"20px\"},children:/*#__PURE__*/_jsx(Table,{dataSource:pendingProjects,rowKey:\"_id\",columns:[{title:\"Project ID\",dataIndex:\"_id\"},{title:\"Project Name\",dataIndex:\"project_name\"},{title:\"Client\",dataIndex:[\"client_id\",\"client_name\"]},{title:\"Description\",dataIndex:\"description\"},{title:\"Actions\",render:(_,project)=>/*#__PURE__*/_jsxs(Space,{children:[/*#__PURE__*/_jsx(Button,{type:\"primary\",icon:/*#__PURE__*/_jsx(CheckOutlined,{}),onClick:()=>handleApprove(project._id),children:\"Approve\"}),/*#__PURE__*/_jsx(Button,{danger:true,icon:/*#__PURE__*/_jsx(CloseOutlined,{}),onClick:()=>handleReject(project._id),children:\"Reject\"})]})}]})}),/*#__PURE__*/_jsx(Card,{title:\"Approved Projects\",bordered:false,children:/*#__PURE__*/_jsx(Table,{dataSource:approvedProjects,rowKey:\"_id\",columns:[{title:\"Project ID\",dataIndex:\"_id\"},{title:\"Project Name\",dataIndex:\"project_name\"},{title:\"Client\",dataIndex:[\"client_id\",\"client_name\"]},{title:\"Status\",render:(_,project)=>/*#__PURE__*/_jsxs(Select,{defaultValue:project.status,onChange:value=>handleStatusChange(project._id,value),children:[/*#__PURE__*/_jsx(Option,{value:\"Pending\",children:\"Pending\"}),/*#__PURE__*/_jsx(Option,{value:\"Ongoing\",children:\"Ongoing\"}),/*#__PURE__*/_jsx(Option,{value:\"Completed\",children:\"Completed\"})]})},{title:\"Actions\",render:(_,project)=>/*#__PURE__*/_jsxs(Space,{children:[/*#__PURE__*/_jsx(Button,{icon:/*#__PURE__*/_jsx(EyeOutlined,{}),onClick:()=>handleViewDetails(project._id),children:\"View\"}),/*#__PURE__*/_jsx(Button,{icon:/*#__PURE__*/_jsx(EditOutlined,{}),onClick:()=>handleEdit(project),children:\"Edit\"})]})}]})})]}),/*#__PURE__*/_jsx(Modal,{title:\"Edit Project\",open:!!editProject,onCancel:()=>setEditProject(null),onOk:handleEditSubmit,okText:\"Save\",children:/*#__PURE__*/_jsxs(Form,{form:form,layout:\"vertical\",children:[/*#__PURE__*/_jsx(Form.Item,{name:\"project_name\",label:\"Project Name\",rules:[{required:true,message:\"Please enter a project name\"}],children:/*#__PURE__*/_jsx(Input,{})}),/*#__PURE__*/_jsx(Form.Item,{name:\"description\",label:\"Description\",children:/*#__PURE__*/_jsx(Input.TextArea,{})}),/*#__PURE__*/_jsx(Form.Item,{name:\"status\",label:\"Status\",children:/*#__PURE__*/_jsxs(Select,{children:[/*#__PURE__*/_jsx(Option,{value:\"Pending\",children:\"Pending\"}),/*#__PURE__*/_jsx(Option,{value:\"Ongoing\",children:\"Ongoing\"}),/*#__PURE__*/_jsx(Option,{value:\"Completed\",children:\"Completed\"})]})}),/*#__PURE__*/_jsx(Form.Item,{name:\"team_members\",label:\"Team Members\",children:/*#__PURE__*/_jsx(Input,{})})]})})]});};export default ProjectsPage;","map":{"version":3,"names":["React","useEffect","useState","useNavigate","axios","Button","Table","Select","Modal","Input","Form","Typography","message","Spin","Card","Space","Alert","EditOutlined","EyeOutlined","CheckOutlined","CloseOutlined","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","Title","Option","ProjectsPage","pendingProjects","setPendingProjects","approvedProjects","setApprovedProjects","loading","setLoading","error","setError","editProject","setEditProject","form","useForm","navigate","fetchProjects","response","get","allProjects","data","filter","project","isApproved","err","handleViewDetails","projectId","handleApprove","put","success","prev","_id","approvedProject","find","handleReject","handleStatusChange","status","prevProjects","map","handleEdit","setFieldsValue","team_members","join","handleEditSubmit","updatedProject","getFieldsValue","getFieldValue","split","p","style","padding","children","level","textAlign","marginBottom","size","display","margin","type","showIcon","title","bordered","dataSource","rowKey","columns","dataIndex","render","_","icon","onClick","danger","defaultValue","onChange","value","open","onCancel","onOk","okText","layout","Item","name","label","rules","required","TextArea"],"sources":["/Users/harshitrishav/Demo/jwt-auth-frontend/src/components/ProjectPage.js"],"sourcesContent":["\n// import React, { useEffect, useState } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import axios from \"axios\";\n\n// const ProjectsPage = () => {\n//   const [pendingProjects, setPendingProjects] = useState([]);\n//   const [approvedProjects, setApprovedProjects] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [editProject, setEditProject] = useState(null);\n//   const [formData, setFormData] = useState({\n//     project_name: '',\n//     description: '',\n//     start_date: '',\n//     end_date: '',\n//     status: 'Pending',\n//     budget: '',\n//     team_members: '',\n//   });\n//   const navigate = useNavigate();\n\n//   useEffect(() => {\n//     const fetchProjects = async () => {\n//       try {\n//         const response = await axios.get(\"http://localhost:5005/api/projects\");\n//         const allProjects = response.data;\n\n//         setPendingProjects(allProjects.filter(project => !project.isApproved));\n//         setApprovedProjects(allProjects.filter(project => project.isApproved));\n\n//         setLoading(false);\n//       } catch (err) {\n//         setError(\"Failed to fetch projects. Please try again later.\");\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchProjects();\n//   }, []);\n\n//   const handleViewDetails = (projectId) => {\n//     navigate(`/project/${projectId}`);\n//   };\n\n//   const handleApprove = async (projectId) => {\n//     try {\n//       await axios.put(`http://localhost:5005/api/projects/${projectId}/approve`);\n//       alert(\"Project approved successfully\");\n//       setPendingProjects(prev => prev.filter(project => project._id !== projectId));\n//       const approvedProject = pendingProjects.find(project => project._id === projectId);\n//       setApprovedProjects(prev => [...prev, { ...approvedProject, isApproved: true }]);\n//     } catch (err) {\n//       console.error(\"Error approving project:\", err);\n//       alert(\"Failed to approve project\");\n//     }\n//   };\n\n//   const handleReject = async (projectId) => {\n//     try {\n//       await axios.put(`http://localhost:5005/api/projects/${projectId}/reject`);\n//       alert(\"Project rejected successfully\");\n//       setPendingProjects(prev => prev.filter(project => project._id !== projectId));\n//     } catch (err) {\n//       console.error(\"Error rejecting project:\", err);\n//       alert(\"Failed to reject project\");\n//     }\n//   };\n\n//   const handleStatusChange = async (projectId, status) => {\n//     try {\n//       await axios.put(`http://localhost:5005/api/projects/${projectId}`, { status });\n//       alert(\"Project status updated successfully\");\n//       setApprovedProjects(prevProjects =>\n//         prevProjects.map(project =>\n//           project._id === projectId ? { ...project, status: status } : project\n//         )\n//       );\n//     } catch (err) {\n//       console.error(\"Error updating project status:\", err);\n//       alert(\"Failed to update project status\");\n//     }\n//   };\n\n//   const handleEdit = (project) => {\n//     setEditProject(project);\n//     setFormData({\n//       project_name: project.project_name,\n//       description: project.description,\n//       start_date: project.start_date,\n//       end_date: project.end_date,\n//       status: project.status,\n//       budget: project.budget,\n//       team_members: project.team_members.join(', '), // Assuming team_members is an array of names\n//     });\n//   };\n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData(prevData => ({\n//       ...prevData,\n//       [name]: value,\n//     }));\n//   };\n\n//   const handleSubmitEdit = async (e) => {\n//     e.preventDefault();\n//     try {\n//       const updatedProject = {\n//         ...formData,\n//         team_members: formData.team_members.split(',').map(member => member.trim()), // Convert to an array\n//       };\n//       await axios.put(`http://localhost:5005/api/projects/${editProject._id}`, updatedProject);\n//       alert(\"Project updated successfully\");\n//       setApprovedProjects(prev =>\n//         prev.map(project =>\n//           project._id === editProject._id ? { ...project, ...updatedProject } : project\n//         )\n//       );\n//       setEditProject(null);\n//       setFormData({ project_name: '', description: '', start_date: '', end_date: '', status: 'Pending', budget: '', team_members: '' });\n//     } catch (err) {\n//       console.error(\"Error updating project:\", err);\n//       alert(\"Failed to update project\");\n//     }\n//   };\n\n//   if (loading) return <div>Loading...</div>;\n//   if (error) return <div>{error}</div>;\n\n//   return (\n//     <div style={pageStyle}>\n//       <h2>Pending Projects</h2>\n//       {pendingProjects.length === 0 ? (\n//         <p>No pending projects found.</p>\n//       ) : (\n//         <table style={tableStyle}>\n//           <thead>\n//             <tr>\n//               <th>Project ID</th>\n//               <th>Project Name</th>\n//               <th>Client</th>\n//               <th>Actions</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {pendingProjects.map((project) => (\n//               <tr key={project._id}>\n//                 <td>{project._id}</td>\n//                 <td>{project.project_name}</td>\n//                 <td>{project.client_id.client_name}</td>\n//                 <td>\n//                   <button onClick={() => handleApprove(project._id)} style={{ ...buttonStyle, backgroundColor: \"#28a745\" }}>\n//                     Approve\n//                   </button>\n//                   <button onClick={() => handleReject(project._id)} style={{ ...buttonStyle, backgroundColor: \"#dc3545\" }}>\n//                     Reject\n//                   </button>\n//                 </td>\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       )}\n\n//       <h2>Approved Projects</h2>\n//       {approvedProjects.length === 0 ? (\n//         <p>No approved projects found.</p>\n//       ) : (\n//         <table style={tableStyle}>\n//           <thead>\n//             <tr>\n//               <th>Project ID</th>\n//               <th>Project Name</th>\n//               <th>Client</th>\n//               <th>Status</th>\n//               <th>Actions</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {approvedProjects.map((project) => (\n//               <tr key={project._id}>\n//                 <td>{project._id}</td>\n//                 <td>{project.project_name}</td>\n//                 <td>{project.client_id.client_name}</td>\n//                 <td>\n//                   <select\n//                     value={project.status}\n//                     onChange={(e) => handleStatusChange(project._id, e.target.value)}\n//                     style={selectStyle}\n//                   >\n//                     <option value=\"Pending\">Pending</option>\n//                     <option value=\"Ongoing\">Ongoing</option>\n//                     <option value=\"Completed\">Completed</option>\n//                   </select>\n//                 </td>\n//                 <td>\n//                   <button onClick={() => handleViewDetails(project._id)} style={buttonStyle}>\n//                     View Details\n//                   </button>\n//                   <button onClick={() => handleEdit(project)} style={{ ...buttonStyle, backgroundColor: \"#ffc107\" }}>\n//                     Edit\n//                   </button>\n//                 </td>\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       )}\n\n//       {/* Edit Project Form */}\n//       {editProject && (\n//         <div style={editFormStyle}>\n//           <h3>Edit Project</h3>\n//           <form onSubmit={handleSubmitEdit}>\n//             <label>\n//               Project Name:\n//               <input\n//                 type=\"text\"\n//                 name=\"project_name\"\n//                 value={formData.project_name}\n//                 onChange={handleInputChange}\n//                 required\n//               />\n//             </label>\n//             <label>\n//               Description:\n//               <textarea\n//                 name=\"description\"\n//                 value={formData.description}\n//                 onChange={handleInputChange}\n//                 required\n//               />\n//             </label>\n//             <label>\n//               Start Date:\n//               <input\n//                 type=\"date\"\n//                 name=\"start_date\"\n//                 value={formData.start_date}\n//                 onChange={handleInputChange}\n//                 required\n//               />\n//             </label>\n//             <label>\n//               End Date:\n//               <input\n//                 type=\"date\"\n//                 name=\"end_date\"\n//                 value={formData.end_date}\n//                 onChange={handleInputChange}\n//                 required\n//               />\n//             </label>\n//             <label>\n//               Status:\n//               <select\n//                 name=\"status\"\n//                 value={formData.status}\n//                 onChange={handleInputChange}\n//                 required\n//               >\n//                 <option value=\"Pending\">Pending</option>\n//                 <option value=\"Ongoing\">Ongoing</option>\n//                 <option value=\"Completed\">Completed</option>\n//               </select>\n//             </label>\n//             <label>\n//               Budget:\n//               <input\n//                 type=\"number\"\n//                 name=\"budget\"\n//                 value={formData.budget}\n//                 onChange={handleInputChange}\n//                 required\n//               />\n//             </label>\n//             <label>\n//               Team Members (comma separated):\n//               <input\n//                 type=\"text\"\n//                 name=\"team_members\"\n//                 value={formData.team_members}\n//                 onChange={handleInputChange}\n//                 required\n//               />\n//             </label>\n//             <button type=\"submit\" style={{ ...buttonStyle, backgroundColor: \"#007bff\" }}>\n//               Update Project\n//             </button>\n//             <button type=\"button\" onClick={() => setEditProject(null)} style={buttonStyle}>\n//               Cancel\n//             </button>\n//           </form>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// const pageStyle = {\n//   padding: \"20px\",\n//   fontFamily: \"Arial, sans-serif\",\n// };\n\n// const tableStyle = {\n//   width: \"100%\",\n//   borderCollapse: \"collapse\",\n//   marginTop: \"20px\",\n//   border: \"1px solid #ccc\",\n// };\n\n// const buttonStyle = {\n//   padding: \"10px 20px\",\n//   margin: \"10px 5px\",\n//   border: \"none\",\n//   borderRadius: \"4px\",\n//   backgroundColor: \"#739ea7\",\n//   color: \"white\",\n//   cursor: \"pointer\",\n//   fontSize: \"14px\",\n// };\n\n// const selectStyle = {\n//   padding: \"5px 10px\",\n//   border: \"1px solid #ccc\",\n//   borderRadius: \"4px\",\n//   backgroundColor: \"#fff\",\n// };\n\n// const editFormStyle = {\n//   padding: \"20px\",\n//   border: \"1px solid #ccc\",\n//   marginTop: \"20px\",\n//   borderRadius: \"4px\",\n//   backgroundColor: \"#f8f9fa\",\n// };\n\n// export default ProjectsPage;\nimport React, { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\nimport {\n  Button,\n  Table,\n  Select,\n  Modal,\n  Input,\n  Form,\n  Typography,\n  message,\n  Spin,\n  Card,\n  Space,\n  Alert,\n} from \"antd\";\nimport { EditOutlined, EyeOutlined, CheckOutlined, CloseOutlined } from \"@ant-design/icons\";\nimport \"antd/dist/reset.css\";\n\nconst { Title } = Typography;\nconst { Option } = Select;\n\nconst ProjectsPage = () => {\n  const [pendingProjects, setPendingProjects] = useState([]);\n  const [approvedProjects, setApprovedProjects] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [editProject, setEditProject] = useState(null);\n  const [form] = Form.useForm();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const fetchProjects = async () => {\n      try {\n        const response = await axios.get(\"http://localhost:5005/api/projects\");\n        const allProjects = response.data;\n        setPendingProjects(allProjects.filter((project) => !project.isApproved));\n        setApprovedProjects(allProjects.filter((project) => project.isApproved));\n      } catch (err) {\n        setError(\"Failed to fetch projects. Please try again later.\");\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchProjects();\n  }, []);\n\n  const handleViewDetails = (projectId) => navigate(`/project/${projectId}`);\n\n  const handleApprove = async (projectId) => {\n    try {\n      await axios.put(`http://localhost:5005/api/projects/${projectId}/approve`);\n      message.success(\"Project approved successfully\");\n      setPendingProjects((prev) => prev.filter((project) => project._id !== projectId));\n      const approvedProject = pendingProjects.find((project) => project._id === projectId);\n      setApprovedProjects((prev) => [...prev, { ...approvedProject, isApproved: true }]);\n    } catch (err) {\n      message.error(\"Failed to approve project\");\n    }\n  };\n\n  const handleReject = async (projectId) => {\n    try {\n      await axios.put(`http://localhost:5005/api/projects/${projectId}/reject`);\n      message.success(\"Project rejected successfully\");\n      setPendingProjects((prev) => prev.filter((project) => project._id !== projectId));\n    } catch (err) {\n      message.error(\"Failed to reject project\");\n    }\n  };\n\n  const handleStatusChange = async (projectId, status) => {\n    try {\n      await axios.put(`http://localhost:5005/api/projects/${projectId}`, { status });\n      message.success(\"Project status updated successfully\");\n      setApprovedProjects((prevProjects) =>\n        prevProjects.map((project) =>\n          project._id === projectId ? { ...project, status } : project\n        )\n      );\n    } catch (err) {\n      message.error(\"Failed to update project status\");\n    }\n  };\n\n  const handleEdit = (project) => {\n    setEditProject(project);\n    form.setFieldsValue({ ...project, team_members: project.team_members.join(\", \") });\n  };\n\n  const handleEditSubmit = async () => {\n    try {\n      const updatedProject = {\n        ...form.getFieldsValue(),\n        team_members: form.getFieldValue(\"team_members\").split(\", \"),\n      };\n      await axios.put(`http://localhost:5005/api/projects/${editProject._id}`, updatedProject);\n      message.success(\"Project updated successfully\");\n      setApprovedProjects((prev) =>\n        prev.map((p) => (p._id === editProject._id ? updatedProject : p))\n      );\n      setEditProject(null);\n    } catch (err) {\n      message.error(\"Failed to update project\");\n    }\n  };\n\n  return (\n    <div style={{ padding: \"24px\" }}>\n      <Title level={2} style={{ textAlign: \"center\", marginBottom: \"24px\" }}>\n        Projects Management\n      </Title>\n\n      {loading ? (\n        <Spin size=\"large\" style={{ display: \"block\", margin: \"auto\" }} />\n      ) : error ? (\n        <Alert message={error} type=\"error\" showIcon />\n      ) : (\n        <>\n          {/* Pending Projects Section */}\n          <Card title=\"Pending Projects\" bordered={false} style={{ marginBottom: \"20px\" }}>\n            <Table\n              dataSource={pendingProjects}\n              rowKey=\"_id\"\n              columns={[\n                { title: \"Project ID\", dataIndex: \"_id\" },\n                { title: \"Project Name\", dataIndex: \"project_name\" },\n                { title: \"Client\", dataIndex: [\"client_id\", \"client_name\"] },\n                { title: \"Description\", dataIndex: \"description\" },\n                {\n                  title: \"Actions\",\n                  render: (_, project) => (\n                    <Space>\n                      <Button type=\"primary\" icon={<CheckOutlined />} onClick={() => handleApprove(project._id)}>\n                        Approve\n                      </Button>\n                      <Button danger icon={<CloseOutlined />} onClick={() => handleReject(project._id)}>\n                        Reject\n                      </Button>\n                    </Space>\n                  ),\n                },\n              ]}\n            />\n          </Card>\n\n          {/* Approved Projects Section */}\n          <Card title=\"Approved Projects\" bordered={false}>\n            <Table\n              dataSource={approvedProjects}\n              rowKey=\"_id\"\n              columns={[\n                { title: \"Project ID\", dataIndex: \"_id\" },\n                { title: \"Project Name\", dataIndex: \"project_name\" },\n                { title: \"Client\", dataIndex: [\"client_id\", \"client_name\"] },\n                {\n                  title: \"Status\",\n                  render: (_, project) => (\n                    <Select\n                      defaultValue={project.status}\n                      onChange={(value) => handleStatusChange(project._id, value)}\n                    >\n                      <Option value=\"Pending\">Pending</Option>\n                      <Option value=\"Ongoing\">Ongoing</Option>\n                      <Option value=\"Completed\">Completed</Option>\n                    </Select>\n                  ),\n                },\n                {\n                  title: \"Actions\",\n                  render: (_, project) => (\n                    <Space>\n                      <Button icon={<EyeOutlined />} onClick={() => handleViewDetails(project._id)}>\n                        View\n                      </Button>\n                      <Button icon={<EditOutlined />} onClick={() => handleEdit(project)}>\n                        Edit\n                      </Button>\n                    </Space>\n                  ),\n                },\n              ]}\n            />\n          </Card>\n        </>\n      )}\n\n      {/* Edit Modal */}\n      <Modal\n        title=\"Edit Project\"\n        open={!!editProject}\n        onCancel={() => setEditProject(null)}\n        onOk={handleEditSubmit}\n        okText=\"Save\"\n      >\n        <Form form={form} layout=\"vertical\">\n          <Form.Item name=\"project_name\" label=\"Project Name\" rules={[{ required: true, message: \"Please enter a project name\" }]}>\n            <Input />\n          </Form.Item>\n          <Form.Item name=\"description\" label=\"Description\">\n            <Input.TextArea />\n          </Form.Item>\n          <Form.Item name=\"status\" label=\"Status\">\n            <Select>\n              <Option value=\"Pending\">Pending</Option>\n              <Option value=\"Ongoing\">Ongoing</Option>\n              <Option value=\"Completed\">Completed</Option>\n            </Select>\n          </Form.Item>\n          <Form.Item name=\"team_members\" label=\"Team Members\">\n            <Input />\n          </Form.Item>\n        </Form>\n      </Modal>\n    </div>\n  );\n};\n\nexport default ProjectsPage;\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}