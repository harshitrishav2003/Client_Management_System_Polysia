{"ast":null,"code":"var _jsxFileName = \"/Users/harshitrishav/Demo/jwt-auth-frontend/src/components/NotificationForm.js\",\n  _s = $RefreshSig$();\n// src/NotificationForm.js\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { Button, Select, Input, Form, message, Modal, Typography } from \"antd\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Title\n} = Typography;\nconst NotificationForm = () => {\n  _s();\n  const [clients, setClients] = useState([]); // State to store clients\n  const [selectedClients, setSelectedClients] = useState([]); // Selected clients for notification\n  const [notificationMessage, setNotificationMessage] = useState(\"\"); // Notification message\n  const [isModalVisible, setIsModalVisible] = useState(false); // Modal visibility\n\n  // Fetching clients from API\n  useEffect(() => {\n    const fetchClients = async () => {\n      try {\n        const response = await axios.get(\"http://localhost:5005/api/clients\"); // Update with your API URL\n        setClients(response.data);\n      } catch (err) {\n        message.error(\"Failed to fetch clients.\");\n      }\n    };\n    fetchClients();\n  }, []);\n\n  // Handle the form submission\n  const handleSubmit = async () => {\n    try {\n      // If 'all' is selected, send the notification to all clients\n      const clientsToNotify = selectedClients.includes(\"all\") ? clients.map(client => client._id) : selectedClients;\n\n      // Sending the notification to the selected clients\n      await axios.post(\"http://localhost:5005/api/send-notification\", {\n        clients: clientsToNotify,\n        message: notificationMessage\n      });\n      message.success(\"Notification sent successfully!\");\n      setIsModalVisible(false); // Close modal after sending notification\n    } catch (err) {\n      message.error(\"Failed to send notification.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Modal, {\n      title: \"Send Notification\",\n      visible: isModalVisible,\n      onCancel: () => setIsModalVisible(false),\n      footer: null,\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        layout: \"vertical\",\n        onFinish: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n          label: \"Select Clients\",\n          children: /*#__PURE__*/_jsxDEV(Select, {\n            mode: \"multiple\",\n            style: {\n              width: \"100%\"\n            },\n            placeholder: \"Select clients\",\n            onChange: value => setSelectedClients(value),\n            children: [/*#__PURE__*/_jsxDEV(Select.Option, {\n              value: \"all\",\n              children: \"All Clients\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 15\n            }, this), clients.map(client => /*#__PURE__*/_jsxDEV(Select.Option, {\n              value: client._id,\n              children: client.client_name\n            }, client._id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 17\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          label: \"Message\",\n          children: /*#__PURE__*/_jsxDEV(Input.TextArea, {\n            value: notificationMessage,\n            onChange: e => setNotificationMessage(e.target.value),\n            rows: 4,\n            placeholder: \"Enter notification message\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            type: \"primary\",\n            htmlType: \"submit\",\n            style: {\n              width: \"100%\"\n            },\n            children: \"Send Notification\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(NotificationForm, \"ZysgBHj8GpEGarufTbKgotfLycg=\");\n_c = NotificationForm;\nexport default NotificationForm;\nvar _c;\n$RefreshReg$(_c, \"NotificationForm\");","map":{"version":3,"names":["React","useState","useEffect","axios","Button","Select","Input","Form","message","Modal","Typography","jsxDEV","_jsxDEV","Title","NotificationForm","_s","clients","setClients","selectedClients","setSelectedClients","notificationMessage","setNotificationMessage","isModalVisible","setIsModalVisible","fetchClients","response","get","data","err","error","handleSubmit","clientsToNotify","includes","map","client","_id","post","success","children","title","visible","onCancel","footer","layout","onFinish","Item","label","mode","style","width","placeholder","onChange","value","Option","fileName","_jsxFileName","lineNumber","columnNumber","client_name","TextArea","e","target","rows","type","htmlType","_c","$RefreshReg$"],"sources":["/Users/harshitrishav/Demo/jwt-auth-frontend/src/components/NotificationForm.js"],"sourcesContent":["// src/NotificationForm.js\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { Button, Select, Input, Form, message, Modal, Typography } from \"antd\";\n\nconst { Title } = Typography;\n\nconst NotificationForm = () => {\n  const [clients, setClients] = useState([]); // State to store clients\n  const [selectedClients, setSelectedClients] = useState([]); // Selected clients for notification\n  const [notificationMessage, setNotificationMessage] = useState(\"\"); // Notification message\n  const [isModalVisible, setIsModalVisible] = useState(false); // Modal visibility\n\n  // Fetching clients from API\n  useEffect(() => {\n    const fetchClients = async () => {\n      try {\n        const response = await axios.get(\"http://localhost:5005/api/clients\"); // Update with your API URL\n        setClients(response.data);\n      } catch (err) {\n        message.error(\"Failed to fetch clients.\");\n      }\n    };\n\n    fetchClients();\n  }, []);\n\n  // Handle the form submission\n  const handleSubmit = async () => {\n    try {\n      // If 'all' is selected, send the notification to all clients\n      const clientsToNotify = selectedClients.includes(\"all\") ? clients.map(client => client._id) : selectedClients;\n  \n      // Sending the notification to the selected clients\n      await axios.post(\"http://localhost:5005/api/send-notification\", {\n        clients: clientsToNotify,\n        message: notificationMessage,\n      });\n      message.success(\"Notification sent successfully!\");\n      setIsModalVisible(false); // Close modal after sending notification\n    } catch (err) {\n      message.error(\"Failed to send notification.\");\n    }\n  };\n  \n\n  return (\n    <div>\n      {/* <Button\n        type=\"primary\"\n        onClick={() => setIsModalVisible(true)}\n        style={{ marginBottom: \"20px\" }}\n      >\n        Send Notification\n      </Button> */}\n\n      <Modal\n        title=\"Send Notification\"\n        visible={isModalVisible}\n        onCancel={() => setIsModalVisible(false)}\n        footer={null}\n      >\n        <Form layout=\"vertical\" onFinish={handleSubmit}>\n          <Form.Item label=\"Select Clients\">\n            <Select\n              mode=\"multiple\"\n              style={{ width: \"100%\" }}\n              placeholder=\"Select clients\"\n              onChange={(value) => setSelectedClients(value)}\n            >\n              <Select.Option value=\"all\">All Clients</Select.Option>\n              {clients.map((client) => (\n                <Select.Option key={client._id} value={client._id}>\n                  {client.client_name}\n                </Select.Option>\n              ))}\n            </Select>\n          </Form.Item>\n\n          <Form.Item label=\"Message\">\n            <Input.TextArea\n              value={notificationMessage}\n              onChange={(e) => setNotificationMessage(e.target.value)}\n              rows={4}\n              placeholder=\"Enter notification message\"\n            />\n          </Form.Item>\n\n          <Form.Item>\n            <Button type=\"primary\" htmlType=\"submit\" style={{ width: \"100%\" }}>\n              Send Notification\n            </Button>\n          </Form.Item>\n        </Form>\n      </Modal>\n    </div>\n  );\n};\n\nexport default NotificationForm;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}