{"ast":null,"code":"var _jsxFileName = \"/Users/harshitrishav/Demo/jwt-auth-frontend/src/components/Dashboard.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import { Link } from 'react-router-dom';\n// import axios from 'axios'; // Ensure axios is installed: `npm install axios`\n// import './Dashboard.css'; // Custom CSS for the dashboard\n\n// const Dashboard = () => {\n//   const [clients, setClients] = useState([]);\n//   const [search, setSearch] = useState('');\n//   const [filters, setFilters] = useState({\n//     region: '',\n//     industry: '',\n//     status: ''\n//   });\n//   const [sortOrder, setSortOrder] = useState('asc'); // 'asc' or 'desc'\n//   const [sortColumn, setSortColumn] = useState('client_name'); // Default column to sort\n//   const [authToken, setAuthToken] = useState(localStorage.getItem('token') || ''); // Get the token from localStorage\n\n//   // Fetch clients from backend when the component mounts or filters/sort change\n//   useEffect(() => {\n//     fetchClients();\n//   }, [filters, sortColumn, sortOrder]);\n\n//   const fetchClients = () => {\n//     const query = new URLSearchParams({\n//       search,\n//       region: filters.region,\n//       industry: filters.industry,\n//       status: filters.status,\n//       sortColumn,\n//       sortOrder\n//     });\n\n//     axios\n//       .get(`http://localhost:5005/api/users?${query.toString()}`, {\n//         headers: {\n//           Authorization: `Bearer ${authToken}`, // Pass token in Authorization header\n//         },\n//       })\n//       .then((response) => {\n//         setClients(response.data);\n//       })\n//       .catch((err) => {\n//         console.error('Error fetching clients:', err);\n//         // Handle error (e.g., logout if token is invalid)\n//       });\n//   };\n\n//   const handleSearch = (e) => {\n//     setSearch(e.target.value);\n//   };\n\n//   const handleFilterChange = (e) => {\n//     const { name, value } = e.target;\n//     setFilters({ ...filters, [name]: value });\n//   };\n\n//   const handleSort = (column) => {\n//     const newSortOrder = sortOrder === 'asc' ? 'desc' : 'asc';\n//     setSortOrder(newSortOrder);\n//     setSortColumn(column);\n//   };\n\n//   const exportData = (format) => {\n//     // Logic to export as excel, pdf, csv\n//     alert(`Exporting data as ${format}`);\n//   };\n\n//   return (\n//     <div className=\"dashboard\">\n//       <h1>Client Dashboard</h1>\n\n//       {/* Search Bar */}\n//       <input\n//         type=\"text\"\n//         placeholder=\"Search clients...\"\n//         value={search}\n//         onChange={handleSearch}\n//       />\n\n//       {/* Filter Options */}\n//       <select name=\"region\" onChange={handleFilterChange} value={filters.region}>\n//         <option value=\"\">All Regions</option>\n//         <option value=\"North America\">North America</option>\n//         <option value=\"Europe\">Europe</option>\n//         <option value=\"Asia\">Asia</option>\n//       </select>\n\n//       <select name=\"industry\" onChange={handleFilterChange} value={filters.industry}>\n//         <option value=\"\">All Industries</option>\n//         <option value=\"Finance\">Finance</option>\n//         <option value=\"Technology\">Technology</option>\n//         <option value=\"Healthcare\">Healthcare</option>\n//       </select>\n\n//       <select name=\"status\" onChange={handleFilterChange} value={filters.status}>\n//         <option value=\"\">All Statuses</option>\n//         <option value=\"Active\">Active</option>\n//         <option value=\"Inactive\">Inactive</option>\n//       </select>\n\n//       {/* Export Buttons */}\n//       <button onClick={() => exportData('excel')}>Export as Excel</button>\n//       <button onClick={() => exportData('pdf')}>Export as PDF</button>\n//       <button onClick={() => exportData('csv')}>Export as CSV</button>\n\n//       {/* Client Data Table */}\n//       <table>\n//         <thead>\n//           <tr>\n//             <th onClick={() => handleSort('client_name')}>Client Name</th>\n//             <th onClick={() => handleSort('industry')}>Industry</th>\n//             <th onClick={() => handleSort('status')}>Status</th>\n//             <th>Contact Person</th>\n//             <th>Location</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {clients.length > 0 ? (\n//             clients.map((client) => (\n//               <tr key={client._id}>\n//                 <td>\n//                   <Link to={`/client/${client._id}`}>{client.client_name}</Link>\n//                 </td>\n//                 <td>{client.industry}</td>\n//                 <td>{client.status}</td>\n//                 <td>{client.contact_person}</td>\n//                 <td>\n//                   {`${client.address.street}, ${client.address.city}, ${client.address.state}, ${client.address.postal_code}, ${client.address.country}`}\n//                 </td>\n//               </tr>\n//             ))\n//           ) : (\n//             <tr>\n//               <td colSpan=\"5\">No clients found</td>\n//             </tr>\n//           )}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default Dashboard;\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ClientManagement = () => {\n  _s();\n  const [clients, setClients] = useState([]);\n  const [editingClient, setEditingClient] = useState(null);\n  const [formData, setFormData] = useState({\n    email: \"\",\n    role: \"\",\n    password: \"\"\n  });\n\n  // Fetch clients on mount\n  useEffect(() => {\n    fetchClients();\n  }, []);\n  const fetchClients = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:5005/api/users\");\n      setClients(response.data);\n    } catch (error) {\n      console.error(\"Error fetching clients:\", error);\n    }\n  };\n\n  // Handle Delete\n  const handleDelete = async clientId => {\n    try {\n      await axios.delete(`http://localhost:5005/api/client/${clientId}`);\n      setClients(clients.filter(client => client._id !== clientId));\n    } catch (error) {\n      console.error(\"Error deleting client:\", error);\n    }\n  };\n\n  // Handle Edit\n  const handleEdit = client => {\n    setEditingClient(client);\n    setFormData({\n      email: client.email,\n      role: client.role,\n      password: \"\"\n    });\n  };\n  const handleUpdate = async e => {\n    e.preventDefault();\n    try {\n      const response = await axios.put(`http://localhost:5005/api/client/${editingClient._id}`, formData);\n      console.log(\"Update response:\", response.data);\n      fetchClients(); // Refresh the client list\n      setEditingClient(null);\n      setFormData({\n        email: \"\",\n        role: \"\",\n        password: \"\"\n      });\n    } catch (error) {\n      console.error(\"Error updating client:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Client Management\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: clients.map(client => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [client.email, \" (\", client.role, \")\", /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleEdit(client),\n          children: \"Edit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleDelete(client._id),\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 13\n        }, this)]\n      }, client._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this), editingClient && /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleUpdate,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Edit Client\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Email:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        value: formData.email,\n        onChange: e => setFormData({\n          ...formData,\n          email: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Role:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: formData.role,\n        onChange: e => setFormData({\n          ...formData,\n          role: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Password:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        value: formData.password,\n        onChange: e => setFormData({\n          ...formData,\n          password: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Update\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: () => setEditingClient(null),\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 200,\n    columnNumber: 5\n  }, this);\n};\n_s(ClientManagement, \"5L6dnkn/2uHGHXYf/FG9DqC4dYo=\");\n_c = ClientManagement;\nexport default ClientManagement;\nvar _c;\n$RefreshReg$(_c, \"ClientManagement\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","ClientManagement","_s","clients","setClients","editingClient","setEditingClient","formData","setFormData","email","role","password","fetchClients","response","get","data","error","console","handleDelete","clientId","delete","filter","client","_id","handleEdit","handleUpdate","e","preventDefault","put","log","children","fileName","_jsxFileName","lineNumber","columnNumber","map","onClick","onSubmit","type","value","onChange","target","_c","$RefreshReg$"],"sources":["/Users/harshitrishav/Demo/jwt-auth-frontend/src/components/Dashboard.js"],"sourcesContent":["\n// import React, { useState, useEffect } from 'react';\n// import { Link } from 'react-router-dom';\n// import axios from 'axios'; // Ensure axios is installed: `npm install axios`\n// import './Dashboard.css'; // Custom CSS for the dashboard\n\n// const Dashboard = () => {\n//   const [clients, setClients] = useState([]);\n//   const [search, setSearch] = useState('');\n//   const [filters, setFilters] = useState({\n//     region: '',\n//     industry: '',\n//     status: ''\n//   });\n//   const [sortOrder, setSortOrder] = useState('asc'); // 'asc' or 'desc'\n//   const [sortColumn, setSortColumn] = useState('client_name'); // Default column to sort\n//   const [authToken, setAuthToken] = useState(localStorage.getItem('token') || ''); // Get the token from localStorage\n\n//   // Fetch clients from backend when the component mounts or filters/sort change\n//   useEffect(() => {\n//     fetchClients();\n//   }, [filters, sortColumn, sortOrder]);\n\n//   const fetchClients = () => {\n//     const query = new URLSearchParams({\n//       search,\n//       region: filters.region,\n//       industry: filters.industry,\n//       status: filters.status,\n//       sortColumn,\n//       sortOrder\n//     });\n\n//     axios\n//       .get(`http://localhost:5005/api/users?${query.toString()}`, {\n//         headers: {\n//           Authorization: `Bearer ${authToken}`, // Pass token in Authorization header\n//         },\n//       })\n//       .then((response) => {\n//         setClients(response.data);\n//       })\n//       .catch((err) => {\n//         console.error('Error fetching clients:', err);\n//         // Handle error (e.g., logout if token is invalid)\n//       });\n//   };\n\n//   const handleSearch = (e) => {\n//     setSearch(e.target.value);\n//   };\n\n//   const handleFilterChange = (e) => {\n//     const { name, value } = e.target;\n//     setFilters({ ...filters, [name]: value });\n//   };\n\n//   const handleSort = (column) => {\n//     const newSortOrder = sortOrder === 'asc' ? 'desc' : 'asc';\n//     setSortOrder(newSortOrder);\n//     setSortColumn(column);\n//   };\n\n//   const exportData = (format) => {\n//     // Logic to export as excel, pdf, csv\n//     alert(`Exporting data as ${format}`);\n//   };\n\n//   return (\n//     <div className=\"dashboard\">\n//       <h1>Client Dashboard</h1>\n\n//       {/* Search Bar */}\n//       <input\n//         type=\"text\"\n//         placeholder=\"Search clients...\"\n//         value={search}\n//         onChange={handleSearch}\n//       />\n\n//       {/* Filter Options */}\n//       <select name=\"region\" onChange={handleFilterChange} value={filters.region}>\n//         <option value=\"\">All Regions</option>\n//         <option value=\"North America\">North America</option>\n//         <option value=\"Europe\">Europe</option>\n//         <option value=\"Asia\">Asia</option>\n//       </select>\n\n//       <select name=\"industry\" onChange={handleFilterChange} value={filters.industry}>\n//         <option value=\"\">All Industries</option>\n//         <option value=\"Finance\">Finance</option>\n//         <option value=\"Technology\">Technology</option>\n//         <option value=\"Healthcare\">Healthcare</option>\n//       </select>\n\n//       <select name=\"status\" onChange={handleFilterChange} value={filters.status}>\n//         <option value=\"\">All Statuses</option>\n//         <option value=\"Active\">Active</option>\n//         <option value=\"Inactive\">Inactive</option>\n//       </select>\n\n//       {/* Export Buttons */}\n//       <button onClick={() => exportData('excel')}>Export as Excel</button>\n//       <button onClick={() => exportData('pdf')}>Export as PDF</button>\n//       <button onClick={() => exportData('csv')}>Export as CSV</button>\n\n//       {/* Client Data Table */}\n//       <table>\n//         <thead>\n//           <tr>\n//             <th onClick={() => handleSort('client_name')}>Client Name</th>\n//             <th onClick={() => handleSort('industry')}>Industry</th>\n//             <th onClick={() => handleSort('status')}>Status</th>\n//             <th>Contact Person</th>\n//             <th>Location</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {clients.length > 0 ? (\n//             clients.map((client) => (\n//               <tr key={client._id}>\n//                 <td>\n//                   <Link to={`/client/${client._id}`}>{client.client_name}</Link>\n//                 </td>\n//                 <td>{client.industry}</td>\n//                 <td>{client.status}</td>\n//                 <td>{client.contact_person}</td>\n//                 <td>\n//                   {`${client.address.street}, ${client.address.city}, ${client.address.state}, ${client.address.postal_code}, ${client.address.country}`}\n//                 </td>\n//               </tr>\n//             ))\n//           ) : (\n//             <tr>\n//               <td colSpan=\"5\">No clients found</td>\n//             </tr>\n//           )}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default Dashboard;\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nconst ClientManagement = () => {\n  const [clients, setClients] = useState([]);\n  const [editingClient, setEditingClient] = useState(null);\n  const [formData, setFormData] = useState({ email: \"\", role: \"\", password: \"\" });\n\n  // Fetch clients on mount\n  useEffect(() => {\n    fetchClients();\n  }, []);\n\n  const fetchClients = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:5005/api/users\");\n      setClients(response.data);\n    } catch (error) {\n      console.error(\"Error fetching clients:\", error);\n    }\n  };\n\n  // Handle Delete\n  const handleDelete = async (clientId) => {\n    try {\n      await axios.delete(`http://localhost:5005/api/client/${clientId}`);\n      setClients(clients.filter((client) => client._id !== clientId));\n    } catch (error) {\n      console.error(\"Error deleting client:\", error);\n    }\n  };\n\n  // Handle Edit\n  const handleEdit = (client) => {\n    setEditingClient(client);\n    setFormData({ email: client.email, role: client.role, password: \"\" });\n  };\n\n  const handleUpdate = async (e) => {\n    e.preventDefault();\n    try {\n      const response = await axios.put(\n        `http://localhost:5005/api/client/${editingClient._id}`,\n        formData\n      );\n      console.log(\"Update response:\", response.data);\n      fetchClients(); // Refresh the client list\n      setEditingClient(null);\n      setFormData({ email: \"\", role: \"\", password: \"\" });\n    } catch (error) {\n      console.error(\"Error updating client:\", error);\n    }\n  };\n\n  return (\n    <div>\n      <h1>Client Management</h1>\n\n      {/* List of Clients */}\n      <ul>\n        {clients.map((client) => (\n          <li key={client._id}>\n            {client.email} ({client.role})\n            <button onClick={() => handleEdit(client)}>Edit</button>\n            <button onClick={() => handleDelete(client._id)}>Delete</button>\n          </li>\n        ))}\n      </ul>\n\n      {/* Edit Form */}\n      {editingClient && (\n        <form onSubmit={handleUpdate}>\n          <h2>Edit Client</h2>\n          <label>Email:</label>\n          <input\n            type=\"email\"\n            value={formData.email}\n            onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n          />\n          <label>Role:</label>\n          <input\n            type=\"text\"\n            value={formData.role}\n            onChange={(e) => setFormData({ ...formData, role: e.target.value })}\n          />\n          <label>Password:</label>\n          <input\n            type=\"password\"\n            value={formData.password}\n            onChange={(e) => setFormData({ ...formData, password: e.target.value })}\n          />\n          <button type=\"submit\">Update</button>\n          <button type=\"button\" onClick={() => setEditingClient(null)}>\n            Cancel\n          </button>\n        </form>\n      )}\n    </div>\n  );\n};\n\nexport default ClientManagement;\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}