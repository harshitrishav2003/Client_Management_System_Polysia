{"ast":null,"code":"var _jsxFileName = \"/Users/harshitrishav/Demo/jwt-auth-frontend/src/components/Chatbot.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from \"react\";\n// import axios from \"axios\";\n// import \"./chatbot.css\"; // Import the CSS file\n\n// const Chatbot = () => {\n//   const [messages, setMessages] = useState([]);\n//   const [input, setInput] = useState(\"\");\n\n//   const sendMessage = async () => {\n//     if (!input.trim()) return;\n\n//     const userMessage = { role: \"user\", content: input, timestamp: new Date() };\n\n//     // Add user message to UI\n//     setMessages((prevMessages) => [...prevMessages, userMessage]);\n\n//     try {\n//       // Sending message to the backend\n//       const response = await axios.post(\"http://localhost:5001/chat\", {\n//         message: input,\n//       });\n\n//       // Checking the response structure and handling the reply\n//       const botMessage = {\n//         role: \"bot\",\n//         content: response.data.reply || \"Sorry, I couldn't understand that.\",\n//         timestamp: new Date(),\n//       };\n\n//       // Add bot response to UI\n//       setMessages((prevMessages) => [...prevMessages, userMessage, botMessage]);\n//     } catch (error) {\n//       console.error(\"Error:\", error);\n\n//       // In case of error, display a fallback message\n//       const botMessage = {\n//         role: \"bot\",\n//         content: \"Sorry, there was an error with the chatbot service.\",\n//         timestamp: new Date(),\n//       };\n//       setMessages((prevMessages) => [...prevMessages, userMessage, botMessage]);\n//     }\n\n//     setInput(\"\"); // Clear the input field\n//   };\n\n//   return (\n//     <div className=\"chatbot-container\">\n//       <div className=\"header\">\n//         <h2>Chatbot</h2>\n//       </div>\n//       <div className=\"messages-container\">\n//         {messages.map((msg, index) => (\n//           <div\n//             key={index}\n//             className={`message ${msg.role === \"user\" ? \"user\" : \"bot\"}`}\n//           >\n//             <div className=\"message-content\">\n//               <p className=\"message-text\">{msg.content}</p>\n//               <span className=\"message-time\">\n//                 {msg.timestamp.toLocaleTimeString()}\n//               </span>\n//             </div>\n//           </div>\n//         ))}\n//       </div>\n//       <div className=\"input-container\">\n//         <input\n//           type=\"text\"\n//           value={input}\n//           onChange={(e) => setInput(e.target.value)}\n//           placeholder=\"Type a message...\"\n//           className=\"input-field\"\n//         />\n//         <button onClick={sendMessage} className=\"send-button\">\n//           Send\n//         </button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Chatbot;\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport \"./Chatbot.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const sendMessage = async () => {\n    if (!input.trim()) return;\n    const userMessage = {\n      role: \"user\",\n      content: input,\n      timestamp: new Date()\n    };\n\n    // Add user message to UI\n    setMessages(prevMessages => [...prevMessages, userMessage]);\n    try {\n      // Sending message to the backend\n      const response = await axios.post(\"http://localhost:5001/chat\", {\n        message: input\n      });\n\n      // Checking the response structure and handling the reply\n      const botMessage = {\n        role: \"bot\",\n        content: response.data.reply || \"Sorry, I couldn't understand that.\",\n        timestamp: new Date()\n      };\n\n      // Add bot response to UI\n      setMessages(prevMessages => [...prevMessages, userMessage, botMessage]);\n    } catch (error) {\n      console.error(\"Error:\", error);\n\n      // In case of error, display a fallback message\n      const botMessage = {\n        role: \"bot\",\n        content: \"Sorry, there was an error with the chatbot service.\",\n        timestamp: new Date()\n      };\n      setMessages(prevMessages => [...prevMessages, userMessage, botMessage]);\n    }\n    setInput(\"\"); // Clear the input field\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Chatbot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages-container\",\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${msg.role === \"user\" ? \"user\" : \"bot\"}`,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"message-text\",\n            children: msg.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"message-time\",\n            children: msg.timestamp.toLocaleTimeString()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"Type a message...\",\n        className: \"input-field\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        className: \"send-button\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"bxrUXnlHDt+zalfpk8IFX5tJV48=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","input","setInput","sendMessage","trim","userMessage","role","content","timestamp","Date","prevMessages","response","post","message","botMessage","data","reply","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","toLocaleTimeString","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["/Users/harshitrishav/Demo/jwt-auth-frontend/src/components/Chatbot.js"],"sourcesContent":["// import React, { useState } from \"react\";\n// import axios from \"axios\";\n// import \"./chatbot.css\"; // Import the CSS file\n\n// const Chatbot = () => {\n//   const [messages, setMessages] = useState([]);\n//   const [input, setInput] = useState(\"\");\n\n//   const sendMessage = async () => {\n//     if (!input.trim()) return;\n\n//     const userMessage = { role: \"user\", content: input, timestamp: new Date() };\n\n//     // Add user message to UI\n//     setMessages((prevMessages) => [...prevMessages, userMessage]);\n\n//     try {\n//       // Sending message to the backend\n//       const response = await axios.post(\"http://localhost:5001/chat\", {\n//         message: input,\n//       });\n\n//       // Checking the response structure and handling the reply\n//       const botMessage = {\n//         role: \"bot\",\n//         content: response.data.reply || \"Sorry, I couldn't understand that.\",\n//         timestamp: new Date(),\n//       };\n\n//       // Add bot response to UI\n//       setMessages((prevMessages) => [...prevMessages, userMessage, botMessage]);\n//     } catch (error) {\n//       console.error(\"Error:\", error);\n\n//       // In case of error, display a fallback message\n//       const botMessage = {\n//         role: \"bot\",\n//         content: \"Sorry, there was an error with the chatbot service.\",\n//         timestamp: new Date(),\n//       };\n//       setMessages((prevMessages) => [...prevMessages, userMessage, botMessage]);\n//     }\n\n//     setInput(\"\"); // Clear the input field\n//   };\n\n//   return (\n//     <div className=\"chatbot-container\">\n//       <div className=\"header\">\n//         <h2>Chatbot</h2>\n//       </div>\n//       <div className=\"messages-container\">\n//         {messages.map((msg, index) => (\n//           <div\n//             key={index}\n//             className={`message ${msg.role === \"user\" ? \"user\" : \"bot\"}`}\n//           >\n//             <div className=\"message-content\">\n//               <p className=\"message-text\">{msg.content}</p>\n//               <span className=\"message-time\">\n//                 {msg.timestamp.toLocaleTimeString()}\n//               </span>\n//             </div>\n//           </div>\n//         ))}\n//       </div>\n//       <div className=\"input-container\">\n//         <input\n//           type=\"text\"\n//           value={input}\n//           onChange={(e) => setInput(e.target.value)}\n//           placeholder=\"Type a message...\"\n//           className=\"input-field\"\n//         />\n//         <button onClick={sendMessage} className=\"send-button\">\n//           Send\n//         </button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Chatbot;\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport \"./Chatbot.css\";\n\nconst Chatbot = () => {\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(\"\");\n\n  const sendMessage = async () => {\n    if (!input.trim()) return;\n\n    const userMessage = { role: \"user\", content: input, timestamp: new Date() };\n\n    // Add user message to UI\n    setMessages((prevMessages) => [...prevMessages, userMessage]);\n\n    try {\n      // Sending message to the backend\n      const response = await axios.post(\"http://localhost:5001/chat\", {\n        message: input,\n      });\n\n      // Checking the response structure and handling the reply\n      const botMessage = {\n        role: \"bot\",\n        content: response.data.reply || \"Sorry, I couldn't understand that.\",\n        timestamp: new Date(),\n      };\n\n      // Add bot response to UI\n      setMessages((prevMessages) => [...prevMessages, userMessage, botMessage]);\n    } catch (error) {\n      console.error(\"Error:\", error);\n\n      // In case of error, display a fallback message\n      const botMessage = {\n        role: \"bot\",\n        content: \"Sorry, there was an error with the chatbot service.\",\n        timestamp: new Date(),\n      };\n      setMessages((prevMessages) => [...prevMessages, userMessage, botMessage]);\n    }\n\n    setInput(\"\"); // Clear the input field\n  };\n\n  return (\n    <div className=\"chatbot-container\">\n      <div className=\"header\">\n        <h2>Chatbot</h2>\n      </div>\n      <div className=\"messages-container\">\n        {messages.map((msg, index) => (\n          <div key={index} className={`message ${msg.role === \"user\" ? \"user\" : \"bot\"}`}>\n            <div className=\"message-content\">\n              <p className=\"message-text\">{msg.content}</p>\n              <span className=\"message-time\">\n                {msg.timestamp.toLocaleTimeString()}\n              </span>\n            </div>\n          </div>\n        ))}\n      </div>\n      <div className=\"input-container\">\n        <input\n          type=\"text\"\n          value={input}\n          onChange={(e) => setInput(e.target.value)}\n          placeholder=\"Type a message...\"\n          className=\"input-field\"\n        />\n        <button onClick={sendMessage} className=\"send-button\">\n          Send\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Chatbot;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}