{"ast":null,"code":"var _jsxFileName = \"/Users/harshitrishav/Demo/jwt-auth-frontend/src/components/Chatbot.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from \"react\";\n// import axios from \"axios\";\n// import \"./chatbot.css\"; // Import the CSS file\n\n// const Chatbot = () => {\n//   const [messages, setMessages] = useState([]);\n//   const [input, setInput] = useState(\"\");\n\n//   const sendMessage = async () => {\n//     if (!input.trim()) return;\n\n//     const userMessage = { role: \"user\", content: input, timestamp: new Date() };\n\n//     // Add user message to UI\n//     setMessages((prevMessages) => [...prevMessages, userMessage]);\n\n//     try {\n//       // Sending message to the backend\n//       const response = await axios.post(\"http://localhost:5001/chat\", {\n//         message: input,\n//       });\n\n//       // Checking the response structure and handling the reply\n//       const botMessage = {\n//         role: \"bot\",\n//         content: response.data.reply || \"Sorry, I couldn't understand that.\",\n//         timestamp: new Date(),\n//       };\n\n//       // Add bot response to UI\n//       setMessages((prevMessages) => [...prevMessages, userMessage, botMessage]);\n//     } catch (error) {\n//       console.error(\"Error:\", error);\n\n//       // In case of error, display a fallback message\n//       const botMessage = {\n//         role: \"bot\",\n//         content: \"Sorry, there was an error with the chatbot service.\",\n//         timestamp: new Date(),\n//       };\n//       setMessages((prevMessages) => [...prevMessages, userMessage, botMessage]);\n//     }\n\n//     setInput(\"\"); // Clear the input field\n//   };\n\n//   return (\n//     <div className=\"chatbot-container\">\n//       <div className=\"header\">\n//         <h2>Chatbot</h2>\n//       </div>\n//       <div className=\"messages-container\">\n//         {messages.map((msg, index) => (\n//           <div\n//             key={index}\n//             className={`message ${msg.role === \"user\" ? \"user\" : \"bot\"}`}\n//           >\n//             <div className=\"message-content\">\n//               <p className=\"message-text\">{msg.content}</p>\n//               <span className=\"message-time\">\n//                 {msg.timestamp.toLocaleTimeString()}\n//               </span>\n//             </div>\n//           </div>\n//         ))}\n//       </div>\n//       <div className=\"input-container\">\n//         <input\n//           type=\"text\"\n//           value={input}\n//           onChange={(e) => setInput(e.target.value)}\n//           placeholder=\"Type a message...\"\n//           className=\"input-field\"\n//         />\n//         <button onClick={sendMessage} className=\"send-button\">\n//           Send\n//         </button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Chatbot;\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport './chatbot.css'; // Import the CSS file for Chatbot styles\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const sendMessage = async () => {\n    if (!input.trim()) return;\n    const userMessage = {\n      role: \"user\",\n      content: input\n    };\n\n    // Add user message to UI\n    setMessages(prevMessages => [...prevMessages, userMessage]);\n    try {\n      // Sending message to the backend\n      const response = await axios.post(\"http://localhost:5001/chat\", {\n        message: input\n      });\n\n      // Checking the response structure and handling the reply\n      const botMessage = {\n        role: \"bot\",\n        content: response.data.reply || \"Sorry, I couldn't understand that.\"\n      };\n\n      // Add bot response to UI\n      setMessages(prevMessages => [...prevMessages, userMessage, botMessage]);\n    } catch (error) {\n      console.error(\"Error:\", error);\n\n      // In case of error, display a fallback message\n      const botMessage = {\n        role: \"bot\",\n        content: \"Sorry, there was an error with the chatbot service.\"\n      };\n      setMessages(prevMessages => [...prevMessages, userMessage, botMessage]);\n    }\n    setInput(\"\"); // Clear the input field\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbox-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        textAlign: \"center\",\n        fontWeight: \"bold\"\n      },\n      children: \"Hey! Need any help?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 2\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages-container\",\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${msg.role === \"user\" ? \"user-message\" : \"bot-message\"}`,\n        children: [msg.role === \"bot\" && /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"/polsialogo.jpeg\",\n          alt: \"Bot\",\n          className: \"bot-avatar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [msg.role === \"user\" ? \"You\" : \"Polysia\", \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 9\n        }, this), \" \", msg.content]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 7\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"Type a message...\",\n        className: \"chat-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        className: \"send-button\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"bxrUXnlHDt+zalfpk8IFX5tJV48=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","input","setInput","sendMessage","trim","userMessage","role","content","prevMessages","response","post","message","botMessage","data","reply","error","console","className","children","style","textAlign","fontWeight","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","src","alt","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["/Users/harshitrishav/Demo/jwt-auth-frontend/src/components/Chatbot.js"],"sourcesContent":["// import React, { useState } from \"react\";\n// import axios from \"axios\";\n// import \"./chatbot.css\"; // Import the CSS file\n\n// const Chatbot = () => {\n//   const [messages, setMessages] = useState([]);\n//   const [input, setInput] = useState(\"\");\n\n//   const sendMessage = async () => {\n//     if (!input.trim()) return;\n\n//     const userMessage = { role: \"user\", content: input, timestamp: new Date() };\n\n//     // Add user message to UI\n//     setMessages((prevMessages) => [...prevMessages, userMessage]);\n\n//     try {\n//       // Sending message to the backend\n//       const response = await axios.post(\"http://localhost:5001/chat\", {\n//         message: input,\n//       });\n\n//       // Checking the response structure and handling the reply\n//       const botMessage = {\n//         role: \"bot\",\n//         content: response.data.reply || \"Sorry, I couldn't understand that.\",\n//         timestamp: new Date(),\n//       };\n\n//       // Add bot response to UI\n//       setMessages((prevMessages) => [...prevMessages, userMessage, botMessage]);\n//     } catch (error) {\n//       console.error(\"Error:\", error);\n\n//       // In case of error, display a fallback message\n//       const botMessage = {\n//         role: \"bot\",\n//         content: \"Sorry, there was an error with the chatbot service.\",\n//         timestamp: new Date(),\n//       };\n//       setMessages((prevMessages) => [...prevMessages, userMessage, botMessage]);\n//     }\n\n//     setInput(\"\"); // Clear the input field\n//   };\n\n//   return (\n//     <div className=\"chatbot-container\">\n//       <div className=\"header\">\n//         <h2>Chatbot</h2>\n//       </div>\n//       <div className=\"messages-container\">\n//         {messages.map((msg, index) => (\n//           <div\n//             key={index}\n//             className={`message ${msg.role === \"user\" ? \"user\" : \"bot\"}`}\n//           >\n//             <div className=\"message-content\">\n//               <p className=\"message-text\">{msg.content}</p>\n//               <span className=\"message-time\">\n//                 {msg.timestamp.toLocaleTimeString()}\n//               </span>\n//             </div>\n//           </div>\n//         ))}\n//       </div>\n//       <div className=\"input-container\">\n//         <input\n//           type=\"text\"\n//           value={input}\n//           onChange={(e) => setInput(e.target.value)}\n//           placeholder=\"Type a message...\"\n//           className=\"input-field\"\n//         />\n//         <button onClick={sendMessage} className=\"send-button\">\n//           Send\n//         </button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Chatbot;\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport './chatbot.css'; // Import the CSS file for Chatbot styles\n\nconst Chatbot = () => {\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(\"\");\n\n  const sendMessage = async () => {\n    if (!input.trim()) return;\n\n    const userMessage = { role: \"user\", content: input };\n\n    // Add user message to UI\n    setMessages((prevMessages) => [...prevMessages, userMessage]);\n\n    try {\n      // Sending message to the backend\n      const response = await axios.post(\"http://localhost:5001/chat\", {\n        message: input,\n      });\n\n      // Checking the response structure and handling the reply\n      const botMessage = {\n        role: \"bot\",\n        content: response.data.reply || \"Sorry, I couldn't understand that.\",\n      };\n\n      // Add bot response to UI\n      setMessages((prevMessages) => [...prevMessages, userMessage, botMessage]);\n    } catch (error) {\n      console.error(\"Error:\", error);\n\n      // In case of error, display a fallback message\n      const botMessage = {\n        role: \"bot\",\n        content: \"Sorry, there was an error with the chatbot service.\",\n      };\n      setMessages((prevMessages) => [...prevMessages, userMessage, botMessage]);\n    }\n\n    setInput(\"\"); // Clear the input field\n  };\n\n  return (\n    <div className=\"chatbox-container\">\n <h2 style={{ textAlign: \"center\", fontWeight: \"bold\" }}>Hey! Need any help?</h2>\n  <div className=\"messages-container\">\n    {messages.map((msg, index) => (\n      <div\n        key={index}\n        className={`message ${msg.role === \"user\" ? \"user-message\" : \"bot-message\"}`}\n      >\n        {msg.role === \"bot\" && (\n          <img\n            src=\"/polsialogo.jpeg\"\n            alt=\"Bot\"\n            className=\"bot-avatar\"\n          />\n        )}\n        <strong>{msg.role === \"user\" ? \"You\" : \"Polysia\"}:</strong> {msg.content}\n      </div>\n    ))}\n  </div>\n  <div className=\"input-container\">\n    <input\n      type=\"text\"\n      value={input}\n      onChange={(e) => setInput(e.target.value)}\n      placeholder=\"Type a message...\"\n      className=\"chat-input\"\n    />\n    <button onClick={sendMessage} className=\"send-button\">\n      Send\n    </button>\n  </div>\n</div>\n\n  );\n};\n\nexport default Chatbot;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}