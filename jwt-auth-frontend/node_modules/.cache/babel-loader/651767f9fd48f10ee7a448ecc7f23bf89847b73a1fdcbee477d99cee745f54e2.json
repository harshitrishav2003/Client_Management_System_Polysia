{"ast":null,"code":"var _jsxFileName = \"/Users/harshitrishav/Demo/jwt-auth-frontend/src/components/ContractManagement.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import { useParams } from \"react-router-dom\";\n// import axios from \"axios\";\n// import \"../App.css\";\n\n// const ClientProfile = () => {\n//   const { clientId } = useParams(); // Get the clientId from the URL params\n//   const [client, setClient] = useState(null);\n//   const [projects, setProjects] = useState([]); // State to store projects\n//   const [error, setError] = useState(\"\");\n//   const [showForm, setShowForm] = useState(false); // Toggle form visibility\n//   const [formData, setFormData] = useState({\n//     project_name: \"\",\n//     description: \"\",\n//     start_date: \"\",\n//     end_date: \"\",\n//     budget: \"\",\n//     client_id: clientId,\n//   });\n\n//   useEffect(() => {\n//     const fetchClientDetails = async () => {\n//       try {\n//         const response = await axios.get(`http://localhost:5005/api/client/${clientId}`);\n//         setClient(response.data);\n//       } catch (err) {\n//         setError(\"Failed to load client details.\");\n//       }\n//     };\n\n//     const fetchClientProjects = async () => {\n//       try {\n//         const response = await axios.get(`http://localhost:5005/api/projects/${clientId}`);\n//         // Make sure team_members is always an array\n//         const updatedProjects = response.data.map((project) => ({\n//           ...project,\n//           team_members: Array.isArray(project.team_members) ? project.team_members : [],\n//         }));\n//         setProjects(updatedProjects);\n//       } catch (err) {\n//         setError(\"Failed to load projects.\");\n//       }\n//     };\n\n//     fetchClientDetails();\n//     fetchClientProjects();\n//   }, [clientId]);\n\n//   const handleFormChange = (e) => {\n//     const { name, value } = e.target;\n\n//     setFormData({\n//       ...formData,\n//       [name]: value,\n//     });\n//   };\n\n//   const handleFormSubmit = async (e) => {\n//     e.preventDefault();\n//     try {\n//       const response = await axios.post(\"http://localhost:5005/api/projects\", formData);\n//       setProjects([...projects, response.data]); // Add new project to the list\n//       setShowForm(false); // Hide form after submission\n//       console.log(response.data); // Handle the response data (e.g., display success message)\n//     } catch (error) {\n//       console.error(\"Error submitting form:\", error);\n//     }\n//   };\n\n//   if (error) {\n//     return <div>{error}</div>;\n//   }\n\n//   if (!client) {\n//     return <div>Loading...</div>;\n//   }\n\n//   return (\n//     <div>\n//       <h1 style={{ textAlign: \"center\" }}>Projects for {client.client_name}</h1>\n\n//       {/* Display Projects in Table Format */}\n//       <h2>Projects</h2>\n//       {projects.length === 0 ? (\n//         <p>No projects found for this client.</p>\n//       ) : (\n//         <table className=\"project-table\">\n//           <thead>\n//             <tr>\n//               <th>Project Name</th>\n//               <th>Description</th>\n//               <th>Start Date</th>\n//               <th>End Date</th>\n//               <th>Budget</th>\n//               <th>Team Members</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {projects.map((project) => (\n//               <tr key={project._id}>\n//                 <td>{project.project_name}</td>\n//                 <td>{project.description}</td>\n//                 <td>{new Date(project.start_date).toLocaleDateString()}</td>\n//                 <td>{new Date(project.end_date).toLocaleDateString()}</td>\n//                 <td>{project.budget}</td>\n//                 <td>{(project.team_members || []).join(\", \")}</td>\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       )}\n\n//       <div className=\"client-profile-card\">\n//         {/* Button to Show/Hide Form */}\n//         <button onClick={() => setShowForm(!showForm)}>\n//           {showForm ? \"Cancel\" : \"Add New Project\"}\n//         </button>\n\n//         {/* Project Creation Form */}\n//         {showForm && (\n//           <div className=\"project-form\">\n//           <h2>Create a New Project</h2>\n//           <form onSubmit={handleFormSubmit}>\n//             <div>\n//               <label>Project Name</label>\n//               <input\n//                 type=\"text\"\n//                 name=\"project_name\"\n//                 value={formData.project_name}\n//                 onChange={handleFormChange}\n//                 required\n//               />\n//             </div>\n//             <div>\n//               <label>Description</label>\n//               <textarea\n//                 name=\"description\"\n//                 value={formData.description}\n//                 onChange={handleFormChange}\n//                 className=\"description-input\"\n//               />\n//             </div>\n//             <div>\n//               <label>Start Date</label>\n//               <input\n//                 type=\"date\"\n//                 name=\"start_date\"\n//                 value={formData.start_date}\n//                 onChange={handleFormChange}\n//                 className=\"date-input\"\n//               />\n//             </div>\n//             <div>\n//               <label>End Date</label>\n//               <input\n//                 type=\"date\"\n//                 name=\"end_date\"\n//                 value={formData.end_date}\n//                 onChange={handleFormChange}\n//                 className=\"date-input\"\n//               />\n//             </div>\n//             <div>\n//               <label>Budget</label>\n//               <input\n//                 type=\"number\"\n//                 name=\"budget\"\n//                 value={formData.budget}\n//                 onChange={handleFormChange}\n//               />\n//             </div>\n//             <div>\n//               <button type=\"submit\">Create Project</button>\n//             </div>\n//           </form>\n//         </div>\n\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ClientProfile;\n// import React, { useState, useEffect } from \"react\";\n// import { useParams } from \"react-router-dom\";\n// import {\n//   Button,\n//   Card,\n//   TextField,\n//   Typography,\n//   Table,\n//   TableBody,\n//   TableCell,\n//   TableContainer,\n//   TableHead,\n//   TableRow,\n//   Paper,\n//   Modal,\n// } from \"@mui/material\";\n// import axios from \"axios\";\n\n// const ClientProfile = () => {\n//   const { clientId } = useParams();\n//   const [client, setClient] = useState(null);\n//   const [projects, setProjects] = useState([]);\n//   const [error, setError] = useState(\"\");\n//   const [showForm, setShowForm] = useState(false);\n//   const [formData, setFormData] = useState({\n//     project_name: \"\",\n//     description: \"\",\n//     start_date: \"\",\n//     end_date: \"\",\n//     budget: \"\",\n//     client_id: clientId,\n//   });\n\n//   useEffect(() => {\n//     const fetchClientDetails = async () => {\n//       try {\n//         const response = await axios.get(`http://localhost:5005/api/client/${clientId}`);\n//         setClient(response.data);\n//       } catch (err) {\n//         setError(\"Failed to load client details.\");\n//       }\n//     };\n\n//     const fetchClientProjects = async () => {\n//       try {\n//         const response = await axios.get(`http://localhost:5005/api/projects/${clientId}`);\n//         setProjects(response.data);\n//       } catch (err) {\n//         setError(\"Failed to load projects.\");\n//       }\n//     };\n\n//     fetchClientDetails();\n//     fetchClientProjects();\n//   }, [clientId]);\n\n//   const handleFormChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData({\n//       ...formData,\n//       [name]: value,\n//     });\n//   };\n\n//   const handleFormSubmit = async (e) => {\n//     e.preventDefault();\n//     try {\n//       const response = await axios.post(\"http://localhost:5005/api/projects\", formData);\n//       setProjects([...projects, response.data]);\n//       setShowForm(false);\n//     } catch (error) {\n//       console.error(\"Error submitting form:\", error);\n//     }\n//   };\n\n//   if (error) {\n//     return <Typography color=\"error\">{error}</Typography>;\n//   }\n\n//   if (!client) {\n//     return <Typography>Loading...</Typography>;\n//   }\n\n//   return (\n//     <div style={{ padding: \"24px\" }}>\n//       <Typography variant=\"h4\" align=\"center\" gutterBottom>\n//         Projects for {client.client_name}\n//       </Typography>\n//       <Card style={{ padding: \"20px\" }}>\n//         {/* <Typography variant=\"h5\">Projects</Typography> */}\n//         {projects.length === 0 ? (\n//           <Typography>No projects found for this client.</Typography>\n//         ) : (\n//           <TableContainer component={Paper}>\n//             <Table>\n//               <TableHead>\n//                 <TableRow>\n//                   <TableCell>Project Name</TableCell>\n//                   <TableCell>Description</TableCell>\n//                   <TableCell>Start Date</TableCell>\n//                   <TableCell>End Date</TableCell>\n//                   <TableCell>Budget</TableCell>\n//                 </TableRow>\n//               </TableHead>\n//               <TableBody>\n//                 {projects.map((project) => (\n//                   <TableRow key={project._id}>\n//                     <TableCell>{project.project_name}</TableCell>\n//                     <TableCell>{project.description}</TableCell>\n//                     <TableCell>{new Date(project.start_date).toLocaleDateString()}</TableCell>\n//                     <TableCell>{new Date(project.end_date).toLocaleDateString()}</TableCell>\n//                     <TableCell>{project.budget}</TableCell>\n//                   </TableRow>\n//                 ))}\n//               </TableBody>\n//             </Table>\n//           </TableContainer>\n//         )}\n//         <Button\n//           variant=\"contained\"\n//           color=\"primary\"\n//           onClick={() => setShowForm(!showForm)}\n//           style={{ marginTop: \"20px\" }}\n//         >\n//           {showForm ? \"Cancel\" : \"Add New Project\"}\n//         </Button>\n//         <Modal open={showForm} onClose={() => setShowForm(false)}>\n//           <Card style={{ padding: \"20px\", maxWidth: \"500px\", margin: \"auto\", marginTop: \"10%\" }}>\n//             <Typography variant=\"h6\" gutterBottom>\n//               Create a New Project\n//             </Typography>\n//             <form onSubmit={handleFormSubmit}>\n//               <TextField\n//                 fullWidth\n//                 label=\"Project Name\"\n//                 name=\"project_name\"\n//                 value={formData.project_name}\n//                 onChange={handleFormChange}\n//                 margin=\"normal\"\n//                 required\n//               />\n//               <TextField\n//                 fullWidth\n//                 label=\"Description\"\n//                 name=\"description\"\n//                 value={formData.description}\n//                 onChange={handleFormChange}\n//                 margin=\"normal\"\n//                 multiline\n//               />\n//               <TextField\n//                 fullWidth\n//                 label=\"Start Date\"\n//                 type=\"date\"\n//                 name=\"start_date\"\n//                 value={formData.start_date}\n//                 onChange={handleFormChange}\n//                 margin=\"normal\"\n//                 InputLabelProps={{ shrink: true }}\n//               />\n//               <TextField\n//                 fullWidth\n//                 label=\"End Date\"\n//                 type=\"date\"\n//                 name=\"end_date\"\n//                 value={formData.end_date}\n//                 onChange={handleFormChange}\n//                 margin=\"normal\"\n//                 InputLabelProps={{ shrink: true }}\n//               />\n//               <TextField\n//                 fullWidth\n//                 label=\"Budget\"\n//                 type=\"number\"\n//                 name=\"budget\"\n//                 value={formData.budget}\n//                 onChange={handleFormChange}\n//                 margin=\"normal\"\n//               />\n//               <Button variant=\"contained\" color=\"primary\" type=\"submit\" style={{ marginTop: \"20px\" }}>\n//                 Create Project\n//               </Button>\n//             </form>\n//           </Card>\n//         </Modal>\n//       </Card>\n//     </div>\n//   );\n// };\n\n// export default ClientProfile;\n// import React, { useEffect, useState } from \"react\";\n// import { useParams } from \"react-router-dom\";\n// import { Button, Table, Modal, Input, Form, Typography, message, Spin, Card, Alert } from \"antd\";\n// import { EditOutlined, PlusOutlined } from \"@ant-design/icons\";\n// import \"antd/dist/reset.css\";\n\n// const { Title } = Typography;\n\n// const ClientProfile = () => {\n//   const { clientId } = useParams();\n//   const [client, setClient] = useState(null);\n//   const [projects, setProjects] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [showForm, setShowForm] = useState(false);\n//   const [showEditClientForm, setShowEditClientForm] = useState(false);\n//   const [editProject, setEditProject] = useState(null);\n//   const [form] = Form.useForm();\n//   const [clientForm] = Form.useForm();\n\n//   useEffect(() => {\n//     const fetchClientDetails = async () => {\n//       try {\n//         const response = await fetch(`http://localhost:5005/api/client/${clientId}`);\n//         const data = await response.json();\n//         setClient(data);\n//         clientForm.setFieldsValue(data);\n//       } catch (err) {\n//         setError(\"Failed to load client details.\");\n//       }\n//     };\n\n//     const fetchClientProjects = async () => {\n//       try {\n//         const response = await fetch(`http://localhost:5005/api/projects/${clientId}`);\n//         const data = await response.json();\n//         setProjects(data);\n//       } catch (err) {\n//         setError(\"Failed to load projects.\");\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchClientDetails();\n//     fetchClientProjects();\n//   }, [clientId]);\n\n//   const handleFormSubmit = async () => {\n//     try {\n//       const formData = await form.validateFields();\n//       if (editProject) {\n//         // Update project\n//         await fetch(`http://localhost:5005/api/projects/${editProject._id}`, {\n//           method: \"PUT\",\n//           headers: { \"Content-Type\": \"application/json\" },\n//           body: JSON.stringify(formData),\n//         });\n//         setProjects(projects.map((p) => (p._id === editProject._id ? { ...p, ...formData } : p)));\n//       } else {\n//         // Create new project\n//         const response = await fetch(\"http://localhost:5005/api/projects\", {\n//           method: \"POST\",\n//           headers: { \"Content-Type\": \"application/json\" },\n//           body: JSON.stringify({ ...formData, client_id: clientId }),\n//         });\n//         const newProject = await response.json();\n//         setProjects([...projects, newProject]);\n//       }\n//       setShowForm(false);\n//       setEditProject(null);\n//       form.resetFields();\n//       message.success(\"Project saved successfully\");\n//     } catch (error) {\n//       message.error(\"Error saving project\");\n//     }\n//   };\n\n//   const handleClientUpdate = async () => {\n//     try {\n//       const formData = await clientForm.validateFields();\n//       await fetch(`http://localhost:5005/api/client/${clientId}`, {\n//         method: \"PUT\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify(formData),\n//       });\n//       setClient(formData);\n//       setShowEditClientForm(false);\n//       message.success(\"Client details updated successfully\");\n//     } catch (error) {\n//       message.error(\"Error updating client details\");\n//     }\n//   };\n\n//   if (loading) return <Spin size=\"large\" style={{ display: \"block\", margin: \"auto\" }} />;\n//   if (error) return <Alert message={error} type=\"error\" showIcon />;\n//   if (!client) return <Typography>Loading...</Typography>;\n\n//   return (\n//     <div style={{ padding: \"24px\" }}>\n//       <Card>\n//         <Title level={3}>\n//           {client.client_name} <EditOutlined onClick={() => setShowEditClientForm(true)} style={{ cursor: \"pointer\", marginLeft: 10 }} />\n//         </Title>\n//         <Table\n//           dataSource={projects}\n//           rowKey=\"_id\"\n//           columns={[\n//             { title: \"Project Name\", dataIndex: \"project_name\" },\n//             { title: \"Description\", dataIndex: \"description\" },\n//             { title: \"Start Date\", dataIndex: \"start_date\", render: (date) => new Date(date).toLocaleDateString() },\n//             { title: \"End Date\", dataIndex: \"end_date\", render: (date) => new Date(date).toLocaleDateString() },\n//             { title: \"Budget\", dataIndex: \"budget\" },\n//             {\n//               title: \"Actions\",\n//               render: (_, record) => (\n//                 <Button icon={<EditOutlined />} onClick={() => { setEditProject(record); setShowForm(true); form.setFieldsValue(record); }} />\n//               ),\n//             },\n//           ]}\n//         />\n//         <Button type=\"primary\" icon={<PlusOutlined />} onClick={() => { setEditProject(null); setShowForm(true); }} style={{ marginTop: \"20px\" }}>\n//           Add New Project\n//         </Button>\n//       </Card>\n\n//       <Modal title=\"Edit Client Details\" open={showEditClientForm} onCancel={() => setShowEditClientForm(false)} onOk={handleClientUpdate}>\n//         <Form form={clientForm} layout=\"vertical\">\n//           <Form.Item name=\"client_name\" label=\"Client Name\" rules={[{ required: true, message: \"Please enter a client name\" }]}> <Input /> </Form.Item>\n//           <Form.Item name=\"client_email\" label=\"Client Email\" rules={[{ required: true, message: \"Please enter a valid email\" }]}> <Input type=\"email\" /> </Form.Item>\n//         </Form>\n//       </Modal>\n\n//       <Modal\n//         title={editProject ? \"Edit Project\" : \"Create a New Project\"}\n//         open={showForm}\n//         onCancel={() => setShowForm(false)}\n//         onOk={handleFormSubmit}\n//         okText={editProject ? \"Update Project\" : \"Create Project\"}\n//       >\n//         <Form form={form} layout=\"vertical\">\n//           <Form.Item name=\"project_name\" label=\"Project Name\" rules={[{ required: true, message: \"Please enter a project name\" }]}> <Input /> </Form.Item>\n//           <Form.Item name=\"description\" label=\"Description\"> <Input.TextArea /> </Form.Item>\n//           <Form.Item name=\"start_date\" label=\"Start Date\" rules={[{ required: true, message: \"Please select a start date\" }]}> <Input type=\"date\" /> </Form.Item>\n//           <Form.Item name=\"end_date\" label=\"End Date\" rules={[{ required: true, message: \"Please select an end date\" }]}> <Input type=\"date\" /> </Form.Item>\n//           <Form.Item name=\"budget\" label=\"Budget\"> <Input type=\"number\" /> </Form.Item>\n//         </Form>\n//       </Modal>\n//     </div>\n//   );\n// };\n\n// export default ClientProfile;\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { Button, Table, Modal, Input, Form, Typography, message, Spin, Card, Alert } from \"antd\";\nimport { EditOutlined, PlusOutlined } from \"@ant-design/icons\";\nimport \"antd/dist/reset.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Title\n} = Typography;\nconst ClientProfile = () => {\n  _s();\n  const {\n    clientId\n  } = useParams();\n  const [client, setClient] = useState(null);\n  const [projects, setProjects] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [showForm, setShowForm] = useState(false);\n  const [editProject, setEditProject] = useState(null);\n  const [form] = Form.useForm();\n  const [clientForm] = Form.useForm();\n\n  // Added state for showing/hiding the client edit form\n  const [showEditClientForm, setShowEditClientForm] = useState(false);\n  useEffect(() => {\n    const fetchClientDetails = async () => {\n      try {\n        const response = await axios.get(`http://localhost:5005/api/client/${clientId}`);\n        setClient(response.data);\n        clientForm.setFieldsValue(response.data);\n      } catch (err) {\n        setError(\"Failed to load client details.\");\n      }\n    };\n    const fetchClientProjects = async () => {\n      try {\n        const response = await axios.get(`http://localhost:5005/api/projects/${clientId}`);\n        setProjects(response.data);\n      } catch (err) {\n        setError(\"Failed to load projects.\");\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchClientDetails();\n    fetchClientProjects();\n  }, [clientId]);\n  const handleFormSubmit = async () => {\n    try {\n      const formData = await form.validateFields();\n      if (editProject) {\n        // Update project\n        await axios.put(`http://localhost:5005/api/projects/${editProject._id}`, formData);\n        setProjects(projects.map(p => p._id === editProject._id ? {\n          ...p,\n          ...formData\n        } : p));\n      } else {\n        // Create new project\n        const response = await axios.post(\"http://localhost:5005/api/projects\", {\n          ...formData,\n          client_id: clientId\n        });\n        setProjects([...projects, response.data]);\n      }\n      setShowForm(false);\n      setEditProject(null);\n      form.resetFields();\n      message.success(\"Project saved successfully\");\n    } catch (error) {\n      message.error(\"Error saving project\");\n    }\n  };\n  const handleClientUpdate = async () => {\n    try {\n      const formData = await clientForm.validateFields();\n      await axios.put(`http://localhost:5005/api/client/${clientId}`, formData);\n      setClient(formData);\n      setShowEditClientForm(false);\n      message.success(\"Client details updated successfully\");\n    } catch (error) {\n      message.error(\"Error updating client details\");\n    }\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(Spin, {\n    size: \"large\",\n    style: {\n      display: \"block\",\n      margin: \"auto\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 615,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(Alert, {\n    message: error,\n    type: \"error\",\n    showIcon: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 616,\n    columnNumber: 21\n  }, this);\n  if (!client) return /*#__PURE__*/_jsxDEV(Typography, {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 617,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: \"24px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Card, {\n      children: [/*#__PURE__*/_jsxDEV(Title, {\n        level: 3,\n        children: [client.client_name, \" \", /*#__PURE__*/_jsxDEV(EditOutlined, {\n          onClick: () => setShowEditClientForm(true),\n          style: {\n            cursor: \"pointer\",\n            marginLeft: 10\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 623,\n          columnNumber: 32\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 622,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Table, {\n        dataSource: projects,\n        rowKey: \"_id\",\n        columns: [{\n          title: \"Project Name\",\n          dataIndex: \"project_name\"\n        }, {\n          title: \"Description\",\n          dataIndex: \"description\"\n        }, {\n          title: \"Start Date\",\n          dataIndex: \"start_date\",\n          render: date => new Date(date).toLocaleDateString()\n        }, {\n          title: \"End Date\",\n          dataIndex: \"end_date\",\n          render: date => new Date(date).toLocaleDateString()\n        }, {\n          title: \"Budget\",\n          dataIndex: \"budget\"\n        }, {\n          title: \"Actions\",\n          render: (_, record) => /*#__PURE__*/_jsxDEV(Button, {\n            icon: /*#__PURE__*/_jsxDEV(EditOutlined, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 637,\n              columnNumber: 31\n            }, this),\n            onClick: () => {\n              setEditProject(record);\n              setShowForm(true);\n              form.setFieldsValue(record);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 637,\n            columnNumber: 17\n          }, this)\n        }]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 625,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        icon: /*#__PURE__*/_jsxDEV(PlusOutlined, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 642,\n          columnNumber: 38\n        }, this),\n        onClick: () => {\n          setEditProject(null);\n          setShowForm(true);\n        },\n        style: {\n          marginTop: \"20px\"\n        },\n        children: \"Add New Project\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 642,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 621,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      title: \"Edit Client Details\",\n      open: showEditClientForm,\n      onCancel: () => setShowEditClientForm(false),\n      onOk: handleClientUpdate,\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        form: clientForm,\n        layout: \"vertical\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n          name: \"client_name\",\n          label: \"Client Name\",\n          rules: [{\n            required: true,\n            message: \"Please enter a client name\"\n          }],\n          children: [\" \", /*#__PURE__*/_jsxDEV(Input, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 649,\n            columnNumber: 130\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 649,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          name: \"client_email\",\n          label: \"Client Email\",\n          rules: [{\n            required: true,\n            message: \"Please enter a valid email\"\n          }],\n          children: [\" \", /*#__PURE__*/_jsxDEV(Input, {\n            type: \"email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 650,\n            columnNumber: 132\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 650,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 648,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 647,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      title: editProject ? \"Edit Project\" : \"Create a New Project\",\n      open: showForm,\n      onCancel: () => setShowForm(false),\n      onOk: handleFormSubmit,\n      okText: editProject ? \"Update Project\" : \"Create Project\",\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        form: form,\n        layout: \"vertical\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n          name: \"project_name\",\n          label: \"Project Name\",\n          rules: [{\n            required: true,\n            message: \"Please enter a project name\"\n          }],\n          children: [\" \", /*#__PURE__*/_jsxDEV(Input, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 662,\n            columnNumber: 133\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 662,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          name: \"description\",\n          label: \"Description\",\n          children: [\" \", /*#__PURE__*/_jsxDEV(Input.TextArea, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 663,\n            columnNumber: 62\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 663,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          name: \"start_date\",\n          label: \"Start Date\",\n          rules: [{\n            required: true,\n            message: \"Please select a start date\"\n          }],\n          children: [\" \", /*#__PURE__*/_jsxDEV(Input, {\n            type: \"date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 664,\n            columnNumber: 128\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 664,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          name: \"end_date\",\n          label: \"End Date\",\n          rules: [{\n            required: true,\n            message: \"Please select an end date\"\n          }],\n          children: [\" \", /*#__PURE__*/_jsxDEV(Input, {\n            type: \"date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 665,\n            columnNumber: 123\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 665,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          name: \"budget\",\n          label: \"Budget\",\n          children: [\" \", /*#__PURE__*/_jsxDEV(Input, {\n            type: \"number\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 666,\n            columnNumber: 52\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 666,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 661,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 654,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 620,\n    columnNumber: 5\n  }, this);\n};\n_s(ClientProfile, \"FRZIrhNvFdRjSFCUKMV2i5vrruA=\", false, function () {\n  return [useParams, Form.useForm, Form.useForm];\n});\n_c = ClientProfile;\nexport default ClientProfile;\nvar _c;\n$RefreshReg$(_c, \"ClientProfile\");","map":{"version":3,"names":["React","useState","useEffect","useParams","axios","Button","Table","Modal","Input","Form","Typography","message","Spin","Card","Alert","EditOutlined","PlusOutlined","jsxDEV","_jsxDEV","Title","ClientProfile","_s","clientId","client","setClient","projects","setProjects","loading","setLoading","error","setError","showForm","setShowForm","editProject","setEditProject","form","useForm","clientForm","showEditClientForm","setShowEditClientForm","fetchClientDetails","response","get","data","setFieldsValue","err","fetchClientProjects","handleFormSubmit","formData","validateFields","put","_id","map","p","post","client_id","resetFields","success","handleClientUpdate","size","style","display","margin","fileName","_jsxFileName","lineNumber","columnNumber","type","showIcon","children","padding","level","client_name","onClick","cursor","marginLeft","dataSource","rowKey","columns","title","dataIndex","render","date","Date","toLocaleDateString","_","record","icon","marginTop","open","onCancel","onOk","layout","Item","name","label","rules","required","okText","TextArea","_c","$RefreshReg$"],"sources":["/Users/harshitrishav/Demo/jwt-auth-frontend/src/components/ContractManagement.js"],"sourcesContent":["\n// import React, { useState, useEffect } from \"react\";\n// import { useParams } from \"react-router-dom\";\n// import axios from \"axios\";\n// import \"../App.css\";\n\n// const ClientProfile = () => {\n//   const { clientId } = useParams(); // Get the clientId from the URL params\n//   const [client, setClient] = useState(null);\n//   const [projects, setProjects] = useState([]); // State to store projects\n//   const [error, setError] = useState(\"\");\n//   const [showForm, setShowForm] = useState(false); // Toggle form visibility\n//   const [formData, setFormData] = useState({\n//     project_name: \"\",\n//     description: \"\",\n//     start_date: \"\",\n//     end_date: \"\",\n//     budget: \"\",\n//     client_id: clientId,\n//   });\n\n//   useEffect(() => {\n//     const fetchClientDetails = async () => {\n//       try {\n//         const response = await axios.get(`http://localhost:5005/api/client/${clientId}`);\n//         setClient(response.data);\n//       } catch (err) {\n//         setError(\"Failed to load client details.\");\n//       }\n//     };\n\n//     const fetchClientProjects = async () => {\n//       try {\n//         const response = await axios.get(`http://localhost:5005/api/projects/${clientId}`);\n//         // Make sure team_members is always an array\n//         const updatedProjects = response.data.map((project) => ({\n//           ...project,\n//           team_members: Array.isArray(project.team_members) ? project.team_members : [],\n//         }));\n//         setProjects(updatedProjects);\n//       } catch (err) {\n//         setError(\"Failed to load projects.\");\n//       }\n//     };\n\n//     fetchClientDetails();\n//     fetchClientProjects();\n//   }, [clientId]);\n\n//   const handleFormChange = (e) => {\n//     const { name, value } = e.target;\n\n//     setFormData({\n//       ...formData,\n//       [name]: value,\n//     });\n//   };\n\n//   const handleFormSubmit = async (e) => {\n//     e.preventDefault();\n//     try {\n//       const response = await axios.post(\"http://localhost:5005/api/projects\", formData);\n//       setProjects([...projects, response.data]); // Add new project to the list\n//       setShowForm(false); // Hide form after submission\n//       console.log(response.data); // Handle the response data (e.g., display success message)\n//     } catch (error) {\n//       console.error(\"Error submitting form:\", error);\n//     }\n//   };\n\n//   if (error) {\n//     return <div>{error}</div>;\n//   }\n\n//   if (!client) {\n//     return <div>Loading...</div>;\n//   }\n\n//   return (\n//     <div>\n//       <h1 style={{ textAlign: \"center\" }}>Projects for {client.client_name}</h1>\n\n//       {/* Display Projects in Table Format */}\n//       <h2>Projects</h2>\n//       {projects.length === 0 ? (\n//         <p>No projects found for this client.</p>\n//       ) : (\n//         <table className=\"project-table\">\n//           <thead>\n//             <tr>\n//               <th>Project Name</th>\n//               <th>Description</th>\n//               <th>Start Date</th>\n//               <th>End Date</th>\n//               <th>Budget</th>\n//               <th>Team Members</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {projects.map((project) => (\n//               <tr key={project._id}>\n//                 <td>{project.project_name}</td>\n//                 <td>{project.description}</td>\n//                 <td>{new Date(project.start_date).toLocaleDateString()}</td>\n//                 <td>{new Date(project.end_date).toLocaleDateString()}</td>\n//                 <td>{project.budget}</td>\n//                 <td>{(project.team_members || []).join(\", \")}</td>\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       )}\n\n//       <div className=\"client-profile-card\">\n//         {/* Button to Show/Hide Form */}\n//         <button onClick={() => setShowForm(!showForm)}>\n//           {showForm ? \"Cancel\" : \"Add New Project\"}\n//         </button>\n\n//         {/* Project Creation Form */}\n//         {showForm && (\n//           <div className=\"project-form\">\n//           <h2>Create a New Project</h2>\n//           <form onSubmit={handleFormSubmit}>\n//             <div>\n//               <label>Project Name</label>\n//               <input\n//                 type=\"text\"\n//                 name=\"project_name\"\n//                 value={formData.project_name}\n//                 onChange={handleFormChange}\n//                 required\n//               />\n//             </div>\n//             <div>\n//               <label>Description</label>\n//               <textarea\n//                 name=\"description\"\n//                 value={formData.description}\n//                 onChange={handleFormChange}\n//                 className=\"description-input\"\n//               />\n//             </div>\n//             <div>\n//               <label>Start Date</label>\n//               <input\n//                 type=\"date\"\n//                 name=\"start_date\"\n//                 value={formData.start_date}\n//                 onChange={handleFormChange}\n//                 className=\"date-input\"\n//               />\n//             </div>\n//             <div>\n//               <label>End Date</label>\n//               <input\n//                 type=\"date\"\n//                 name=\"end_date\"\n//                 value={formData.end_date}\n//                 onChange={handleFormChange}\n//                 className=\"date-input\"\n//               />\n//             </div>\n//             <div>\n//               <label>Budget</label>\n//               <input\n//                 type=\"number\"\n//                 name=\"budget\"\n//                 value={formData.budget}\n//                 onChange={handleFormChange}\n//               />\n//             </div>\n//             <div>\n//               <button type=\"submit\">Create Project</button>\n//             </div>\n//           </form>\n//         </div>\n        \n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ClientProfile;\n// import React, { useState, useEffect } from \"react\";\n// import { useParams } from \"react-router-dom\";\n// import {\n//   Button,\n//   Card,\n//   TextField,\n//   Typography,\n//   Table,\n//   TableBody,\n//   TableCell,\n//   TableContainer,\n//   TableHead,\n//   TableRow,\n//   Paper,\n//   Modal,\n// } from \"@mui/material\";\n// import axios from \"axios\";\n\n// const ClientProfile = () => {\n//   const { clientId } = useParams();\n//   const [client, setClient] = useState(null);\n//   const [projects, setProjects] = useState([]);\n//   const [error, setError] = useState(\"\");\n//   const [showForm, setShowForm] = useState(false);\n//   const [formData, setFormData] = useState({\n//     project_name: \"\",\n//     description: \"\",\n//     start_date: \"\",\n//     end_date: \"\",\n//     budget: \"\",\n//     client_id: clientId,\n//   });\n\n//   useEffect(() => {\n//     const fetchClientDetails = async () => {\n//       try {\n//         const response = await axios.get(`http://localhost:5005/api/client/${clientId}`);\n//         setClient(response.data);\n//       } catch (err) {\n//         setError(\"Failed to load client details.\");\n//       }\n//     };\n\n//     const fetchClientProjects = async () => {\n//       try {\n//         const response = await axios.get(`http://localhost:5005/api/projects/${clientId}`);\n//         setProjects(response.data);\n//       } catch (err) {\n//         setError(\"Failed to load projects.\");\n//       }\n//     };\n\n//     fetchClientDetails();\n//     fetchClientProjects();\n//   }, [clientId]);\n\n//   const handleFormChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData({\n//       ...formData,\n//       [name]: value,\n//     });\n//   };\n\n//   const handleFormSubmit = async (e) => {\n//     e.preventDefault();\n//     try {\n//       const response = await axios.post(\"http://localhost:5005/api/projects\", formData);\n//       setProjects([...projects, response.data]);\n//       setShowForm(false);\n//     } catch (error) {\n//       console.error(\"Error submitting form:\", error);\n//     }\n//   };\n\n//   if (error) {\n//     return <Typography color=\"error\">{error}</Typography>;\n//   }\n\n//   if (!client) {\n//     return <Typography>Loading...</Typography>;\n//   }\n\n//   return (\n//     <div style={{ padding: \"24px\" }}>\n//       <Typography variant=\"h4\" align=\"center\" gutterBottom>\n//         Projects for {client.client_name}\n//       </Typography>\n//       <Card style={{ padding: \"20px\" }}>\n//         {/* <Typography variant=\"h5\">Projects</Typography> */}\n//         {projects.length === 0 ? (\n//           <Typography>No projects found for this client.</Typography>\n//         ) : (\n//           <TableContainer component={Paper}>\n//             <Table>\n//               <TableHead>\n//                 <TableRow>\n//                   <TableCell>Project Name</TableCell>\n//                   <TableCell>Description</TableCell>\n//                   <TableCell>Start Date</TableCell>\n//                   <TableCell>End Date</TableCell>\n//                   <TableCell>Budget</TableCell>\n//                 </TableRow>\n//               </TableHead>\n//               <TableBody>\n//                 {projects.map((project) => (\n//                   <TableRow key={project._id}>\n//                     <TableCell>{project.project_name}</TableCell>\n//                     <TableCell>{project.description}</TableCell>\n//                     <TableCell>{new Date(project.start_date).toLocaleDateString()}</TableCell>\n//                     <TableCell>{new Date(project.end_date).toLocaleDateString()}</TableCell>\n//                     <TableCell>{project.budget}</TableCell>\n//                   </TableRow>\n//                 ))}\n//               </TableBody>\n//             </Table>\n//           </TableContainer>\n//         )}\n//         <Button\n//           variant=\"contained\"\n//           color=\"primary\"\n//           onClick={() => setShowForm(!showForm)}\n//           style={{ marginTop: \"20px\" }}\n//         >\n//           {showForm ? \"Cancel\" : \"Add New Project\"}\n//         </Button>\n//         <Modal open={showForm} onClose={() => setShowForm(false)}>\n//           <Card style={{ padding: \"20px\", maxWidth: \"500px\", margin: \"auto\", marginTop: \"10%\" }}>\n//             <Typography variant=\"h6\" gutterBottom>\n//               Create a New Project\n//             </Typography>\n//             <form onSubmit={handleFormSubmit}>\n//               <TextField\n//                 fullWidth\n//                 label=\"Project Name\"\n//                 name=\"project_name\"\n//                 value={formData.project_name}\n//                 onChange={handleFormChange}\n//                 margin=\"normal\"\n//                 required\n//               />\n//               <TextField\n//                 fullWidth\n//                 label=\"Description\"\n//                 name=\"description\"\n//                 value={formData.description}\n//                 onChange={handleFormChange}\n//                 margin=\"normal\"\n//                 multiline\n//               />\n//               <TextField\n//                 fullWidth\n//                 label=\"Start Date\"\n//                 type=\"date\"\n//                 name=\"start_date\"\n//                 value={formData.start_date}\n//                 onChange={handleFormChange}\n//                 margin=\"normal\"\n//                 InputLabelProps={{ shrink: true }}\n//               />\n//               <TextField\n//                 fullWidth\n//                 label=\"End Date\"\n//                 type=\"date\"\n//                 name=\"end_date\"\n//                 value={formData.end_date}\n//                 onChange={handleFormChange}\n//                 margin=\"normal\"\n//                 InputLabelProps={{ shrink: true }}\n//               />\n//               <TextField\n//                 fullWidth\n//                 label=\"Budget\"\n//                 type=\"number\"\n//                 name=\"budget\"\n//                 value={formData.budget}\n//                 onChange={handleFormChange}\n//                 margin=\"normal\"\n//               />\n//               <Button variant=\"contained\" color=\"primary\" type=\"submit\" style={{ marginTop: \"20px\" }}>\n//                 Create Project\n//               </Button>\n//             </form>\n//           </Card>\n//         </Modal>\n//       </Card>\n//     </div>\n//   );\n// };\n\n// export default ClientProfile;\n// import React, { useEffect, useState } from \"react\";\n// import { useParams } from \"react-router-dom\";\n// import { Button, Table, Modal, Input, Form, Typography, message, Spin, Card, Alert } from \"antd\";\n// import { EditOutlined, PlusOutlined } from \"@ant-design/icons\";\n// import \"antd/dist/reset.css\";\n\n// const { Title } = Typography;\n\n// const ClientProfile = () => {\n//   const { clientId } = useParams();\n//   const [client, setClient] = useState(null);\n//   const [projects, setProjects] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [showForm, setShowForm] = useState(false);\n//   const [showEditClientForm, setShowEditClientForm] = useState(false);\n//   const [editProject, setEditProject] = useState(null);\n//   const [form] = Form.useForm();\n//   const [clientForm] = Form.useForm();\n\n//   useEffect(() => {\n//     const fetchClientDetails = async () => {\n//       try {\n//         const response = await fetch(`http://localhost:5005/api/client/${clientId}`);\n//         const data = await response.json();\n//         setClient(data);\n//         clientForm.setFieldsValue(data);\n//       } catch (err) {\n//         setError(\"Failed to load client details.\");\n//       }\n//     };\n\n//     const fetchClientProjects = async () => {\n//       try {\n//         const response = await fetch(`http://localhost:5005/api/projects/${clientId}`);\n//         const data = await response.json();\n//         setProjects(data);\n//       } catch (err) {\n//         setError(\"Failed to load projects.\");\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchClientDetails();\n//     fetchClientProjects();\n//   }, [clientId]);\n\n//   const handleFormSubmit = async () => {\n//     try {\n//       const formData = await form.validateFields();\n//       if (editProject) {\n//         // Update project\n//         await fetch(`http://localhost:5005/api/projects/${editProject._id}`, {\n//           method: \"PUT\",\n//           headers: { \"Content-Type\": \"application/json\" },\n//           body: JSON.stringify(formData),\n//         });\n//         setProjects(projects.map((p) => (p._id === editProject._id ? { ...p, ...formData } : p)));\n//       } else {\n//         // Create new project\n//         const response = await fetch(\"http://localhost:5005/api/projects\", {\n//           method: \"POST\",\n//           headers: { \"Content-Type\": \"application/json\" },\n//           body: JSON.stringify({ ...formData, client_id: clientId }),\n//         });\n//         const newProject = await response.json();\n//         setProjects([...projects, newProject]);\n//       }\n//       setShowForm(false);\n//       setEditProject(null);\n//       form.resetFields();\n//       message.success(\"Project saved successfully\");\n//     } catch (error) {\n//       message.error(\"Error saving project\");\n//     }\n//   };\n\n//   const handleClientUpdate = async () => {\n//     try {\n//       const formData = await clientForm.validateFields();\n//       await fetch(`http://localhost:5005/api/client/${clientId}`, {\n//         method: \"PUT\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify(formData),\n//       });\n//       setClient(formData);\n//       setShowEditClientForm(false);\n//       message.success(\"Client details updated successfully\");\n//     } catch (error) {\n//       message.error(\"Error updating client details\");\n//     }\n//   };\n\n//   if (loading) return <Spin size=\"large\" style={{ display: \"block\", margin: \"auto\" }} />;\n//   if (error) return <Alert message={error} type=\"error\" showIcon />;\n//   if (!client) return <Typography>Loading...</Typography>;\n\n//   return (\n//     <div style={{ padding: \"24px\" }}>\n//       <Card>\n//         <Title level={3}>\n//           {client.client_name} <EditOutlined onClick={() => setShowEditClientForm(true)} style={{ cursor: \"pointer\", marginLeft: 10 }} />\n//         </Title>\n//         <Table\n//           dataSource={projects}\n//           rowKey=\"_id\"\n//           columns={[\n//             { title: \"Project Name\", dataIndex: \"project_name\" },\n//             { title: \"Description\", dataIndex: \"description\" },\n//             { title: \"Start Date\", dataIndex: \"start_date\", render: (date) => new Date(date).toLocaleDateString() },\n//             { title: \"End Date\", dataIndex: \"end_date\", render: (date) => new Date(date).toLocaleDateString() },\n//             { title: \"Budget\", dataIndex: \"budget\" },\n//             {\n//               title: \"Actions\",\n//               render: (_, record) => (\n//                 <Button icon={<EditOutlined />} onClick={() => { setEditProject(record); setShowForm(true); form.setFieldsValue(record); }} />\n//               ),\n//             },\n//           ]}\n//         />\n//         <Button type=\"primary\" icon={<PlusOutlined />} onClick={() => { setEditProject(null); setShowForm(true); }} style={{ marginTop: \"20px\" }}>\n//           Add New Project\n//         </Button>\n//       </Card>\n\n//       <Modal title=\"Edit Client Details\" open={showEditClientForm} onCancel={() => setShowEditClientForm(false)} onOk={handleClientUpdate}>\n//         <Form form={clientForm} layout=\"vertical\">\n//           <Form.Item name=\"client_name\" label=\"Client Name\" rules={[{ required: true, message: \"Please enter a client name\" }]}> <Input /> </Form.Item>\n//           <Form.Item name=\"client_email\" label=\"Client Email\" rules={[{ required: true, message: \"Please enter a valid email\" }]}> <Input type=\"email\" /> </Form.Item>\n//         </Form>\n//       </Modal>\n\n//       <Modal\n//         title={editProject ? \"Edit Project\" : \"Create a New Project\"}\n//         open={showForm}\n//         onCancel={() => setShowForm(false)}\n//         onOk={handleFormSubmit}\n//         okText={editProject ? \"Update Project\" : \"Create Project\"}\n//       >\n//         <Form form={form} layout=\"vertical\">\n//           <Form.Item name=\"project_name\" label=\"Project Name\" rules={[{ required: true, message: \"Please enter a project name\" }]}> <Input /> </Form.Item>\n//           <Form.Item name=\"description\" label=\"Description\"> <Input.TextArea /> </Form.Item>\n//           <Form.Item name=\"start_date\" label=\"Start Date\" rules={[{ required: true, message: \"Please select a start date\" }]}> <Input type=\"date\" /> </Form.Item>\n//           <Form.Item name=\"end_date\" label=\"End Date\" rules={[{ required: true, message: \"Please select an end date\" }]}> <Input type=\"date\" /> </Form.Item>\n//           <Form.Item name=\"budget\" label=\"Budget\"> <Input type=\"number\" /> </Form.Item>\n//         </Form>\n//       </Modal>\n//     </div>\n//   );\n// };\n\n// export default ClientProfile;\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { Button, Table, Modal, Input, Form, Typography, message, Spin, Card, Alert } from \"antd\";\nimport { EditOutlined, PlusOutlined } from \"@ant-design/icons\";\nimport \"antd/dist/reset.css\";\n\nconst { Title } = Typography;\n\nconst ClientProfile = () => {\n  const { clientId } = useParams();\n  const [client, setClient] = useState(null);\n  const [projects, setProjects] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [showForm, setShowForm] = useState(false);\n  const [editProject, setEditProject] = useState(null);\n  const [form] = Form.useForm();\n  const [clientForm] = Form.useForm();\n  \n  // Added state for showing/hiding the client edit form\n  const [showEditClientForm, setShowEditClientForm] = useState(false); \n\n  useEffect(() => {\n    const fetchClientDetails = async () => {\n      try {\n        const response = await axios.get(`http://localhost:5005/api/client/${clientId}`);\n        setClient(response.data);\n        clientForm.setFieldsValue(response.data);\n      } catch (err) {\n        setError(\"Failed to load client details.\");\n      }\n    };\n\n    const fetchClientProjects = async () => {\n      try {\n        const response = await axios.get(`http://localhost:5005/api/projects/${clientId}`);\n        setProjects(response.data);\n      } catch (err) {\n        setError(\"Failed to load projects.\");\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchClientDetails();\n    fetchClientProjects();\n  }, [clientId]);\n\n  const handleFormSubmit = async () => {\n    try {\n      const formData = await form.validateFields();\n      if (editProject) {\n        // Update project\n        await axios.put(`http://localhost:5005/api/projects/${editProject._id}`, formData);\n        setProjects(projects.map((p) => (p._id === editProject._id ? { ...p, ...formData } : p)));\n      } else {\n        // Create new project\n        const response = await axios.post(\"http://localhost:5005/api/projects\", {\n          ...formData,\n          client_id: clientId,\n        });\n        setProjects([...projects, response.data]);\n      }\n      setShowForm(false);\n      setEditProject(null);\n      form.resetFields();\n      message.success(\"Project saved successfully\");\n    } catch (error) {\n      message.error(\"Error saving project\");\n    }\n  };\n\n  const handleClientUpdate = async () => {\n    try {\n      const formData = await clientForm.validateFields();\n      await axios.put(`http://localhost:5005/api/client/${clientId}`, formData);\n      setClient(formData);\n      setShowEditClientForm(false);\n      message.success(\"Client details updated successfully\");\n    } catch (error) {\n      message.error(\"Error updating client details\");\n    }\n  };\n\n  if (loading) return <Spin size=\"large\" style={{ display: \"block\", margin: \"auto\" }} />;\n  if (error) return <Alert message={error} type=\"error\" showIcon />;\n  if (!client) return <Typography>Loading...</Typography>;\n\n  return (\n    <div style={{ padding: \"24px\" }}>\n      <Card>\n        <Title level={3}>\n          {client.client_name} <EditOutlined onClick={() => setShowEditClientForm(true)} style={{ cursor: \"pointer\", marginLeft: 10 }} />\n        </Title>\n        <Table\n          dataSource={projects}\n          rowKey=\"_id\"\n          columns={[\n            { title: \"Project Name\", dataIndex: \"project_name\" },\n            { title: \"Description\", dataIndex: \"description\" },\n            { title: \"Start Date\", dataIndex: \"start_date\", render: (date) => new Date(date).toLocaleDateString() },\n            { title: \"End Date\", dataIndex: \"end_date\", render: (date) => new Date(date).toLocaleDateString() },\n            { title: \"Budget\", dataIndex: \"budget\" },\n            {\n              title: \"Actions\",\n              render: (_, record) => (\n                <Button icon={<EditOutlined />} onClick={() => { setEditProject(record); setShowForm(true); form.setFieldsValue(record); }} />\n              ),\n            },\n          ]}\n        />\n        <Button type=\"primary\" icon={<PlusOutlined />} onClick={() => { setEditProject(null); setShowForm(true); }} style={{ marginTop: \"20px\" }}>\n          Add New Project\n        </Button>\n      </Card>\n\n      <Modal title=\"Edit Client Details\" open={showEditClientForm} onCancel={() => setShowEditClientForm(false)} onOk={handleClientUpdate}>\n        <Form form={clientForm} layout=\"vertical\">\n          <Form.Item name=\"client_name\" label=\"Client Name\" rules={[{ required: true, message: \"Please enter a client name\" }]}> <Input /> </Form.Item>\n          <Form.Item name=\"client_email\" label=\"Client Email\" rules={[{ required: true, message: \"Please enter a valid email\" }]}> <Input type=\"email\" /> </Form.Item>\n        </Form>\n      </Modal>\n\n      <Modal\n        title={editProject ? \"Edit Project\" : \"Create a New Project\"}\n        open={showForm}\n        onCancel={() => setShowForm(false)}\n        onOk={handleFormSubmit}\n        okText={editProject ? \"Update Project\" : \"Create Project\"}\n      >\n        <Form form={form} layout=\"vertical\">\n          <Form.Item name=\"project_name\" label=\"Project Name\" rules={[{ required: true, message: \"Please enter a project name\" }]}> <Input /> </Form.Item>\n          <Form.Item name=\"description\" label=\"Description\"> <Input.TextArea /> </Form.Item>\n          <Form.Item name=\"start_date\" label=\"Start Date\" rules={[{ required: true, message: \"Please select a start date\" }]}> <Input type=\"date\" /> </Form.Item>\n          <Form.Item name=\"end_date\" label=\"End Date\" rules={[{ required: true, message: \"Please select an end date\" }]}> <Input type=\"date\" /> </Form.Item>\n          <Form.Item name=\"budget\" label=\"Budget\"> <Input type=\"number\" /> </Form.Item>\n        </Form>\n      </Modal>\n    </div>\n  );\n};\n\nexport default ClientProfile;\n"],"mappingslD,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,MAAM,EAAEC,KAAK,EAAEC,KAAK,EAAEC,KAAK,EAAEC,IAAI,EAAEC,UAAU,EAAEC,OAAO,EAAEC,IAAI,EAAEC,IAAI,EAAEC,KAAK,QAAQ,MAAM;AAChG,SAASC,YAAY,EAAEC,YAAY,QAAQ,mBAAmB;AAC9D,OAAO,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7B,MAAM;EAAEC;AAAM,CAAC,GAAGT,UAAU;AAE5B,MAAMU,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM;IAAEC;EAAS,CAAC,GAAGnB,SAAS,CAAC,CAAC;EAChC,MAAM,CAACoB,MAAM,EAAEC,SAAS,CAAC,GAAGvB,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAACwB,QAAQ,EAAEC,WAAW,CAAC,GAAGzB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAAC0B,OAAO,EAAEC,UAAU,CAAC,GAAG3B,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAAC4B,KAAK,EAAEC,QAAQ,CAAC,GAAG7B,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAAC8B,QAAQ,EAAEC,WAAW,CAAC,GAAG/B,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACgC,WAAW,EAAEC,cAAc,CAAC,GAAGjC,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACkC,IAAI,CAAC,GAAG1B,IAAI,CAAC2B,OAAO,CAAC,CAAC;EAC7B,MAAM,CAACC,UAAU,CAAC,GAAG5B,IAAI,CAAC2B,OAAO,CAAC,CAAC;;EAEnC;EACA,MAAM,CAACE,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGtC,QAAQ,CAAC,KAAK,CAAC;EAEnEC,SAAS,CAAC,MAAM;IACd,MAAMsC,kBAAkB,GAAG,MAAAA,CAAA,KAAY;MACrC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMrC,KAAK,CAACsC,GAAG,CAAC,oCAAoCpB,QAAQ,EAAE,CAAC;QAChFE,SAAS,CAACiB,QAAQ,CAACE,IAAI,CAAC;QACxBN,UAAU,CAACO,cAAc,CAACH,QAAQ,CAACE,IAAI,CAAC;MAC1C,CAAC,CAAC,OAAOE,GAAG,EAAE;QACZf,QAAQ,CAAC,gCAAgC,CAAC;MAC5C;IACF,CAAC;IAED,MAAMgB,mBAAmB,GAAG,MAAAA,CAAA,KAAY;MACtC,IAAI;QACF,MAAML,QAAQ,GAAG,MAAMrC,KAAK,CAACsC,GAAG,CAAC,sCAAsCpB,QAAQ,EAAE,CAAC;QAClFI,WAAW,CAACe,QAAQ,CAACE,IAAI,CAAC;MAC5B,CAAC,CAAC,OAAOE,GAAG,EAAE;QACZf,QAAQ,CAAC,0BAA0B,CAAC;MACtC,CAAC,SAAS;QACRF,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDY,kBAAkB,CAAC,CAAC;IACpBM,mBAAmB,CAAC,CAAC;EACvB,CAAC,EAAE,CAACxB,QAAQ,CAAC,CAAC;EAEd,MAAMyB,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACnC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMb,IAAI,CAACc,cAAc,CAAC,CAAC;MAC5C,IAAIhB,WAAW,EAAE;QACf;QACA,MAAM7B,KAAK,CAAC8C,GAAG,CAAC,sCAAsCjB,WAAW,CAACkB,GAAG,EAAE,EAAEH,QAAQ,CAAC;QAClFtB,WAAW,CAACD,QAAQ,CAAC2B,GAAG,CAAEC,CAAC,IAAMA,CAAC,CAACF,GAAG,KAAKlB,WAAW,CAACkB,GAAG,GAAG;UAAE,GAAGE,CAAC;UAAE,GAAGL;QAAS,CAAC,GAAGK,CAAE,CAAC,CAAC;MAC3F,CAAC,MAAM;QACL;QACA,MAAMZ,QAAQ,GAAG,MAAMrC,KAAK,CAACkD,IAAI,CAAC,oCAAoC,EAAE;UACtE,GAAGN,QAAQ;UACXO,SAAS,EAAEjC;QACb,CAAC,CAAC;QACFI,WAAW,CAAC,CAAC,GAAGD,QAAQ,EAAEgB,QAAQ,CAACE,IAAI,CAAC,CAAC;MAC3C;MACAX,WAAW,CAAC,KAAK,CAAC;MAClBE,cAAc,CAAC,IAAI,CAAC;MACpBC,IAAI,CAACqB,WAAW,CAAC,CAAC;MAClB7C,OAAO,CAAC8C,OAAO,CAAC,4BAA4B,CAAC;IAC/C,CAAC,CAAC,OAAO5B,KAAK,EAAE;MACdlB,OAAO,CAACkB,KAAK,CAAC,sBAAsB,CAAC;IACvC;EACF,CAAC;EAED,MAAM6B,kBAAkB,GAAG,MAAAA,CAAA,KAAY;IACrC,IAAI;MACF,MAAMV,QAAQ,GAAG,MAAMX,UAAU,CAACY,cAAc,CAAC,CAAC;MAClD,MAAM7C,KAAK,CAAC8C,GAAG,CAAC,oCAAoC5B,QAAQ,EAAE,EAAE0B,QAAQ,CAAC;MACzExB,SAAS,CAACwB,QAAQ,CAAC;MACnBT,qBAAqB,CAAC,KAAK,CAAC;MAC5B5B,OAAO,CAAC8C,OAAO,CAAC,qCAAqC,CAAC;IACxD,CAAC,CAAC,OAAO5B,KAAK,EAAE;MACdlB,OAAO,CAACkB,KAAK,CAAC,+BAA+B,CAAC;IAChD;EACF,CAAC;EAED,IAAIF,OAAO,EAAE,oBAAOT,OAAA,CAACN,IAAI;IAAC+C,IAAI,EAAC,OAAO;IAACC,KAAK,EAAE;MAAEC,OAAO,EAAE,OAAO;MAAEC,MAAM,EAAE;IAAO;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;EACtF,IAAIrC,KAAK,EAAE,oBAAOX,OAAA,CAACJ,KAAK;IAACH,OAAO,EAAEkB,KAAM;IAACsC,IAAI,EAAC,OAAO;IAACC,QAAQ;EAAA;IAAAL,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;EACjE,IAAI,CAAC3C,MAAM,EAAE,oBAAOL,OAAA,CAACR,UAAU;IAAA2D,QAAA,EAAC;EAAU;IAAAN,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAY,CAAC;EAEvD,oBACEhD,OAAA;IAAK0C,KAAK,EAAE;MAAEU,OAAO,EAAE;IAAO,CAAE;IAAAD,QAAA,gBAC9BnD,OAAA,CAACL,IAAI;MAAAwD,QAAA,gBACHnD,OAAA,CAACC,KAAK;QAACoD,KAAK,EAAE,CAAE;QAAAF,QAAA,GACb9C,MAAM,CAACiD,WAAW,EAAC,GAAC,eAAAtD,OAAA,CAACH,YAAY;UAAC0D,OAAO,EAAEA,CAAA,KAAMlC,qBAAqB,CAAC,IAAI,CAAE;UAACqB,KAAK,EAAE;YAAEc,MAAM,EAAE,SAAS;YAAEC,UAAU,EAAE;UAAG;QAAE;UAAAZ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC1H,CAAC,eACRhD,OAAA,CAACZ,KAAK;QACJsE,UAAU,EAAEnD,QAAS;QACrBoD,MAAM,EAAC,KAAK;QACZC,OAAO,EAAE,CACP;UAAEC,KAAK,EAAE,cAAc;UAAEC,SAAS,EAAE;QAAe,CAAC,EACpD;UAAED,KAAK,EAAE,aAAa;UAAEC,SAAS,EAAE;QAAc,CAAC,EAClD;UAAED,KAAK,EAAE,YAAY;UAAEC,SAAS,EAAE,YAAY;UAAEC,MAAM,EAAGC,IAAI,IAAK,IAAIC,IAAI,CAACD,IAAI,CAAC,CAACE,kBAAkB,CAAC;QAAE,CAAC,EACvG;UAAEL,KAAK,EAAE,UAAU;UAAEC,SAAS,EAAE,UAAU;UAAEC,MAAM,EAAGC,IAAI,IAAK,IAAIC,IAAI,CAACD,IAAI,CAAC,CAACE,kBAAkB,CAAC;QAAE,CAAC,EACnG;UAAEL,KAAK,EAAE,QAAQ;UAAEC,SAAS,EAAE;QAAS,CAAC,EACxC;UACED,KAAK,EAAE,SAAS;UAChBE,MAAM,EAAEA,CAACI,CAAC,EAAEC,MAAM,kBAChBpE,OAAA,CAACb,MAAM;YAACkF,IAAI,eAAErE,OAAA,CAACH,YAAY;cAAAgD,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAE;YAACO,OAAO,EAAEA,CAAA,KAAM;cAAEvC,cAAc,CAACoD,MAAM,CAAC;cAAEtD,WAAW,CAAC,IAAI,CAAC;cAAEG,IAAI,CAACS,cAAc,CAAC0C,MAAM,CAAC;YAAE;UAAE;YAAAvB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAEjI,CAAC;MACD;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,eACFhD,OAAA,CAACb,MAAM;QAAC8D,IAAI,EAAC,SAAS;QAACoB,IAAI,eAAErE,OAAA,CAACF,YAAY;UAAA+C,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAE;QAACO,OAAO,EAAEA,CAAA,KAAM;UAAEvC,cAAc,CAAC,IAAI,CAAC;UAAEF,WAAW,CAAC,IAAI,CAAC;QAAE,CAAE;QAAC4B,KAAK,EAAE;UAAE4B,SAAS,EAAE;QAAO,CAAE;QAAAnB,QAAA,EAAC;MAE1I;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC,eAEPhD,OAAA,CAACX,KAAK;MAACwE,KAAK,EAAC,qBAAqB;MAACU,IAAI,EAAEnD,kBAAmB;MAACoD,QAAQ,EAAEA,CAAA,KAAMnD,qBAAqB,CAAC,KAAK,CAAE;MAACoD,IAAI,EAAEjC,kBAAmB;MAAAW,QAAA,eAClInD,OAAA,CAACT,IAAI;QAAC0B,IAAI,EAAEE,UAAW;QAACuD,MAAM,EAAC,UAAU;QAAAvB,QAAA,gBACvCnD,OAAA,CAACT,IAAI,CAACoF,IAAI;UAACC,IAAI,EAAC,aAAa;UAACC,KAAK,EAAC,aAAa;UAACC,KAAK,EAAE,CAAC;YAAEC,QAAQ,EAAE,IAAI;YAAEtF,OAAO,EAAE;UAA6B,CAAC,CAAE;UAAA0D,QAAA,GAAC,GAAC,eAAAnD,OAAA,CAACV,KAAK;YAAAuD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,KAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAW,CAAC,eAC7IhD,OAAA,CAACT,IAAI,CAACoF,IAAI;UAACC,IAAI,EAAC,cAAc;UAACC,KAAK,EAAC,cAAc;UAACC,KAAK,EAAE,CAAC;YAAEC,QAAQ,EAAE,IAAI;YAAEtF,OAAO,EAAE;UAA6B,CAAC,CAAE;UAAA0D,QAAA,GAAC,GAAC,eAAAnD,OAAA,CAACV,KAAK;YAAC2D,IAAI,EAAC;UAAO;YAAAJ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,KAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAW,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxJ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC,eAERhD,OAAA,CAACX,KAAK;MACJwE,KAAK,EAAE9C,WAAW,GAAG,cAAc,GAAG,sBAAuB;MAC7DwD,IAAI,EAAE1D,QAAS;MACf2D,QAAQ,EAAEA,CAAA,KAAM1D,WAAW,CAAC,KAAK,CAAE;MACnC2D,IAAI,EAAE5C,gBAAiB;MACvBmD,MAAM,EAAEjE,WAAW,GAAG,gBAAgB,GAAG,gBAAiB;MAAAoC,QAAA,eAE1DnD,OAAA,CAACT,IAAI;QAAC0B,IAAI,EAAEA,IAAK;QAACyD,MAAM,EAAC,UAAU;QAAAvB,QAAA,gBACjCnD,OAAA,CAACT,IAAI,CAACoF,IAAI;UAACC,IAAI,EAAC,cAAc;UAACC,KAAK,EAAC,cAAc;UAACC,KAAK,EAAE,CAAC;YAAEC,QAAQ,EAAE,IAAI;YAAEtF,OAAO,EAAE;UAA8B,CAAC,CAAE;UAAA0D,QAAA,GAAC,GAAC,eAAAnD,OAAA,CAACV,KAAK;YAAAuD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,KAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAW,CAAC,eAChJhD,OAAA,CAACT,IAAI,CAACoF,IAAI;UAACC,IAAI,EAAC,aAAa;UAACC,KAAK,EAAC,aAAa;UAAA1B,QAAA,GAAC,GAAC,eAAAnD,OAAA,CAACV,KAAK,CAAC2F,QAAQ;YAAApC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,KAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAW,CAAC,eAClFhD,OAAA,CAACT,IAAI,CAACoF,IAAI;UAACC,IAAI,EAAC,YAAY;UAACC,KAAK,EAAC,YAAY;UAACC,KAAK,EAAE,CAAC;YAAEC,QAAQ,EAAE,IAAI;YAAEtF,OAAO,EAAE;UAA6B,CAAC,CAAE;UAAA0D,QAAA,GAAC,GAAC,eAAAnD,OAAA,CAACV,KAAK;YAAC2D,IAAI,EAAC;UAAM;YAAAJ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,KAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAW,CAAC,eACvJhD,OAAA,CAACT,IAAI,CAACoF,IAAI;UAACC,IAAI,EAAC,UAAU;UAACC,KAAK,EAAC,UAAU;UAACC,KAAK,EAAE,CAAC;YAAEC,QAAQ,EAAE,IAAI;YAAEtF,OAAO,EAAE;UAA4B,CAAC,CAAE;UAAA0D,QAAA,GAAC,GAAC,eAAAnD,OAAA,CAACV,KAAK;YAAC2D,IAAI,EAAC;UAAM;YAAAJ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,KAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAW,CAAC,eAClJhD,OAAA,CAACT,IAAI,CAACoF,IAAI;UAACC,IAAI,EAAC,QAAQ;UAACC,KAAK,EAAC,QAAQ;UAAA1B,QAAA,GAAC,GAAC,eAAAnD,OAAA,CAACV,KAAK;YAAC2D,IAAI,EAAC;UAAQ;YAAAJ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,KAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAW,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEV,CAAC;AAAC7C,EAAA,CApIID,aAAa;EAAA,QACIjB,SAAS,EAOfM,IAAI,CAAC2B,OAAO,EACN3B,IAAI,CAAC2B,OAAO;AAAA;AAAAgE,EAAA,GAT7BhF,aAAa;AAsInB,eAAeA,aAAa;AAAC,IAAAgF,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}