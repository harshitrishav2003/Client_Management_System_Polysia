{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import './Dashboard.css';\n// import PendingUsers from \"../components/PendingUser\";\n// import { Link } from 'react-router-dom';\n\n// const Dashboard = () => {\n//   const [clients, setClients] = useState([]);\n//   const [search, setSearch] = useState('');\n//   const [filters, setFilters] = useState({\n//     region: '',\n//     industry: '',\n//     status: '',\n//   });\n//   const [sortOrder, setSortOrder] = useState('asc');\n//   const [sortColumn, setSortColumn] = useState('client_name');\n//   const [authToken, setAuthToken] = useState(localStorage.getItem('token') || '');\n//   const [editingClient, setEditingClient] = useState(null); // Client being edited\n//   const [error, setError] = useState('');\n\n//   useEffect(() => {\n//     fetchClients();\n//   }, [filters, sortColumn, sortOrder]);\n\n//   const fetchClients = () => {\n//     const query = new URLSearchParams({\n//       search,\n//       region: filters.region,\n//       industry: filters.industry,\n//       status: filters.status,\n//       sortColumn,\n//       sortOrder,\n//     });\n\n//     axios\n//       .get(`http://localhost:5005/api/users?${query.toString()}`, {\n//         headers: {\n//           Authorization: `Bearer ${authToken}`,\n//         },\n//       })\n//       .then((response) => {\n//         setClients(response.data);\n//       })\n//       .catch((err) => {\n//         console.error('Error fetching clients:', err);\n//       });\n//   };\n\n//   const handleSearch = (e) => {\n//     setSearch(e.target.value);\n//   };\n\n//   const handleFilterChange = (e) => {\n//     const { name, value } = e.target;\n//     setFilters({ ...filters, [name]: value });\n//   };\n\n//   const handleSort = (column) => {\n//     const newSortOrder = sortOrder === 'asc' ? 'desc' : 'asc';\n//     setSortOrder(newSortOrder);\n//     setSortColumn(column);\n//   };\n\n//   const handleEditClick = (client) => {\n//     setEditingClient(client); // Set the client for editing\n//   };\n\n//   const handleEditChange = (e) => {\n//     const { name, value } = e.target;\n//     setEditingClient({ ...editingClient, [name]: value });\n//   };\n\n//   const handleAddressChange = (e) => {\n//     const { name, value } = e.target;\n//     setEditingClient({\n//       ...editingClient,\n//       address: {\n//         ...editingClient.address,\n//         [name]: value,\n//       },\n//     });\n//   };\n\n//   const handleEditSubmit = async () => {\n//     try {\n//       await axios.put(\n//         `http://localhost:5005/api/users/${editingClient._id}`,\n//         editingClient,\n//         {\n//           headers: {\n//             Authorization: `Bearer ${authToken}`,\n//           },\n//         }\n//       );\n//       // Update client list with the new details\n//       setClients(\n//         clients.map((client) =>\n//           client._id === editingClient._id ? editingClient : client\n//         )\n//       );\n//       setEditingClient(null); // Close the editing form\n//     } catch (err) {\n//       console.error('Error updating client:', err);\n//       setError('Failed to update client. Please try again.');\n//     }\n//   };\n\n//   const handleDelete = (clientId) => {\n//     axios\n//       .delete(`http://localhost:5005/api/users/${clientId}`, {\n//         headers: {\n//           Authorization: `Bearer ${authToken}`,\n//         },\n//       })\n//       .then(() => {\n//         setClients(clients.filter((client) => client._id !== clientId));\n//         alert('Client deleted successfully');\n//       })\n//       .catch((err) => {\n//         console.error('Error deleting client:', err);\n//       });\n//   };\n\n//   return (\n//     <div className=\"dashboard\">\n//       {/* <h1 className='Dash'>Client Dashboard</h1> */}\n//       <PendingUsers />\n//       <h1 className='Dash'>Clients</h1>\n//       <input\n//         type=\"text\"\n//         placeholder=\"Search clients...\"\n//         value={search}\n//         onChange={handleSearch}\n//       />\n\n//       {/* Filter Options */}\n//       <select name=\"region\" onChange={handleFilterChange} value={filters.region}>\n//         <option value=\"\">All Regions</option>\n//         <option value=\"North America\">North America</option>\n//         <option value=\"Europe\">Europe</option>\n//         <option value=\"Asia\">Asia</option>\n//       </select>\n//       <select\n//         name=\"industry\"\n//         onChange={handleFilterChange}\n//         value={filters.industry}\n//       >\n//         <option value=\"\">All Industries</option>\n//         <option value=\"Finance\">Finance</option>\n//         <option value=\"Technology\">Technology</option>\n//         <option value=\"Healthcare\">Healthcare</option>\n//       </select>\n//       <select\n//         name=\"status\"\n//         onChange={handleFilterChange}\n//         value={filters.status}\n//       >\n//         <option value=\"\">All Statuses</option>\n//         <option value=\"Active\">Active</option>\n//         <option value=\"Inactive\">Inactive</option>\n//       </select>\n\n//       <table>\n//         <thead>\n//           <tr>\n//             <th onClick={() => handleSort('client_name')}>Client Name</th>\n//             <th onClick={() => handleSort('status')}>Status</th>\n//             <th onClick={() => handleSort('industry')}>Industry</th>\n\n//             <th>Email</th>\n//             <th>Phone</th>\n//             <th>Contact Person</th>\n//             <th>Action</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {clients.map((client) => (\n//             <tr key={client._id}>\n//                 <td>\n//                   <Link to={`/client/${client._id}`}>{client.client_name}</Link>\n//                 </td>\n\n//             <td>{client.status}</td>\n//               <td>{client.industry}</td>\n//               <td>{client.email}</td>\n//               <td>{client.phone}</td>\n//               <td>{client.contact_person}</td>\n//               <td>\n//                 <button onClick={() => handleEditClick(client)}>Edit</button>\n//                 <button onClick={() => handleDelete(client._id)}>Delete</button>\n//               </td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n\n//       {editingClient && (\n//         <div className=\"edit-modal\">\n//           <h3>Edit Client</h3>\n//           <input\n//             type=\"text\"\n//             name=\"client_name\"\n//             value={editingClient.client_name}\n//             onChange={handleEditChange}\n//             required\n//           />\n//           <input\n//             type=\"text\"\n//             name=\"contact_person\"\n//             value={editingClient.contact_person}\n//             onChange={handleEditChange}\n//             required\n//           />\n//           <input\n//             type=\"text\"\n//             name=\"email\"\n//             value={editingClient.email}\n//             onChange={handleEditChange}\n//             required\n//           />\n//           <input\n//             type=\"text\"\n//             name=\"phone\"\n//             value={editingClient.phone}\n//             onChange={handleEditChange}\n//             required\n//           />\n//           <input\n//             type=\"text\"\n//             name=\"industry\"\n//             value={editingClient.industry}\n//             onChange={handleEditChange}\n//             required\n//           />\n//           <h3>Address</h3>\n//           <input\n//             type=\"text\"\n//             name=\"street\"\n//             value={editingClient.address?.street}\n//             onChange={handleAddressChange}\n//           />\n//           <input\n//             type=\"text\"\n//             name=\"city\"\n//             value={editingClient.address?.city}\n//             onChange={handleAddressChange}\n//           />\n//           <input\n//             type=\"text\"\n//             name=\"state\"\n//             value={editingClient.address?.state}\n//             onChange={handleAddressChange}\n//           />\n//           <input\n//             type=\"text\"\n//             name=\"postal_code\"\n//             value={editingClient.address?.postal_code}\n//             onChange={handleAddressChange}\n//           />\n//           <input\n//             type=\"text\"\n//             name=\"country\"\n//             value={editingClient.address?.country}\n//             onChange={handleAddressChange}\n//           />\n//           <button onClick={handleEditSubmit}>Save</button>\n//           <button onClick={() => setEditingClient(null)}>Cancel</button>\n//           {error && <p>{error}</p>}\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default Dashboard;\nconst [editingClient, setEditingClient] = useState(null); // Client being edited","map":{"version":3,"names":["editingClient","setEditingClient","useState"],"sources":["/Users/harshitrishav/Demo/jwt-auth-frontend/src/components/Dashboard.js"],"sourcesContent":["\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import './Dashboard.css';\n// import PendingUsers from \"../components/PendingUser\";\n// import { Link } from 'react-router-dom';\n\n// const Dashboard = () => {\n//   const [clients, setClients] = useState([]);\n//   const [search, setSearch] = useState('');\n//   const [filters, setFilters] = useState({\n//     region: '',\n//     industry: '',\n//     status: '',\n//   });\n//   const [sortOrder, setSortOrder] = useState('asc');\n//   const [sortColumn, setSortColumn] = useState('client_name');\n//   const [authToken, setAuthToken] = useState(localStorage.getItem('token') || '');\n//   const [editingClient, setEditingClient] = useState(null); // Client being edited\n//   const [error, setError] = useState('');\n\n//   useEffect(() => {\n//     fetchClients();\n//   }, [filters, sortColumn, sortOrder]);\n\n//   const fetchClients = () => {\n//     const query = new URLSearchParams({\n//       search,\n//       region: filters.region,\n//       industry: filters.industry,\n//       status: filters.status,\n//       sortColumn,\n//       sortOrder,\n//     });\n\n//     axios\n//       .get(`http://localhost:5005/api/users?${query.toString()}`, {\n//         headers: {\n//           Authorization: `Bearer ${authToken}`,\n//         },\n//       })\n//       .then((response) => {\n//         setClients(response.data);\n//       })\n//       .catch((err) => {\n//         console.error('Error fetching clients:', err);\n//       });\n//   };\n\n//   const handleSearch = (e) => {\n//     setSearch(e.target.value);\n//   };\n\n//   const handleFilterChange = (e) => {\n//     const { name, value } = e.target;\n//     setFilters({ ...filters, [name]: value });\n//   };\n\n//   const handleSort = (column) => {\n//     const newSortOrder = sortOrder === 'asc' ? 'desc' : 'asc';\n//     setSortOrder(newSortOrder);\n//     setSortColumn(column);\n//   };\n\n//   const handleEditClick = (client) => {\n//     setEditingClient(client); // Set the client for editing\n//   };\n\n//   const handleEditChange = (e) => {\n//     const { name, value } = e.target;\n//     setEditingClient({ ...editingClient, [name]: value });\n//   };\n\n//   const handleAddressChange = (e) => {\n//     const { name, value } = e.target;\n//     setEditingClient({\n//       ...editingClient,\n//       address: {\n//         ...editingClient.address,\n//         [name]: value,\n//       },\n//     });\n//   };\n\n//   const handleEditSubmit = async () => {\n//     try {\n//       await axios.put(\n//         `http://localhost:5005/api/users/${editingClient._id}`,\n//         editingClient,\n//         {\n//           headers: {\n//             Authorization: `Bearer ${authToken}`,\n//           },\n//         }\n//       );\n//       // Update client list with the new details\n//       setClients(\n//         clients.map((client) =>\n//           client._id === editingClient._id ? editingClient : client\n//         )\n//       );\n//       setEditingClient(null); // Close the editing form\n//     } catch (err) {\n//       console.error('Error updating client:', err);\n//       setError('Failed to update client. Please try again.');\n//     }\n//   };\n\n//   const handleDelete = (clientId) => {\n//     axios\n//       .delete(`http://localhost:5005/api/users/${clientId}`, {\n//         headers: {\n//           Authorization: `Bearer ${authToken}`,\n//         },\n//       })\n//       .then(() => {\n//         setClients(clients.filter((client) => client._id !== clientId));\n//         alert('Client deleted successfully');\n//       })\n//       .catch((err) => {\n//         console.error('Error deleting client:', err);\n//       });\n//   };\n\n//   return (\n//     <div className=\"dashboard\">\n//       {/* <h1 className='Dash'>Client Dashboard</h1> */}\n//       <PendingUsers />\n//       <h1 className='Dash'>Clients</h1>\n//       <input\n//         type=\"text\"\n//         placeholder=\"Search clients...\"\n//         value={search}\n//         onChange={handleSearch}\n//       />\n\n//       {/* Filter Options */}\n//       <select name=\"region\" onChange={handleFilterChange} value={filters.region}>\n//         <option value=\"\">All Regions</option>\n//         <option value=\"North America\">North America</option>\n//         <option value=\"Europe\">Europe</option>\n//         <option value=\"Asia\">Asia</option>\n//       </select>\n//       <select\n//         name=\"industry\"\n//         onChange={handleFilterChange}\n//         value={filters.industry}\n//       >\n//         <option value=\"\">All Industries</option>\n//         <option value=\"Finance\">Finance</option>\n//         <option value=\"Technology\">Technology</option>\n//         <option value=\"Healthcare\">Healthcare</option>\n//       </select>\n//       <select\n//         name=\"status\"\n//         onChange={handleFilterChange}\n//         value={filters.status}\n//       >\n//         <option value=\"\">All Statuses</option>\n//         <option value=\"Active\">Active</option>\n//         <option value=\"Inactive\">Inactive</option>\n//       </select>\n\n//       <table>\n//         <thead>\n//           <tr>\n//             <th onClick={() => handleSort('client_name')}>Client Name</th>\n//             <th onClick={() => handleSort('status')}>Status</th>\n//             <th onClick={() => handleSort('industry')}>Industry</th>\n            \n//             <th>Email</th>\n//             <th>Phone</th>\n//             <th>Contact Person</th>\n//             <th>Action</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {clients.map((client) => (\n//             <tr key={client._id}>\n//                 <td>\n//                   <Link to={`/client/${client._id}`}>{client.client_name}</Link>\n//                 </td>\n              \n              \n//             <td>{client.status}</td>\n//               <td>{client.industry}</td>\n//               <td>{client.email}</td>\n//               <td>{client.phone}</td>\n//               <td>{client.contact_person}</td>\n//               <td>\n//                 <button onClick={() => handleEditClick(client)}>Edit</button>\n//                 <button onClick={() => handleDelete(client._id)}>Delete</button>\n//               </td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n\n//       {editingClient && (\n//         <div className=\"edit-modal\">\n//           <h3>Edit Client</h3>\n//           <input\n//             type=\"text\"\n//             name=\"client_name\"\n//             value={editingClient.client_name}\n//             onChange={handleEditChange}\n//             required\n//           />\n//           <input\n//             type=\"text\"\n//             name=\"contact_person\"\n//             value={editingClient.contact_person}\n//             onChange={handleEditChange}\n//             required\n//           />\n//           <input\n//             type=\"text\"\n//             name=\"email\"\n//             value={editingClient.email}\n//             onChange={handleEditChange}\n//             required\n//           />\n//           <input\n//             type=\"text\"\n//             name=\"phone\"\n//             value={editingClient.phone}\n//             onChange={handleEditChange}\n//             required\n//           />\n//           <input\n//             type=\"text\"\n//             name=\"industry\"\n//             value={editingClient.industry}\n//             onChange={handleEditChange}\n//             required\n//           />\n//           <h3>Address</h3>\n//           <input\n//             type=\"text\"\n//             name=\"street\"\n//             value={editingClient.address?.street}\n//             onChange={handleAddressChange}\n//           />\n//           <input\n//             type=\"text\"\n//             name=\"city\"\n//             value={editingClient.address?.city}\n//             onChange={handleAddressChange}\n//           />\n//           <input\n//             type=\"text\"\n//             name=\"state\"\n//             value={editingClient.address?.state}\n//             onChange={handleAddressChange}\n//           />\n//           <input\n//             type=\"text\"\n//             name=\"postal_code\"\n//             value={editingClient.address?.postal_code}\n//             onChange={handleAddressChange}\n//           />\n//           <input\n//             type=\"text\"\n//             name=\"country\"\n//             value={editingClient.address?.country}\n//             onChange={handleAddressChange}\n//           />\n//           <button onClick={handleEditSubmit}>Save</button>\n//           <button onClick={() => setEditingClient(null)}>Cancel</button>\n//           {error && <p>{error}</p>}\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default Dashboard;\nconst [editingClient, setEditingClient] = useState(null); // Client being edited\n"],"mappingsaAAa,EAAEC,gBAAgB,CAAC,GAAGC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}