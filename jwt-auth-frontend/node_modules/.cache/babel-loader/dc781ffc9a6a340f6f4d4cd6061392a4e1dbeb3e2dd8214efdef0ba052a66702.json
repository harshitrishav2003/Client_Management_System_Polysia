{"ast":null,"code":"var _jsxFileName = \"/Users/harshitrishav/Demo/jwt-auth-frontend/src/components/ContractManagement.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import { useParams } from \"react-router-dom\";\n// import axios from \"axios\";\n// import \"../App.css\";\n\n// const ClientProfile = () => {\n//   const { clientId } = useParams(); // Get the clientId from the URL params\n//   const [client, setClient] = useState(null);\n//   const [projects, setProjects] = useState([]); // State to store projects\n//   const [error, setError] = useState(\"\");\n//   const [showForm, setShowForm] = useState(false); // Toggle form visibility\n//   const [formData, setFormData] = useState({\n//     project_name: \"\",\n//     description: \"\",\n//     start_date: \"\",\n//     end_date: \"\",\n//     budget: \"\",\n//     client_id: clientId,\n//   });\n\n//   useEffect(() => {\n//     const fetchClientDetails = async () => {\n//       try {\n//         const response = await axios.get(`http://localhost:5005/api/client/${clientId}`);\n//         setClient(response.data);\n//       } catch (err) {\n//         setError(\"Failed to load client details.\");\n//       }\n//     };\n\n//     const fetchClientProjects = async () => {\n//       try {\n//         const response = await axios.get(`http://localhost:5005/api/projects/${clientId}`);\n//         // Make sure team_members is always an array\n//         const updatedProjects = response.data.map((project) => ({\n//           ...project,\n//           team_members: Array.isArray(project.team_members) ? project.team_members : [],\n//         }));\n//         setProjects(updatedProjects);\n//       } catch (err) {\n//         setError(\"Failed to load projects.\");\n//       }\n//     };\n\n//     fetchClientDetails();\n//     fetchClientProjects();\n//   }, [clientId]);\n\n//   const handleFormChange = (e) => {\n//     const { name, value } = e.target;\n\n//     setFormData({\n//       ...formData,\n//       [name]: value,\n//     });\n//   };\n\n//   const handleFormSubmit = async (e) => {\n//     e.preventDefault();\n//     try {\n//       const response = await axios.post(\"http://localhost:5005/api/projects\", formData);\n//       setProjects([...projects, response.data]); // Add new project to the list\n//       setShowForm(false); // Hide form after submission\n//       console.log(response.data); // Handle the response data (e.g., display success message)\n//     } catch (error) {\n//       console.error(\"Error submitting form:\", error);\n//     }\n//   };\n\n//   if (error) {\n//     return <div>{error}</div>;\n//   }\n\n//   if (!client) {\n//     return <div>Loading...</div>;\n//   }\n\n//   return (\n//     <div>\n//       <h1 style={{ textAlign: \"center\" }}>Projects for {client.client_name}</h1>\n\n//       {/* Display Projects in Table Format */}\n//       <h2>Projects</h2>\n//       {projects.length === 0 ? (\n//         <p>No projects found for this client.</p>\n//       ) : (\n//         <table className=\"project-table\">\n//           <thead>\n//             <tr>\n//               <th>Project Name</th>\n//               <th>Description</th>\n//               <th>Start Date</th>\n//               <th>End Date</th>\n//               <th>Budget</th>\n//               <th>Team Members</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {projects.map((project) => (\n//               <tr key={project._id}>\n//                 <td>{project.project_name}</td>\n//                 <td>{project.description}</td>\n//                 <td>{new Date(project.start_date).toLocaleDateString()}</td>\n//                 <td>{new Date(project.end_date).toLocaleDateString()}</td>\n//                 <td>{project.budget}</td>\n//                 <td>{(project.team_members || []).join(\", \")}</td>\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       )}\n\n//       <div className=\"client-profile-card\">\n//         {/* Button to Show/Hide Form */}\n//         <button onClick={() => setShowForm(!showForm)}>\n//           {showForm ? \"Cancel\" : \"Add New Project\"}\n//         </button>\n\n//         {/* Project Creation Form */}\n//         {showForm && (\n//           <div className=\"project-form\">\n//           <h2>Create a New Project</h2>\n//           <form onSubmit={handleFormSubmit}>\n//             <div>\n//               <label>Project Name</label>\n//               <input\n//                 type=\"text\"\n//                 name=\"project_name\"\n//                 value={formData.project_name}\n//                 onChange={handleFormChange}\n//                 required\n//               />\n//             </div>\n//             <div>\n//               <label>Description</label>\n//               <textarea\n//                 name=\"description\"\n//                 value={formData.description}\n//                 onChange={handleFormChange}\n//                 className=\"description-input\"\n//               />\n//             </div>\n//             <div>\n//               <label>Start Date</label>\n//               <input\n//                 type=\"date\"\n//                 name=\"start_date\"\n//                 value={formData.start_date}\n//                 onChange={handleFormChange}\n//                 className=\"date-input\"\n//               />\n//             </div>\n//             <div>\n//               <label>End Date</label>\n//               <input\n//                 type=\"date\"\n//                 name=\"end_date\"\n//                 value={formData.end_date}\n//                 onChange={handleFormChange}\n//                 className=\"date-input\"\n//               />\n//             </div>\n//             <div>\n//               <label>Budget</label>\n//               <input\n//                 type=\"number\"\n//                 name=\"budget\"\n//                 value={formData.budget}\n//                 onChange={handleFormChange}\n//               />\n//             </div>\n//             <div>\n//               <button type=\"submit\">Create Project</button>\n//             </div>\n//           </form>\n//         </div>\n\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ClientProfile;\n// import React, { useState, useEffect } from \"react\";\n// import { useParams } from \"react-router-dom\";\n// import {\n//   Button,\n//   Card,\n//   TextField,\n//   Typography,\n//   Table,\n//   TableBody,\n//   TableCell,\n//   TableContainer,\n//   TableHead,\n//   TableRow,\n//   Paper,\n//   Modal,\n// } from \"@mui/material\";\n// import axios from \"axios\";\n\n// const ClientProfile = () => {\n//   const { clientId } = useParams();\n//   const [client, setClient] = useState(null);\n//   const [projects, setProjects] = useState([]);\n//   const [error, setError] = useState(\"\");\n//   const [showForm, setShowForm] = useState(false);\n//   const [formData, setFormData] = useState({\n//     project_name: \"\",\n//     description: \"\",\n//     start_date: \"\",\n//     end_date: \"\",\n//     budget: \"\",\n//     client_id: clientId,\n//   });\n\n//   useEffect(() => {\n//     const fetchClientDetails = async () => {\n//       try {\n//         const response = await axios.get(`http://localhost:5005/api/client/${clientId}`);\n//         setClient(response.data);\n//       } catch (err) {\n//         setError(\"Failed to load client details.\");\n//       }\n//     };\n\n//     const fetchClientProjects = async () => {\n//       try {\n//         const response = await axios.get(`http://localhost:5005/api/projects/${clientId}`);\n//         setProjects(response.data);\n//       } catch (err) {\n//         setError(\"Failed to load projects.\");\n//       }\n//     };\n\n//     fetchClientDetails();\n//     fetchClientProjects();\n//   }, [clientId]);\n\n//   const handleFormChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData({\n//       ...formData,\n//       [name]: value,\n//     });\n//   };\n\n//   const handleFormSubmit = async (e) => {\n//     e.preventDefault();\n//     try {\n//       const response = await axios.post(\"http://localhost:5005/api/projects\", formData);\n//       setProjects([...projects, response.data]);\n//       setShowForm(false);\n//     } catch (error) {\n//       console.error(\"Error submitting form:\", error);\n//     }\n//   };\n\n//   if (error) {\n//     return <Typography color=\"error\">{error}</Typography>;\n//   }\n\n//   if (!client) {\n//     return <Typography>Loading...</Typography>;\n//   }\n\n//   return (\n//     <div style={{ padding: \"24px\" }}>\n//       <Typography variant=\"h4\" align=\"center\" gutterBottom>\n//         Projects for {client.client_name}\n//       </Typography>\n//       <Card style={{ padding: \"20px\" }}>\n//         {/* <Typography variant=\"h5\">Projects</Typography> */}\n//         {projects.length === 0 ? (\n//           <Typography>No projects found for this client.</Typography>\n//         ) : (\n//           <TableContainer component={Paper}>\n//             <Table>\n//               <TableHead>\n//                 <TableRow>\n//                   <TableCell>Project Name</TableCell>\n//                   <TableCell>Description</TableCell>\n//                   <TableCell>Start Date</TableCell>\n//                   <TableCell>End Date</TableCell>\n//                   <TableCell>Budget</TableCell>\n//                 </TableRow>\n//               </TableHead>\n//               <TableBody>\n//                 {projects.map((project) => (\n//                   <TableRow key={project._id}>\n//                     <TableCell>{project.project_name}</TableCell>\n//                     <TableCell>{project.description}</TableCell>\n//                     <TableCell>{new Date(project.start_date).toLocaleDateString()}</TableCell>\n//                     <TableCell>{new Date(project.end_date).toLocaleDateString()}</TableCell>\n//                     <TableCell>{project.budget}</TableCell>\n//                   </TableRow>\n//                 ))}\n//               </TableBody>\n//             </Table>\n//           </TableContainer>\n//         )}\n//         <Button\n//           variant=\"contained\"\n//           color=\"primary\"\n//           onClick={() => setShowForm(!showForm)}\n//           style={{ marginTop: \"20px\" }}\n//         >\n//           {showForm ? \"Cancel\" : \"Add New Project\"}\n//         </Button>\n//         <Modal open={showForm} onClose={() => setShowForm(false)}>\n//           <Card style={{ padding: \"20px\", maxWidth: \"500px\", margin: \"auto\", marginTop: \"10%\" }}>\n//             <Typography variant=\"h6\" gutterBottom>\n//               Create a New Project\n//             </Typography>\n//             <form onSubmit={handleFormSubmit}>\n//               <TextField\n//                 fullWidth\n//                 label=\"Project Name\"\n//                 name=\"project_name\"\n//                 value={formData.project_name}\n//                 onChange={handleFormChange}\n//                 margin=\"normal\"\n//                 required\n//               />\n//               <TextField\n//                 fullWidth\n//                 label=\"Description\"\n//                 name=\"description\"\n//                 value={formData.description}\n//                 onChange={handleFormChange}\n//                 margin=\"normal\"\n//                 multiline\n//               />\n//               <TextField\n//                 fullWidth\n//                 label=\"Start Date\"\n//                 type=\"date\"\n//                 name=\"start_date\"\n//                 value={formData.start_date}\n//                 onChange={handleFormChange}\n//                 margin=\"normal\"\n//                 InputLabelProps={{ shrink: true }}\n//               />\n//               <TextField\n//                 fullWidth\n//                 label=\"End Date\"\n//                 type=\"date\"\n//                 name=\"end_date\"\n//                 value={formData.end_date}\n//                 onChange={handleFormChange}\n//                 margin=\"normal\"\n//                 InputLabelProps={{ shrink: true }}\n//               />\n//               <TextField\n//                 fullWidth\n//                 label=\"Budget\"\n//                 type=\"number\"\n//                 name=\"budget\"\n//                 value={formData.budget}\n//                 onChange={handleFormChange}\n//                 margin=\"normal\"\n//               />\n//               <Button variant=\"contained\" color=\"primary\" type=\"submit\" style={{ marginTop: \"20px\" }}>\n//                 Create Project\n//               </Button>\n//             </form>\n//           </Card>\n//         </Modal>\n//       </Card>\n//     </div>\n//   );\n// };\n\n// export default ClientProfile;\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { Button, Table, Modal, Input, Form, Typography, message, Spin, Card, Alert } from \"antd\";\nimport { EditOutlined, PlusOutlined } from \"@ant-design/icons\";\nimport \"antd/dist/reset.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Title\n} = Typography;\nconst ClientProfile = () => {\n  _s();\n  const {\n    clientId\n  } = useParams();\n  const [client, setClient] = useState(null);\n  const [projects, setProjects] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [showForm, setShowForm] = useState(false);\n  const [showEditClientForm, setShowEditClientForm] = useState(false);\n  const [editProject, setEditProject] = useState(null);\n  const [form] = Form.useForm();\n  const [clientForm] = Form.useForm();\n  useEffect(() => {\n    const fetchClientDetails = async () => {\n      try {\n        const response = await fetch(`http://localhost:5005/api/client/${clientId}`);\n        const data = await response.json();\n        setClient(data);\n        clientForm.setFieldsValue(data);\n      } catch (err) {\n        setError(\"Failed to load client details.\");\n      }\n    };\n    const fetchClientProjects = async () => {\n      try {\n        const response = await fetch(`http://localhost:5005/api/projects/${clientId}`);\n        const data = await response.json();\n        setProjects(data);\n      } catch (err) {\n        setError(\"Failed to load projects.\");\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchClientDetails();\n    fetchClientProjects();\n  }, [clientId]);\n  const handleFormSubmit = async () => {\n    try {\n      const formData = await form.validateFields();\n      if (editProject) {\n        // Update project\n        await fetch(`http://localhost:5005/api/projects/${editProject._id}`, {\n          method: \"PUT\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(formData)\n        });\n        setProjects(projects.map(p => p._id === editProject._id ? {\n          ...p,\n          ...formData\n        } : p));\n      } else {\n        // Create new project\n        const response = await fetch(\"http://localhost:5005/api/projects\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            ...formData,\n            client_id: clientId\n          })\n        });\n        const newProject = await response.json();\n        setProjects([...projects, newProject]);\n      }\n      setShowForm(false);\n      setEditProject(null);\n      form.resetFields();\n      message.success(\"Project saved successfully\");\n    } catch (error) {\n      message.error(\"Error saving project\");\n    }\n  };\n  const handleClientUpdate = async () => {\n    try {\n      const formData = await clientForm.validateFields();\n      await fetch(`http://localhost:5005/api/client/${clientId}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(formData)\n      });\n      setClient(formData);\n      setShowEditClientForm(false);\n      message.success(\"Client details updated successfully\");\n    } catch (error) {\n      message.error(\"Error updating client details\");\n    }\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(Spin, {\n    size: \"large\",\n    style: {\n      display: \"block\",\n      margin: \"auto\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 471,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(Alert, {\n    message: error,\n    type: \"error\",\n    showIcon: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 472,\n    columnNumber: 21\n  }, this);\n  if (!client) return /*#__PURE__*/_jsxDEV(Typography, {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 473,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: \"24px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Card, {\n      children: [/*#__PURE__*/_jsxDEV(Title, {\n        level: 3,\n        children: [client.client_name, \" \", /*#__PURE__*/_jsxDEV(EditOutlined, {\n          onClick: () => setShowEditClientForm(true),\n          style: {\n            cursor: \"pointer\",\n            marginLeft: 10\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 479,\n          columnNumber: 32\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 478,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Table, {\n        dataSource: projects,\n        rowKey: \"_id\",\n        columns: [{\n          title: \"Project Name\",\n          dataIndex: \"project_name\"\n        }, {\n          title: \"Description\",\n          dataIndex: \"description\"\n        }, {\n          title: \"Start Date\",\n          dataIndex: \"start_date\",\n          render: date => new Date(date).toLocaleDateString()\n        }, {\n          title: \"End Date\",\n          dataIndex: \"end_date\",\n          render: date => new Date(date).toLocaleDateString()\n        }, {\n          title: \"Budget\",\n          dataIndex: \"budget\"\n        }, {\n          title: \"Actions\",\n          render: (_, record) => /*#__PURE__*/_jsxDEV(Button, {\n            icon: /*#__PURE__*/_jsxDEV(EditOutlined, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 493,\n              columnNumber: 31\n            }, this),\n            onClick: () => {\n              setEditProject(record);\n              setShowForm(true);\n              form.setFieldsValue(record);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 493,\n            columnNumber: 17\n          }, this)\n        }]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 481,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        icon: /*#__PURE__*/_jsxDEV(PlusOutlined, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 498,\n          columnNumber: 38\n        }, this),\n        onClick: () => {\n          setEditProject(null);\n          setShowForm(true);\n        },\n        style: {\n          marginTop: \"20px\"\n        },\n        children: \"Add New Project\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 498,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 477,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      title: \"Edit Client Details\",\n      open: showEditClientForm,\n      onCancel: () => setShowEditClientForm(false),\n      onOk: handleClientUpdate,\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        form: clientForm,\n        layout: \"vertical\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n          name: \"client_name\",\n          label: \"Client Name\",\n          rules: [{\n            required: true,\n            message: \"Please enter a client name\"\n          }],\n          children: [\" \", /*#__PURE__*/_jsxDEV(Input, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 505,\n            columnNumber: 130\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 505,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          name: \"client_email\",\n          label: \"Client Email\",\n          rules: [{\n            required: true,\n            message: \"Please enter a valid email\"\n          }],\n          children: [\" \", /*#__PURE__*/_jsxDEV(Input, {\n            type: \"email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 506,\n            columnNumber: 132\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 506,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 504,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 503,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      title: editProject ? \"Edit Project\" : \"Create a New Project\",\n      open: showForm,\n      onCancel: () => setShowForm(false),\n      onOk: handleFormSubmit,\n      okText: editProject ? \"Update Project\" : \"Create Project\",\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        form: form,\n        layout: \"vertical\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n          name: \"project_name\",\n          label: \"Project Name\",\n          rules: [{\n            required: true,\n            message: \"Please enter a project name\"\n          }],\n          children: [\" \", /*#__PURE__*/_jsxDEV(Input, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 518,\n            columnNumber: 133\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 518,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          name: \"description\",\n          label: \"Description\",\n          children: [\" \", /*#__PURE__*/_jsxDEV(Input.TextArea, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 519,\n            columnNumber: 62\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 519,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          name: \"start_date\",\n          label: \"Start Date\",\n          rules: [{\n            required: true,\n            message: \"Please select a start date\"\n          }],\n          children: [\" \", /*#__PURE__*/_jsxDEV(Input, {\n            type: \"date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 520,\n            columnNumber: 128\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 520,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          name: \"end_date\",\n          label: \"End Date\",\n          rules: [{\n            required: true,\n            message: \"Please select an end date\"\n          }],\n          children: [\" \", /*#__PURE__*/_jsxDEV(Input, {\n            type: \"date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 521,\n            columnNumber: 123\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 521,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          name: \"budget\",\n          label: \"Budget\",\n          children: [\" \", /*#__PURE__*/_jsxDEV(Input, {\n            type: \"number\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 522,\n            columnNumber: 52\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 522,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 517,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 510,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 476,\n    columnNumber: 5\n  }, this);\n};\n_s(ClientProfile, \"35DUr1aHH79TbJFQe8N/FqPXUaU=\", false, function () {\n  return [useParams, Form.useForm, Form.useForm];\n});\n_c = ClientProfile;\nexport default ClientProfile;\nvar _c;\n$RefreshReg$(_c, \"ClientProfile\");","map":{"version":3,"names":["React","useEffect","useState","useParams","Button","Table","Modal","Input","Form","Typography","message","Spin","Card","Alert","EditOutlined","PlusOutlined","jsxDEV","_jsxDEV","Title","ClientProfile","_s","clientId","client","setClient","projects","setProjects","loading","setLoading","error","setError","showForm","setShowForm","showEditClientForm","setShowEditClientForm","editProject","setEditProject","form","useForm","clientForm","fetchClientDetails","response","fetch","data","json","setFieldsValue","err","fetchClientProjects","handleFormSubmit","formData","validateFields","_id","method","headers","body","JSON","stringify","map","p","client_id","newProject","resetFields","success","handleClientUpdate","size","style","display","margin","fileName","_jsxFileName","lineNumber","columnNumber","type","showIcon","children","padding","level","client_name","onClick","cursor","marginLeft","dataSource","rowKey","columns","title","dataIndex","render","date","Date","toLocaleDateString","_","record","icon","marginTop","open","onCancel","onOk","layout","Item","name","label","rules","required","okText","TextArea","_c","$RefreshReg$"],"sources":["/Users/harshitrishav/Demo/jwt-auth-frontend/src/components/ContractManagement.js"],"sourcesContent":["\n// import React, { useState, useEffect } from \"react\";\n// import { useParams } from \"react-router-dom\";\n// import axios from \"axios\";\n// import \"../App.css\";\n\n// const ClientProfile = () => {\n//   const { clientId } = useParams(); // Get the clientId from the URL params\n//   const [client, setClient] = useState(null);\n//   const [projects, setProjects] = useState([]); // State to store projects\n//   const [error, setError] = useState(\"\");\n//   const [showForm, setShowForm] = useState(false); // Toggle form visibility\n//   const [formData, setFormData] = useState({\n//     project_name: \"\",\n//     description: \"\",\n//     start_date: \"\",\n//     end_date: \"\",\n//     budget: \"\",\n//     client_id: clientId,\n//   });\n\n//   useEffect(() => {\n//     const fetchClientDetails = async () => {\n//       try {\n//         const response = await axios.get(`http://localhost:5005/api/client/${clientId}`);\n//         setClient(response.data);\n//       } catch (err) {\n//         setError(\"Failed to load client details.\");\n//       }\n//     };\n\n//     const fetchClientProjects = async () => {\n//       try {\n//         const response = await axios.get(`http://localhost:5005/api/projects/${clientId}`);\n//         // Make sure team_members is always an array\n//         const updatedProjects = response.data.map((project) => ({\n//           ...project,\n//           team_members: Array.isArray(project.team_members) ? project.team_members : [],\n//         }));\n//         setProjects(updatedProjects);\n//       } catch (err) {\n//         setError(\"Failed to load projects.\");\n//       }\n//     };\n\n//     fetchClientDetails();\n//     fetchClientProjects();\n//   }, [clientId]);\n\n//   const handleFormChange = (e) => {\n//     const { name, value } = e.target;\n\n//     setFormData({\n//       ...formData,\n//       [name]: value,\n//     });\n//   };\n\n//   const handleFormSubmit = async (e) => {\n//     e.preventDefault();\n//     try {\n//       const response = await axios.post(\"http://localhost:5005/api/projects\", formData);\n//       setProjects([...projects, response.data]); // Add new project to the list\n//       setShowForm(false); // Hide form after submission\n//       console.log(response.data); // Handle the response data (e.g., display success message)\n//     } catch (error) {\n//       console.error(\"Error submitting form:\", error);\n//     }\n//   };\n\n//   if (error) {\n//     return <div>{error}</div>;\n//   }\n\n//   if (!client) {\n//     return <div>Loading...</div>;\n//   }\n\n//   return (\n//     <div>\n//       <h1 style={{ textAlign: \"center\" }}>Projects for {client.client_name}</h1>\n\n//       {/* Display Projects in Table Format */}\n//       <h2>Projects</h2>\n//       {projects.length === 0 ? (\n//         <p>No projects found for this client.</p>\n//       ) : (\n//         <table className=\"project-table\">\n//           <thead>\n//             <tr>\n//               <th>Project Name</th>\n//               <th>Description</th>\n//               <th>Start Date</th>\n//               <th>End Date</th>\n//               <th>Budget</th>\n//               <th>Team Members</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {projects.map((project) => (\n//               <tr key={project._id}>\n//                 <td>{project.project_name}</td>\n//                 <td>{project.description}</td>\n//                 <td>{new Date(project.start_date).toLocaleDateString()}</td>\n//                 <td>{new Date(project.end_date).toLocaleDateString()}</td>\n//                 <td>{project.budget}</td>\n//                 <td>{(project.team_members || []).join(\", \")}</td>\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       )}\n\n//       <div className=\"client-profile-card\">\n//         {/* Button to Show/Hide Form */}\n//         <button onClick={() => setShowForm(!showForm)}>\n//           {showForm ? \"Cancel\" : \"Add New Project\"}\n//         </button>\n\n//         {/* Project Creation Form */}\n//         {showForm && (\n//           <div className=\"project-form\">\n//           <h2>Create a New Project</h2>\n//           <form onSubmit={handleFormSubmit}>\n//             <div>\n//               <label>Project Name</label>\n//               <input\n//                 type=\"text\"\n//                 name=\"project_name\"\n//                 value={formData.project_name}\n//                 onChange={handleFormChange}\n//                 required\n//               />\n//             </div>\n//             <div>\n//               <label>Description</label>\n//               <textarea\n//                 name=\"description\"\n//                 value={formData.description}\n//                 onChange={handleFormChange}\n//                 className=\"description-input\"\n//               />\n//             </div>\n//             <div>\n//               <label>Start Date</label>\n//               <input\n//                 type=\"date\"\n//                 name=\"start_date\"\n//                 value={formData.start_date}\n//                 onChange={handleFormChange}\n//                 className=\"date-input\"\n//               />\n//             </div>\n//             <div>\n//               <label>End Date</label>\n//               <input\n//                 type=\"date\"\n//                 name=\"end_date\"\n//                 value={formData.end_date}\n//                 onChange={handleFormChange}\n//                 className=\"date-input\"\n//               />\n//             </div>\n//             <div>\n//               <label>Budget</label>\n//               <input\n//                 type=\"number\"\n//                 name=\"budget\"\n//                 value={formData.budget}\n//                 onChange={handleFormChange}\n//               />\n//             </div>\n//             <div>\n//               <button type=\"submit\">Create Project</button>\n//             </div>\n//           </form>\n//         </div>\n        \n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ClientProfile;\n// import React, { useState, useEffect } from \"react\";\n// import { useParams } from \"react-router-dom\";\n// import {\n//   Button,\n//   Card,\n//   TextField,\n//   Typography,\n//   Table,\n//   TableBody,\n//   TableCell,\n//   TableContainer,\n//   TableHead,\n//   TableRow,\n//   Paper,\n//   Modal,\n// } from \"@mui/material\";\n// import axios from \"axios\";\n\n// const ClientProfile = () => {\n//   const { clientId } = useParams();\n//   const [client, setClient] = useState(null);\n//   const [projects, setProjects] = useState([]);\n//   const [error, setError] = useState(\"\");\n//   const [showForm, setShowForm] = useState(false);\n//   const [formData, setFormData] = useState({\n//     project_name: \"\",\n//     description: \"\",\n//     start_date: \"\",\n//     end_date: \"\",\n//     budget: \"\",\n//     client_id: clientId,\n//   });\n\n//   useEffect(() => {\n//     const fetchClientDetails = async () => {\n//       try {\n//         const response = await axios.get(`http://localhost:5005/api/client/${clientId}`);\n//         setClient(response.data);\n//       } catch (err) {\n//         setError(\"Failed to load client details.\");\n//       }\n//     };\n\n//     const fetchClientProjects = async () => {\n//       try {\n//         const response = await axios.get(`http://localhost:5005/api/projects/${clientId}`);\n//         setProjects(response.data);\n//       } catch (err) {\n//         setError(\"Failed to load projects.\");\n//       }\n//     };\n\n//     fetchClientDetails();\n//     fetchClientProjects();\n//   }, [clientId]);\n\n//   const handleFormChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData({\n//       ...formData,\n//       [name]: value,\n//     });\n//   };\n\n//   const handleFormSubmit = async (e) => {\n//     e.preventDefault();\n//     try {\n//       const response = await axios.post(\"http://localhost:5005/api/projects\", formData);\n//       setProjects([...projects, response.data]);\n//       setShowForm(false);\n//     } catch (error) {\n//       console.error(\"Error submitting form:\", error);\n//     }\n//   };\n\n//   if (error) {\n//     return <Typography color=\"error\">{error}</Typography>;\n//   }\n\n//   if (!client) {\n//     return <Typography>Loading...</Typography>;\n//   }\n\n//   return (\n//     <div style={{ padding: \"24px\" }}>\n//       <Typography variant=\"h4\" align=\"center\" gutterBottom>\n//         Projects for {client.client_name}\n//       </Typography>\n//       <Card style={{ padding: \"20px\" }}>\n//         {/* <Typography variant=\"h5\">Projects</Typography> */}\n//         {projects.length === 0 ? (\n//           <Typography>No projects found for this client.</Typography>\n//         ) : (\n//           <TableContainer component={Paper}>\n//             <Table>\n//               <TableHead>\n//                 <TableRow>\n//                   <TableCell>Project Name</TableCell>\n//                   <TableCell>Description</TableCell>\n//                   <TableCell>Start Date</TableCell>\n//                   <TableCell>End Date</TableCell>\n//                   <TableCell>Budget</TableCell>\n//                 </TableRow>\n//               </TableHead>\n//               <TableBody>\n//                 {projects.map((project) => (\n//                   <TableRow key={project._id}>\n//                     <TableCell>{project.project_name}</TableCell>\n//                     <TableCell>{project.description}</TableCell>\n//                     <TableCell>{new Date(project.start_date).toLocaleDateString()}</TableCell>\n//                     <TableCell>{new Date(project.end_date).toLocaleDateString()}</TableCell>\n//                     <TableCell>{project.budget}</TableCell>\n//                   </TableRow>\n//                 ))}\n//               </TableBody>\n//             </Table>\n//           </TableContainer>\n//         )}\n//         <Button\n//           variant=\"contained\"\n//           color=\"primary\"\n//           onClick={() => setShowForm(!showForm)}\n//           style={{ marginTop: \"20px\" }}\n//         >\n//           {showForm ? \"Cancel\" : \"Add New Project\"}\n//         </Button>\n//         <Modal open={showForm} onClose={() => setShowForm(false)}>\n//           <Card style={{ padding: \"20px\", maxWidth: \"500px\", margin: \"auto\", marginTop: \"10%\" }}>\n//             <Typography variant=\"h6\" gutterBottom>\n//               Create a New Project\n//             </Typography>\n//             <form onSubmit={handleFormSubmit}>\n//               <TextField\n//                 fullWidth\n//                 label=\"Project Name\"\n//                 name=\"project_name\"\n//                 value={formData.project_name}\n//                 onChange={handleFormChange}\n//                 margin=\"normal\"\n//                 required\n//               />\n//               <TextField\n//                 fullWidth\n//                 label=\"Description\"\n//                 name=\"description\"\n//                 value={formData.description}\n//                 onChange={handleFormChange}\n//                 margin=\"normal\"\n//                 multiline\n//               />\n//               <TextField\n//                 fullWidth\n//                 label=\"Start Date\"\n//                 type=\"date\"\n//                 name=\"start_date\"\n//                 value={formData.start_date}\n//                 onChange={handleFormChange}\n//                 margin=\"normal\"\n//                 InputLabelProps={{ shrink: true }}\n//               />\n//               <TextField\n//                 fullWidth\n//                 label=\"End Date\"\n//                 type=\"date\"\n//                 name=\"end_date\"\n//                 value={formData.end_date}\n//                 onChange={handleFormChange}\n//                 margin=\"normal\"\n//                 InputLabelProps={{ shrink: true }}\n//               />\n//               <TextField\n//                 fullWidth\n//                 label=\"Budget\"\n//                 type=\"number\"\n//                 name=\"budget\"\n//                 value={formData.budget}\n//                 onChange={handleFormChange}\n//                 margin=\"normal\"\n//               />\n//               <Button variant=\"contained\" color=\"primary\" type=\"submit\" style={{ marginTop: \"20px\" }}>\n//                 Create Project\n//               </Button>\n//             </form>\n//           </Card>\n//         </Modal>\n//       </Card>\n//     </div>\n//   );\n// };\n\n// export default ClientProfile;\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { Button, Table, Modal, Input, Form, Typography, message, Spin, Card, Alert } from \"antd\";\nimport { EditOutlined, PlusOutlined } from \"@ant-design/icons\";\nimport \"antd/dist/reset.css\";\n\nconst { Title } = Typography;\n\nconst ClientProfile = () => {\n  const { clientId } = useParams();\n  const [client, setClient] = useState(null);\n  const [projects, setProjects] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [showForm, setShowForm] = useState(false);\n  const [showEditClientForm, setShowEditClientForm] = useState(false);\n  const [editProject, setEditProject] = useState(null);\n  const [form] = Form.useForm();\n  const [clientForm] = Form.useForm();\n\n  useEffect(() => {\n    const fetchClientDetails = async () => {\n      try {\n        const response = await fetch(`http://localhost:5005/api/client/${clientId}`);\n        const data = await response.json();\n        setClient(data);\n        clientForm.setFieldsValue(data);\n      } catch (err) {\n        setError(\"Failed to load client details.\");\n      }\n    };\n\n    const fetchClientProjects = async () => {\n      try {\n        const response = await fetch(`http://localhost:5005/api/projects/${clientId}`);\n        const data = await response.json();\n        setProjects(data);\n      } catch (err) {\n        setError(\"Failed to load projects.\");\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchClientDetails();\n    fetchClientProjects();\n  }, [clientId]);\n\n  const handleFormSubmit = async () => {\n    try {\n      const formData = await form.validateFields();\n      if (editProject) {\n        // Update project\n        await fetch(`http://localhost:5005/api/projects/${editProject._id}`, {\n          method: \"PUT\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify(formData),\n        });\n        setProjects(projects.map((p) => (p._id === editProject._id ? { ...p, ...formData } : p)));\n      } else {\n        // Create new project\n        const response = await fetch(\"http://localhost:5005/api/projects\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({ ...formData, client_id: clientId }),\n        });\n        const newProject = await response.json();\n        setProjects([...projects, newProject]);\n      }\n      setShowForm(false);\n      setEditProject(null);\n      form.resetFields();\n      message.success(\"Project saved successfully\");\n    } catch (error) {\n      message.error(\"Error saving project\");\n    }\n  };\n\n  const handleClientUpdate = async () => {\n    try {\n      const formData = await clientForm.validateFields();\n      await fetch(`http://localhost:5005/api/client/${clientId}`, {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(formData),\n      });\n      setClient(formData);\n      setShowEditClientForm(false);\n      message.success(\"Client details updated successfully\");\n    } catch (error) {\n      message.error(\"Error updating client details\");\n    }\n  };\n\n  if (loading) return <Spin size=\"large\" style={{ display: \"block\", margin: \"auto\" }} />;\n  if (error) return <Alert message={error} type=\"error\" showIcon />;\n  if (!client) return <Typography>Loading...</Typography>;\n\n  return (\n    <div style={{ padding: \"24px\" }}>\n      <Card>\n        <Title level={3}>\n          {client.client_name} <EditOutlined onClick={() => setShowEditClientForm(true)} style={{ cursor: \"pointer\", marginLeft: 10 }} />\n        </Title>\n        <Table\n          dataSource={projects}\n          rowKey=\"_id\"\n          columns={[\n            { title: \"Project Name\", dataIndex: \"project_name\" },\n            { title: \"Description\", dataIndex: \"description\" },\n            { title: \"Start Date\", dataIndex: \"start_date\", render: (date) => new Date(date).toLocaleDateString() },\n            { title: \"End Date\", dataIndex: \"end_date\", render: (date) => new Date(date).toLocaleDateString() },\n            { title: \"Budget\", dataIndex: \"budget\" },\n            {\n              title: \"Actions\",\n              render: (_, record) => (\n                <Button icon={<EditOutlined />} onClick={() => { setEditProject(record); setShowForm(true); form.setFieldsValue(record); }} />\n              ),\n            },\n          ]}\n        />\n        <Button type=\"primary\" icon={<PlusOutlined />} onClick={() => { setEditProject(null); setShowForm(true); }} style={{ marginTop: \"20px\" }}>\n          Add New Project\n        </Button>\n      </Card>\n\n      <Modal title=\"Edit Client Details\" open={showEditClientForm} onCancel={() => setShowEditClientForm(false)} onOk={handleClientUpdate}>\n        <Form form={clientForm} layout=\"vertical\">\n          <Form.Item name=\"client_name\" label=\"Client Name\" rules={[{ required: true, message: \"Please enter a client name\" }]}> <Input /> </Form.Item>\n          <Form.Item name=\"client_email\" label=\"Client Email\" rules={[{ required: true, message: \"Please enter a valid email\" }]}> <Input type=\"email\" /> </Form.Item>\n        </Form>\n      </Modal>\n\n      <Modal\n        title={editProject ? \"Edit Project\" : \"Create a New Project\"}\n        open={showForm}\n        onCancel={() => setShowForm(false)}\n        onOk={handleFormSubmit}\n        okText={editProject ? \"Update Project\" : \"Create Project\"}\n      >\n        <Form form={form} layout=\"vertical\">\n          <Form.Item name=\"project_name\" label=\"Project Name\" rules={[{ required: true, message: \"Please enter a project name\" }]}> <Input /> </Form.Item>\n          <Form.Item name=\"description\" label=\"Description\"> <Input.TextArea /> </Form.Item>\n          <Form.Item name=\"start_date\" label=\"Start Date\" rules={[{ required: true, message: \"Please select a start date\" }]}> <Input type=\"date\" /> </Form.Item>\n          <Form.Item name=\"end_date\" label=\"End Date\" rules={[{ required: true, message: \"Please select an end date\" }]}> <Input type=\"date\" /> </Form.Item>\n          <Form.Item name=\"budget\" label=\"Budget\"> <Input type=\"number\" /> </Form.Item>\n        </Form>\n      </Modal>\n    </div>\n  );\n};\n\nexport default ClientProfile;\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}