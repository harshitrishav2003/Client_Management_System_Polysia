{"ast":null,"code":"\n// import React, { useState, useEffect } from \"react\";\n// import { useParams } from \"react-router-dom\";\n// import axios from \"axios\";\n// import \"../App.css\";\n\n// const ClientProfile = () => {\n//   const { clientId } = useParams(); // Get the clientId from the URL params\n//   const [client, setClient] = useState(null);\n//   const [projects, setProjects] = useState([]); // State to store projects\n//   const [error, setError] = useState(\"\");\n//   const [showForm, setShowForm] = useState(false); // Toggle form visibility\n//   const [formData, setFormData] = useState({\n//     project_name: \"\",\n//     description: \"\",\n//     start_date: \"\",\n//     end_date: \"\",\n//     budget: \"\",\n//     client_id: clientId,\n//   });\n\n//   useEffect(() => {\n//     const fetchClientDetails = async () => {\n//       try {\n//         const response = await axios.get(`http://localhost:5005/api/client/${clientId}`);\n//         setClient(response.data);\n//       } catch (err) {\n//         setError(\"Failed to load client details.\");\n//       }\n//     };\n\n//     const fetchClientProjects = async () => {\n//       try {\n//         const response = await axios.get(`http://localhost:5005/api/projects/${clientId}`);\n//         // Make sure team_members is always an array\n//         const updatedProjects = response.data.map((project) => ({\n//           ...project,\n//           team_members: Array.isArray(project.team_members) ? project.team_members : [],\n//         }));\n//         setProjects(updatedProjects);\n//       } catch (err) {\n//         setError(\"Failed to load projects.\");\n//       }\n//     };\n\n//     fetchClientDetails();\n//     fetchClientProjects();\n//   }, [clientId]);\n\n//   const handleFormChange = (e) => {\n//     const { name, value } = e.target;\n\n//     setFormData({\n//       ...formData,\n//       [name]: value,\n//     });\n//   };\n\n//   const handleFormSubmit = async (e) => {\n//     e.preventDefault();\n//     try {\n//       const response = await axios.post(\"http://localhost:5005/api/projects\", formData);\n//       setProjects([...projects, response.data]); // Add new project to the list\n//       setShowForm(false); // Hide form after submission\n//       console.log(response.data); // Handle the response data (e.g., display success message)\n//     } catch (error) {\n//       console.error(\"Error submitting form:\", error);\n//     }\n//   };\n\n//   if (error) {\n//     return <div>{error}</div>;\n//   }\n\n//   if (!client) {\n//     return <div>Loading...</div>;\n//   }\n\n//   return (\n//     <div>\n//       <h1 style={{ textAlign: \"center\" }}>Projects for {client.client_name}</h1>\n\n//       {/* Display Projects in Table Format */}\n//       <h2>Projects</h2>\n//       {projects.length === 0 ? (\n//         <p>No projects found for this client.</p>\n//       ) : (\n//         <table className=\"project-table\">\n//           <thead>\n//             <tr>\n//               <th>Project Name</th>\n//               <th>Description</th>\n//               <th>Start Date</th>\n//               <th>End Date</th>\n//               <th>Budget</th>\n//               <th>Team Members</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {projects.map((project) => (\n//               <tr key={project._id}>\n//                 <td>{project.project_name}</td>\n//                 <td>{project.description}</td>\n//                 <td>{new Date(project.start_date).toLocaleDateString()}</td>\n//                 <td>{new Date(project.end_date).toLocaleDateString()}</td>\n//                 <td>{project.budget}</td>\n//                 <td>{(project.team_members || []).join(\", \")}</td>\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       )}\n\n//       <div className=\"client-profile-card\">\n//         {/* Button to Show/Hide Form */}\n//         <button onClick={() => setShowForm(!showForm)}>\n//           {showForm ? \"Cancel\" : \"Add New Project\"}\n//         </button>\n\n//         {/* Project Creation Form */}\n//         {showForm && (\n//           <div className=\"project-form\">\n//           <h2>Create a New Project</h2>\n//           <form onSubmit={handleFormSubmit}>\n//             <div>\n//               <label>Project Name</label>\n//               <input\n//                 type=\"text\"\n//                 name=\"project_name\"\n//                 value={formData.project_name}\n//                 onChange={handleFormChange}\n//                 required\n//               />\n//             </div>\n//             <div>\n//               <label>Description</label>\n//               <textarea\n//                 name=\"description\"\n//                 value={formData.description}\n//                 onChange={handleFormChange}\n//                 className=\"description-input\"\n//               />\n//             </div>\n//             <div>\n//               <label>Start Date</label>\n//               <input\n//                 type=\"date\"\n//                 name=\"start_date\"\n//                 value={formData.start_date}\n//                 onChange={handleFormChange}\n//                 className=\"date-input\"\n//               />\n//             </div>\n//             <div>\n//               <label>End Date</label>\n//               <input\n//                 type=\"date\"\n//                 name=\"end_date\"\n//                 value={formData.end_date}\n//                 onChange={handleFormChange}\n//                 className=\"date-input\"\n//               />\n//             </div>\n//             <div>\n//               <label>Budget</label>\n//               <input\n//                 type=\"number\"\n//                 name=\"budget\"\n//                 value={formData.budget}\n//                 onChange={handleFormChange}\n//               />\n//             </div>\n//             <div>\n//               <button type=\"submit\">Create Project</button>\n//             </div>\n//           </form>\n//         </div>\n\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ClientProfile;\n// import React, { useState, useEffect } from \"react\";\n// import { useParams } from \"react-router-dom\";\n// import {\n//   Button,\n//   Card,\n//   TextField,\n//   Typography,\n//   Table,\n//   TableBody,\n//   TableCell,\n//   TableContainer,\n//   TableHead,\n//   TableRow,\n//   Paper,\n//   Modal,\n// } from \"@mui/material\";\n// import axios from \"axios\";\n\n// const ClientProfile = () => {\n//   const { clientId } = useParams();\n//   const [client, setClient] = useState(null);\n//   const [projects, setProjects] = useState([]);\n//   const [error, setError] = useState(\"\");\n//   const [showForm, setShowForm] = useState(false);\n//   const [formData, setFormData] = useState({\n//     project_name: \"\",\n//     description: \"\",\n//     start_date: \"\",\n//     end_date: \"\",\n//     budget: \"\",\n//     client_id: clientId,\n//   });\n\n//   useEffect(() => {\n//     const fetchClientDetails = async () => {\n//       try {\n//         const response = await axios.get(`http://localhost:5005/api/client/${clientId}`);\n//         setClient(response.data);\n//       } catch (err) {\n//         setError(\"Failed to load client details.\");\n//       }\n//     };\n\n//     const fetchClientProjects = async () => {\n//       try {\n//         const response = await axios.get(`http://localhost:5005/api/projects/${clientId}`);\n//         setProjects(response.data);\n//       } catch (err) {\n//         setError(\"Failed to load projects.\");\n//       }\n//     };\n\n//     fetchClientDetails();\n//     fetchClientProjects();\n//   }, [clientId]);\n\n//   const handleFormChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData({\n//       ...formData,\n//       [name]: value,\n//     });\n//   };\n\n//   const handleFormSubmit = async (e) => {\n//     e.preventDefault();\n//     try {\n//       const response = await axios.post(\"http://localhost:5005/api/projects\", formData);\n//       setProjects([...projects, response.data]);\n//       setShowForm(false);\n//     } catch (error) {\n//       console.error(\"Error submitting form:\", error);\n//     }\n//   };\n\n//   if (error) {\n//     return <Typography color=\"error\">{error}</Typography>;\n//   }\n\n//   if (!client) {\n//     return <Typography>Loading...</Typography>;\n//   }\n\n//   return (\n//     <div style={{ padding: \"24px\" }}>\n//       <Typography variant=\"h4\" align=\"center\" gutterBottom>\n//         Projects for {client.client_name}\n//       </Typography>\n//       <Card style={{ padding: \"20px\" }}>\n//         {/* <Typography variant=\"h5\">Projects</Typography> */}\n//         {projects.length === 0 ? (\n//           <Typography>No projects found for this client.</Typography>\n//         ) : (\n//           <TableContainer component={Paper}>\n//             <Table>\n//               <TableHead>\n//                 <TableRow>\n//                   <TableCell>Project Name</TableCell>\n//                   <TableCell>Description</TableCell>\n//                   <TableCell>Start Date</TableCell>\n//                   <TableCell>End Date</TableCell>\n//                   <TableCell>Budget</TableCell>\n//                 </TableRow>\n//               </TableHead>\n//               <TableBody>\n//                 {projects.map((project) => (\n//                   <TableRow key={project._id}>\n//                     <TableCell>{project.project_name}</TableCell>\n//                     <TableCell>{project.description}</TableCell>\n//                     <TableCell>{new Date(project.start_date).toLocaleDateString()}</TableCell>\n//                     <TableCell>{new Date(project.end_date).toLocaleDateString()}</TableCell>\n//                     <TableCell>{project.budget}</TableCell>\n//                   </TableRow>\n//                 ))}\n//               </TableBody>\n//             </Table>\n//           </TableContainer>\n//         )}\n//         <Button\n//           variant=\"contained\"\n//           color=\"primary\"\n//           onClick={() => setShowForm(!showForm)}\n//           style={{ marginTop: \"20px\" }}\n//         >\n//           {showForm ? \"Cancel\" : \"Add New Project\"}\n//         </Button>\n//         <Modal open={showForm} onClose={() => setShowForm(false)}>\n//           <Card style={{ padding: \"20px\", maxWidth: \"500px\", margin: \"auto\", marginTop: \"10%\" }}>\n//             <Typography variant=\"h6\" gutterBottom>\n//               Create a New Project\n//             </Typography>\n//             <form onSubmit={handleFormSubmit}>\n//               <TextField\n//                 fullWidth\n//                 label=\"Project Name\"\n//                 name=\"project_name\"\n//                 value={formData.project_name}\n//                 onChange={handleFormChange}\n//                 margin=\"normal\"\n//                 required\n//               />\n//               <TextField\n//                 fullWidth\n//                 label=\"Description\"\n//                 name=\"description\"\n//                 value={formData.description}\n//                 onChange={handleFormChange}\n//                 margin=\"normal\"\n//                 multiline\n//               />\n//               <TextField\n//                 fullWidth\n//                 label=\"Start Date\"\n//                 type=\"date\"\n//                 name=\"start_date\"\n//                 value={formData.start_date}\n//                 onChange={handleFormChange}\n//                 margin=\"normal\"\n//                 InputLabelProps={{ shrink: true }}\n//               />\n//               <TextField\n//                 fullWidth\n//                 label=\"End Date\"\n//                 type=\"date\"\n//                 name=\"end_date\"\n//                 value={formData.end_date}\n//                 onChange={handleFormChange}\n//                 margin=\"normal\"\n//                 InputLabelProps={{ shrink: true }}\n//               />\n//               <TextField\n//                 fullWidth\n//                 label=\"Budget\"\n//                 type=\"number\"\n//                 name=\"budget\"\n//                 value={formData.budget}\n//                 onChange={handleFormChange}\n//                 margin=\"normal\"\n//               />\n//               <Button variant=\"contained\" color=\"primary\" type=\"submit\" style={{ marginTop: \"20px\" }}>\n//                 Create Project\n//               </Button>\n//             </form>\n//           </Card>\n//         </Modal>\n//       </Card>\n//     </div>\n//   );\n// };\n\n// export default ClientProfile;\n// import React, { useEffect, useState } from \"react\";\n// import { useParams } from \"react-router-dom\";\n// import { Button, Table, Modal, Input, Form, Typography, message, Spin, Card, Alert } from \"antd\";\n// import { EditOutlined, PlusOutlined } from \"@ant-design/icons\";\n// import \"antd/dist/reset.css\";\n\n// const { Title } = Typography;\n\n// const ClientProfile = () => {\n//   const { clientId } = useParams();\n//   const [client, setClient] = useState(null);\n//   const [projects, setProjects] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [showForm, setShowForm] = useState(false);\n//   const [showEditClientForm, setShowEditClientForm] = useState(false);\n//   const [editProject, setEditProject] = useState(null);\n//   const [form] = Form.useForm();\n//   const [clientForm] = Form.useForm();\n\n//   useEffect(() => {\n//     const fetchClientDetails = async () => {\n//       try {\n//         const response = await fetch(`http://localhost:5005/api/client/${clientId}`);\n//         const data = await response.json();\n//         setClient(data);\n//         clientForm.setFieldsValue(data);\n//       } catch (err) {\n//         setError(\"Failed to load client details.\");\n//       }\n//     };\n\n//     const fetchClientProjects = async () => {\n//       try {\n//         const response = await fetch(`http://localhost:5005/api/projects/${clientId}`);\n//         const data = await response.json();\n//         setProjects(data);\n//       } catch (err) {\n//         setError(\"Failed to load projects.\");\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchClientDetails();\n//     fetchClientProjects();\n//   }, [clientId]);\n\n//   const handleFormSubmit = async () => {\n//     try {\n//       const formData = await form.validateFields();\n//       if (editProject) {\n//         // Update project\n//         await fetch(`http://localhost:5005/api/projects/${editProject._id}`, {\n//           method: \"PUT\",\n//           headers: { \"Content-Type\": \"application/json\" },\n//           body: JSON.stringify(formData),\n//         });\n//         setProjects(projects.map((p) => (p._id === editProject._id ? { ...p, ...formData } : p)));\n//       } else {\n//         // Create new project\n//         const response = await fetch(\"http://localhost:5005/api/projects\", {\n//           method: \"POST\",\n//           headers: { \"Content-Type\": \"application/json\" },\n//           body: JSON.stringify({ ...formData, client_id: clientId }),\n//         });\n//         const newProject = await response.json();\n//         setProjects([...projects, newProject]);\n//       }\n//       setShowForm(false);\n//       setEditProject(null);\n//       form.resetFields();\n//       message.success(\"Project saved successfully\");\n//     } catch (error) {\n//       message.error(\"Error saving project\");\n//     }\n//   };\n\n//   const handleClientUpdate = async () => {\n//     try {\n//       const formData = await clientForm.validateFields();\n//       await fetch(`http://localhost:5005/api/client/${clientId}`, {\n//         method: \"PUT\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify(formData),\n//       });\n//       setClient(formData);\n//       setShowEditClientForm(false);\n//       message.success(\"Client details updated successfully\");\n//     } catch (error) {\n//       message.error(\"Error updating client details\");\n//     }\n//   };\n\n//   if (loading) return <Spin size=\"large\" style={{ display: \"block\", margin: \"auto\" }} />;\n//   if (error) return <Alert message={error} type=\"error\" showIcon />;\n//   if (!client) return <Typography>Loading...</Typography>;\n\n//   return (\n//     <div style={{ padding: \"24px\" }}>\n//       <Card>\n//         <Title level={3}>\n//           {client.client_name} <EditOutlined onClick={() => setShowEditClientForm(true)} style={{ cursor: \"pointer\", marginLeft: 10 }} />\n//         </Title>\n//         <Table\n//           dataSource={projects}\n//           rowKey=\"_id\"\n//           columns={[\n//             { title: \"Project Name\", dataIndex: \"project_name\" },\n//             { title: \"Description\", dataIndex: \"description\" },\n//             { title: \"Start Date\", dataIndex: \"start_date\", render: (date) => new Date(date).toLocaleDateString() },\n//             { title: \"End Date\", dataIndex: \"end_date\", render: (date) => new Date(date).toLocaleDateString() },\n//             { title: \"Budget\", dataIndex: \"budget\" },\n//             {\n//               title: \"Actions\",\n//               render: (_, record) => (\n//                 <Button icon={<EditOutlined />} onClick={() => { setEditProject(record); setShowForm(true); form.setFieldsValue(record); }} />\n//               ),\n//             },\n//           ]}\n//         />\n//         <Button type=\"primary\" icon={<PlusOutlined />} onClick={() => { setEditProject(null); setShowForm(true); }} style={{ marginTop: \"20px\" }}>\n//           Add New Project\n//         </Button>\n//       </Card>\n\n//       <Modal title=\"Edit Client Details\" open={showEditClientForm} onCancel={() => setShowEditClientForm(false)} onOk={handleClientUpdate}>\n//         <Form form={clientForm} layout=\"vertical\">\n//           <Form.Item name=\"client_name\" label=\"Client Name\" rules={[{ required: true, message: \"Please enter a client name\" }]}> <Input /> </Form.Item>\n//           <Form.Item name=\"client_email\" label=\"Client Email\" rules={[{ required: true, message: \"Please enter a valid email\" }]}> <Input type=\"email\" /> </Form.Item>\n//         </Form>\n//       </Modal>\n\n//       <Modal\n//         title={editProject ? \"Edit Project\" : \"Create a New Project\"}\n//         open={showForm}\n//         onCancel={() => setShowForm(false)}\n//         onOk={handleFormSubmit}\n//         okText={editProject ? \"Update Project\" : \"Create Project\"}\n//       >\n//         <Form form={form} layout=\"vertical\">\n//           <Form.Item name=\"project_name\" label=\"Project Name\" rules={[{ required: true, message: \"Please enter a project name\" }]}> <Input /> </Form.Item>\n//           <Form.Item name=\"description\" label=\"Description\"> <Input.TextArea /> </Form.Item>\n//           <Form.Item name=\"start_date\" label=\"Start Date\" rules={[{ required: true, message: \"Please select a start date\" }]}> <Input type=\"date\" /> </Form.Item>\n//           <Form.Item name=\"end_date\" label=\"End Date\" rules={[{ required: true, message: \"Please select an end date\" }]}> <Input type=\"date\" /> </Form.Item>\n//           <Form.Item name=\"budget\" label=\"Budget\"> <Input type=\"number\" /> </Form.Item>\n//         </Form>\n//       </Modal>\n//     </div>\n//   );\n// };\n\n// export default ClientProfile;","map":{"version":3,"names":[],"sources":["/Users/harshitrishav/Demo/jwt-auth-frontend/src/components/ContractManagement.js"],"sourcesContent":["\n// import React, { useState, useEffect } from \"react\";\n// import { useParams } from \"react-router-dom\";\n// import axios from \"axios\";\n// import \"../App.css\";\n\n// const ClientProfile = () => {\n//   const { clientId } = useParams(); // Get the clientId from the URL params\n//   const [client, setClient] = useState(null);\n//   const [projects, setProjects] = useState([]); // State to store projects\n//   const [error, setError] = useState(\"\");\n//   const [showForm, setShowForm] = useState(false); // Toggle form visibility\n//   const [formData, setFormData] = useState({\n//     project_name: \"\",\n//     description: \"\",\n//     start_date: \"\",\n//     end_date: \"\",\n//     budget: \"\",\n//     client_id: clientId,\n//   });\n\n//   useEffect(() => {\n//     const fetchClientDetails = async () => {\n//       try {\n//         const response = await axios.get(`http://localhost:5005/api/client/${clientId}`);\n//         setClient(response.data);\n//       } catch (err) {\n//         setError(\"Failed to load client details.\");\n//       }\n//     };\n\n//     const fetchClientProjects = async () => {\n//       try {\n//         const response = await axios.get(`http://localhost:5005/api/projects/${clientId}`);\n//         // Make sure team_members is always an array\n//         const updatedProjects = response.data.map((project) => ({\n//           ...project,\n//           team_members: Array.isArray(project.team_members) ? project.team_members : [],\n//         }));\n//         setProjects(updatedProjects);\n//       } catch (err) {\n//         setError(\"Failed to load projects.\");\n//       }\n//     };\n\n//     fetchClientDetails();\n//     fetchClientProjects();\n//   }, [clientId]);\n\n//   const handleFormChange = (e) => {\n//     const { name, value } = e.target;\n\n//     setFormData({\n//       ...formData,\n//       [name]: value,\n//     });\n//   };\n\n//   const handleFormSubmit = async (e) => {\n//     e.preventDefault();\n//     try {\n//       const response = await axios.post(\"http://localhost:5005/api/projects\", formData);\n//       setProjects([...projects, response.data]); // Add new project to the list\n//       setShowForm(false); // Hide form after submission\n//       console.log(response.data); // Handle the response data (e.g., display success message)\n//     } catch (error) {\n//       console.error(\"Error submitting form:\", error);\n//     }\n//   };\n\n//   if (error) {\n//     return <div>{error}</div>;\n//   }\n\n//   if (!client) {\n//     return <div>Loading...</div>;\n//   }\n\n//   return (\n//     <div>\n//       <h1 style={{ textAlign: \"center\" }}>Projects for {client.client_name}</h1>\n\n//       {/* Display Projects in Table Format */}\n//       <h2>Projects</h2>\n//       {projects.length === 0 ? (\n//         <p>No projects found for this client.</p>\n//       ) : (\n//         <table className=\"project-table\">\n//           <thead>\n//             <tr>\n//               <th>Project Name</th>\n//               <th>Description</th>\n//               <th>Start Date</th>\n//               <th>End Date</th>\n//               <th>Budget</th>\n//               <th>Team Members</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {projects.map((project) => (\n//               <tr key={project._id}>\n//                 <td>{project.project_name}</td>\n//                 <td>{project.description}</td>\n//                 <td>{new Date(project.start_date).toLocaleDateString()}</td>\n//                 <td>{new Date(project.end_date).toLocaleDateString()}</td>\n//                 <td>{project.budget}</td>\n//                 <td>{(project.team_members || []).join(\", \")}</td>\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       )}\n\n//       <div className=\"client-profile-card\">\n//         {/* Button to Show/Hide Form */}\n//         <button onClick={() => setShowForm(!showForm)}>\n//           {showForm ? \"Cancel\" : \"Add New Project\"}\n//         </button>\n\n//         {/* Project Creation Form */}\n//         {showForm && (\n//           <div className=\"project-form\">\n//           <h2>Create a New Project</h2>\n//           <form onSubmit={handleFormSubmit}>\n//             <div>\n//               <label>Project Name</label>\n//               <input\n//                 type=\"text\"\n//                 name=\"project_name\"\n//                 value={formData.project_name}\n//                 onChange={handleFormChange}\n//                 required\n//               />\n//             </div>\n//             <div>\n//               <label>Description</label>\n//               <textarea\n//                 name=\"description\"\n//                 value={formData.description}\n//                 onChange={handleFormChange}\n//                 className=\"description-input\"\n//               />\n//             </div>\n//             <div>\n//               <label>Start Date</label>\n//               <input\n//                 type=\"date\"\n//                 name=\"start_date\"\n//                 value={formData.start_date}\n//                 onChange={handleFormChange}\n//                 className=\"date-input\"\n//               />\n//             </div>\n//             <div>\n//               <label>End Date</label>\n//               <input\n//                 type=\"date\"\n//                 name=\"end_date\"\n//                 value={formData.end_date}\n//                 onChange={handleFormChange}\n//                 className=\"date-input\"\n//               />\n//             </div>\n//             <div>\n//               <label>Budget</label>\n//               <input\n//                 type=\"number\"\n//                 name=\"budget\"\n//                 value={formData.budget}\n//                 onChange={handleFormChange}\n//               />\n//             </div>\n//             <div>\n//               <button type=\"submit\">Create Project</button>\n//             </div>\n//           </form>\n//         </div>\n        \n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ClientProfile;\n// import React, { useState, useEffect } from \"react\";\n// import { useParams } from \"react-router-dom\";\n// import {\n//   Button,\n//   Card,\n//   TextField,\n//   Typography,\n//   Table,\n//   TableBody,\n//   TableCell,\n//   TableContainer,\n//   TableHead,\n//   TableRow,\n//   Paper,\n//   Modal,\n// } from \"@mui/material\";\n// import axios from \"axios\";\n\n// const ClientProfile = () => {\n//   const { clientId } = useParams();\n//   const [client, setClient] = useState(null);\n//   const [projects, setProjects] = useState([]);\n//   const [error, setError] = useState(\"\");\n//   const [showForm, setShowForm] = useState(false);\n//   const [formData, setFormData] = useState({\n//     project_name: \"\",\n//     description: \"\",\n//     start_date: \"\",\n//     end_date: \"\",\n//     budget: \"\",\n//     client_id: clientId,\n//   });\n\n//   useEffect(() => {\n//     const fetchClientDetails = async () => {\n//       try {\n//         const response = await axios.get(`http://localhost:5005/api/client/${clientId}`);\n//         setClient(response.data);\n//       } catch (err) {\n//         setError(\"Failed to load client details.\");\n//       }\n//     };\n\n//     const fetchClientProjects = async () => {\n//       try {\n//         const response = await axios.get(`http://localhost:5005/api/projects/${clientId}`);\n//         setProjects(response.data);\n//       } catch (err) {\n//         setError(\"Failed to load projects.\");\n//       }\n//     };\n\n//     fetchClientDetails();\n//     fetchClientProjects();\n//   }, [clientId]);\n\n//   const handleFormChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData({\n//       ...formData,\n//       [name]: value,\n//     });\n//   };\n\n//   const handleFormSubmit = async (e) => {\n//     e.preventDefault();\n//     try {\n//       const response = await axios.post(\"http://localhost:5005/api/projects\", formData);\n//       setProjects([...projects, response.data]);\n//       setShowForm(false);\n//     } catch (error) {\n//       console.error(\"Error submitting form:\", error);\n//     }\n//   };\n\n//   if (error) {\n//     return <Typography color=\"error\">{error}</Typography>;\n//   }\n\n//   if (!client) {\n//     return <Typography>Loading...</Typography>;\n//   }\n\n//   return (\n//     <div style={{ padding: \"24px\" }}>\n//       <Typography variant=\"h4\" align=\"center\" gutterBottom>\n//         Projects for {client.client_name}\n//       </Typography>\n//       <Card style={{ padding: \"20px\" }}>\n//         {/* <Typography variant=\"h5\">Projects</Typography> */}\n//         {projects.length === 0 ? (\n//           <Typography>No projects found for this client.</Typography>\n//         ) : (\n//           <TableContainer component={Paper}>\n//             <Table>\n//               <TableHead>\n//                 <TableRow>\n//                   <TableCell>Project Name</TableCell>\n//                   <TableCell>Description</TableCell>\n//                   <TableCell>Start Date</TableCell>\n//                   <TableCell>End Date</TableCell>\n//                   <TableCell>Budget</TableCell>\n//                 </TableRow>\n//               </TableHead>\n//               <TableBody>\n//                 {projects.map((project) => (\n//                   <TableRow key={project._id}>\n//                     <TableCell>{project.project_name}</TableCell>\n//                     <TableCell>{project.description}</TableCell>\n//                     <TableCell>{new Date(project.start_date).toLocaleDateString()}</TableCell>\n//                     <TableCell>{new Date(project.end_date).toLocaleDateString()}</TableCell>\n//                     <TableCell>{project.budget}</TableCell>\n//                   </TableRow>\n//                 ))}\n//               </TableBody>\n//             </Table>\n//           </TableContainer>\n//         )}\n//         <Button\n//           variant=\"contained\"\n//           color=\"primary\"\n//           onClick={() => setShowForm(!showForm)}\n//           style={{ marginTop: \"20px\" }}\n//         >\n//           {showForm ? \"Cancel\" : \"Add New Project\"}\n//         </Button>\n//         <Modal open={showForm} onClose={() => setShowForm(false)}>\n//           <Card style={{ padding: \"20px\", maxWidth: \"500px\", margin: \"auto\", marginTop: \"10%\" }}>\n//             <Typography variant=\"h6\" gutterBottom>\n//               Create a New Project\n//             </Typography>\n//             <form onSubmit={handleFormSubmit}>\n//               <TextField\n//                 fullWidth\n//                 label=\"Project Name\"\n//                 name=\"project_name\"\n//                 value={formData.project_name}\n//                 onChange={handleFormChange}\n//                 margin=\"normal\"\n//                 required\n//               />\n//               <TextField\n//                 fullWidth\n//                 label=\"Description\"\n//                 name=\"description\"\n//                 value={formData.description}\n//                 onChange={handleFormChange}\n//                 margin=\"normal\"\n//                 multiline\n//               />\n//               <TextField\n//                 fullWidth\n//                 label=\"Start Date\"\n//                 type=\"date\"\n//                 name=\"start_date\"\n//                 value={formData.start_date}\n//                 onChange={handleFormChange}\n//                 margin=\"normal\"\n//                 InputLabelProps={{ shrink: true }}\n//               />\n//               <TextField\n//                 fullWidth\n//                 label=\"End Date\"\n//                 type=\"date\"\n//                 name=\"end_date\"\n//                 value={formData.end_date}\n//                 onChange={handleFormChange}\n//                 margin=\"normal\"\n//                 InputLabelProps={{ shrink: true }}\n//               />\n//               <TextField\n//                 fullWidth\n//                 label=\"Budget\"\n//                 type=\"number\"\n//                 name=\"budget\"\n//                 value={formData.budget}\n//                 onChange={handleFormChange}\n//                 margin=\"normal\"\n//               />\n//               <Button variant=\"contained\" color=\"primary\" type=\"submit\" style={{ marginTop: \"20px\" }}>\n//                 Create Project\n//               </Button>\n//             </form>\n//           </Card>\n//         </Modal>\n//       </Card>\n//     </div>\n//   );\n// };\n\n// export default ClientProfile;\n// import React, { useEffect, useState } from \"react\";\n// import { useParams } from \"react-router-dom\";\n// import { Button, Table, Modal, Input, Form, Typography, message, Spin, Card, Alert } from \"antd\";\n// import { EditOutlined, PlusOutlined } from \"@ant-design/icons\";\n// import \"antd/dist/reset.css\";\n\n// const { Title } = Typography;\n\n// const ClientProfile = () => {\n//   const { clientId } = useParams();\n//   const [client, setClient] = useState(null);\n//   const [projects, setProjects] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [showForm, setShowForm] = useState(false);\n//   const [showEditClientForm, setShowEditClientForm] = useState(false);\n//   const [editProject, setEditProject] = useState(null);\n//   const [form] = Form.useForm();\n//   const [clientForm] = Form.useForm();\n\n//   useEffect(() => {\n//     const fetchClientDetails = async () => {\n//       try {\n//         const response = await fetch(`http://localhost:5005/api/client/${clientId}`);\n//         const data = await response.json();\n//         setClient(data);\n//         clientForm.setFieldsValue(data);\n//       } catch (err) {\n//         setError(\"Failed to load client details.\");\n//       }\n//     };\n\n//     const fetchClientProjects = async () => {\n//       try {\n//         const response = await fetch(`http://localhost:5005/api/projects/${clientId}`);\n//         const data = await response.json();\n//         setProjects(data);\n//       } catch (err) {\n//         setError(\"Failed to load projects.\");\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchClientDetails();\n//     fetchClientProjects();\n//   }, [clientId]);\n\n//   const handleFormSubmit = async () => {\n//     try {\n//       const formData = await form.validateFields();\n//       if (editProject) {\n//         // Update project\n//         await fetch(`http://localhost:5005/api/projects/${editProject._id}`, {\n//           method: \"PUT\",\n//           headers: { \"Content-Type\": \"application/json\" },\n//           body: JSON.stringify(formData),\n//         });\n//         setProjects(projects.map((p) => (p._id === editProject._id ? { ...p, ...formData } : p)));\n//       } else {\n//         // Create new project\n//         const response = await fetch(\"http://localhost:5005/api/projects\", {\n//           method: \"POST\",\n//           headers: { \"Content-Type\": \"application/json\" },\n//           body: JSON.stringify({ ...formData, client_id: clientId }),\n//         });\n//         const newProject = await response.json();\n//         setProjects([...projects, newProject]);\n//       }\n//       setShowForm(false);\n//       setEditProject(null);\n//       form.resetFields();\n//       message.success(\"Project saved successfully\");\n//     } catch (error) {\n//       message.error(\"Error saving project\");\n//     }\n//   };\n\n//   const handleClientUpdate = async () => {\n//     try {\n//       const formData = await clientForm.validateFields();\n//       await fetch(`http://localhost:5005/api/client/${clientId}`, {\n//         method: \"PUT\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify(formData),\n//       });\n//       setClient(formData);\n//       setShowEditClientForm(false);\n//       message.success(\"Client details updated successfully\");\n//     } catch (error) {\n//       message.error(\"Error updating client details\");\n//     }\n//   };\n\n//   if (loading) return <Spin size=\"large\" style={{ display: \"block\", margin: \"auto\" }} />;\n//   if (error) return <Alert message={error} type=\"error\" showIcon />;\n//   if (!client) return <Typography>Loading...</Typography>;\n\n//   return (\n//     <div style={{ padding: \"24px\" }}>\n//       <Card>\n//         <Title level={3}>\n//           {client.client_name} <EditOutlined onClick={() => setShowEditClientForm(true)} style={{ cursor: \"pointer\", marginLeft: 10 }} />\n//         </Title>\n//         <Table\n//           dataSource={projects}\n//           rowKey=\"_id\"\n//           columns={[\n//             { title: \"Project Name\", dataIndex: \"project_name\" },\n//             { title: \"Description\", dataIndex: \"description\" },\n//             { title: \"Start Date\", dataIndex: \"start_date\", render: (date) => new Date(date).toLocaleDateString() },\n//             { title: \"End Date\", dataIndex: \"end_date\", render: (date) => new Date(date).toLocaleDateString() },\n//             { title: \"Budget\", dataIndex: \"budget\" },\n//             {\n//               title: \"Actions\",\n//               render: (_, record) => (\n//                 <Button icon={<EditOutlined />} onClick={() => { setEditProject(record); setShowForm(true); form.setFieldsValue(record); }} />\n//               ),\n//             },\n//           ]}\n//         />\n//         <Button type=\"primary\" icon={<PlusOutlined />} onClick={() => { setEditProject(null); setShowForm(true); }} style={{ marginTop: \"20px\" }}>\n//           Add New Project\n//         </Button>\n//       </Card>\n\n//       <Modal title=\"Edit Client Details\" open={showEditClientForm} onCancel={() => setShowEditClientForm(false)} onOk={handleClientUpdate}>\n//         <Form form={clientForm} layout=\"vertical\">\n//           <Form.Item name=\"client_name\" label=\"Client Name\" rules={[{ required: true, message: \"Please enter a client name\" }]}> <Input /> </Form.Item>\n//           <Form.Item name=\"client_email\" label=\"Client Email\" rules={[{ required: true, message: \"Please enter a valid email\" }]}> <Input type=\"email\" /> </Form.Item>\n//         </Form>\n//       </Modal>\n\n//       <Modal\n//         title={editProject ? \"Edit Project\" : \"Create a New Project\"}\n//         open={showForm}\n//         onCancel={() => setShowForm(false)}\n//         onOk={handleFormSubmit}\n//         okText={editProject ? \"Update Project\" : \"Create Project\"}\n//       >\n//         <Form form={form} layout=\"vertical\">\n//           <Form.Item name=\"project_name\" label=\"Project Name\" rules={[{ required: true, message: \"Please enter a project name\" }]}> <Input /> </Form.Item>\n//           <Form.Item name=\"description\" label=\"Description\"> <Input.TextArea /> </Form.Item>\n//           <Form.Item name=\"start_date\" label=\"Start Date\" rules={[{ required: true, message: \"Please select a start date\" }]}> <Input type=\"date\" /> </Form.Item>\n//           <Form.Item name=\"end_date\" label=\"End Date\" rules={[{ required: true, message: \"Please select an end date\" }]}> <Input type=\"date\" /> </Form.Item>\n//           <Form.Item name=\"budget\" label=\"Budget\"> <Input type=\"number\" /> </Form.Item>\n//         </Form>\n//       </Modal>\n//     </div>\n//   );\n// };\n\n// export default ClientProfile;\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}