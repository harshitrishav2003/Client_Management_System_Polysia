{"ast":null,"code":"var _jsxFileName = \"/Users/harshitrishav/Demo/jwt-auth-frontend/src/components/ContractManagement.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import { useParams } from \"react-router-dom\";\n// import axios from \"axios\";\n// import \"../App.css\";\n\n// const ClientProfile = () => {\n//   const { clientId } = useParams(); // Get the clientId from the URL params\n//   const [client, setClient] = useState(null);\n//   const [projects, setProjects] = useState([]); // State to store projects\n//   const [error, setError] = useState(\"\");\n//   const [showForm, setShowForm] = useState(false); // Toggle form visibility\n//   const [formData, setFormData] = useState({\n//     project_name: \"\",\n//     description: \"\",\n//     start_date: \"\",\n//     end_date: \"\",\n//     budget: \"\",\n//     client_id: clientId,\n//   });\n\n//   useEffect(() => {\n//     const fetchClientDetails = async () => {\n//       try {\n//         const response = await axios.get(`http://localhost:5005/api/client/${clientId}`);\n//         setClient(response.data);\n//       } catch (err) {\n//         setError(\"Failed to load client details.\");\n//       }\n//     };\n\n//     const fetchClientProjects = async () => {\n//       try {\n//         const response = await axios.get(`http://localhost:5005/api/projects/${clientId}`);\n//         // Make sure team_members is always an array\n//         const updatedProjects = response.data.map((project) => ({\n//           ...project,\n//           team_members: Array.isArray(project.team_members) ? project.team_members : [],\n//         }));\n//         setProjects(updatedProjects);\n//       } catch (err) {\n//         setError(\"Failed to load projects.\");\n//       }\n//     };\n\n//     fetchClientDetails();\n//     fetchClientProjects();\n//   }, [clientId]);\n\n//   const handleFormChange = (e) => {\n//     const { name, value } = e.target;\n\n//     setFormData({\n//       ...formData,\n//       [name]: value,\n//     });\n//   };\n\n//   const handleFormSubmit = async (e) => {\n//     e.preventDefault();\n//     try {\n//       const response = await axios.post(\"http://localhost:5005/api/projects\", formData);\n//       setProjects([...projects, response.data]); // Add new project to the list\n//       setShowForm(false); // Hide form after submission\n//       console.log(response.data); // Handle the response data (e.g., display success message)\n//     } catch (error) {\n//       console.error(\"Error submitting form:\", error);\n//     }\n//   };\n\n//   if (error) {\n//     return <div>{error}</div>;\n//   }\n\n//   if (!client) {\n//     return <div>Loading...</div>;\n//   }\n\n//   return (\n//     <div>\n//       <h1 style={{ textAlign: \"center\" }}>Projects for {client.client_name}</h1>\n\n//       {/* Display Projects in Table Format */}\n//       <h2>Projects</h2>\n//       {projects.length === 0 ? (\n//         <p>No projects found for this client.</p>\n//       ) : (\n//         <table className=\"project-table\">\n//           <thead>\n//             <tr>\n//               <th>Project Name</th>\n//               <th>Description</th>\n//               <th>Start Date</th>\n//               <th>End Date</th>\n//               <th>Budget</th>\n//               <th>Team Members</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {projects.map((project) => (\n//               <tr key={project._id}>\n//                 <td>{project.project_name}</td>\n//                 <td>{project.description}</td>\n//                 <td>{new Date(project.start_date).toLocaleDateString()}</td>\n//                 <td>{new Date(project.end_date).toLocaleDateString()}</td>\n//                 <td>{project.budget}</td>\n//                 <td>{(project.team_members || []).join(\", \")}</td>\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       )}\n\n//       <div className=\"client-profile-card\">\n//         {/* Button to Show/Hide Form */}\n//         <button onClick={() => setShowForm(!showForm)}>\n//           {showForm ? \"Cancel\" : \"Add New Project\"}\n//         </button>\n\n//         {/* Project Creation Form */}\n//         {showForm && (\n//           <div className=\"project-form\">\n//           <h2>Create a New Project</h2>\n//           <form onSubmit={handleFormSubmit}>\n//             <div>\n//               <label>Project Name</label>\n//               <input\n//                 type=\"text\"\n//                 name=\"project_name\"\n//                 value={formData.project_name}\n//                 onChange={handleFormChange}\n//                 required\n//               />\n//             </div>\n//             <div>\n//               <label>Description</label>\n//               <textarea\n//                 name=\"description\"\n//                 value={formData.description}\n//                 onChange={handleFormChange}\n//                 className=\"description-input\"\n//               />\n//             </div>\n//             <div>\n//               <label>Start Date</label>\n//               <input\n//                 type=\"date\"\n//                 name=\"start_date\"\n//                 value={formData.start_date}\n//                 onChange={handleFormChange}\n//                 className=\"date-input\"\n//               />\n//             </div>\n//             <div>\n//               <label>End Date</label>\n//               <input\n//                 type=\"date\"\n//                 name=\"end_date\"\n//                 value={formData.end_date}\n//                 onChange={handleFormChange}\n//                 className=\"date-input\"\n//               />\n//             </div>\n//             <div>\n//               <label>Budget</label>\n//               <input\n//                 type=\"number\"\n//                 name=\"budget\"\n//                 value={formData.budget}\n//                 onChange={handleFormChange}\n//               />\n//             </div>\n//             <div>\n//               <button type=\"submit\">Create Project</button>\n//             </div>\n//           </form>\n//         </div>\n\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ClientProfile;\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { Button, Card, TextField, Typography, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Modal } from \"@mui/material\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ClientProfile = () => {\n  _s();\n  const {\n    clientId\n  } = useParams();\n  const [client, setClient] = useState(null);\n  const [projects, setProjects] = useState([]);\n  const [error, setError] = useState(\"\");\n  const [showForm, setShowForm] = useState(false);\n  const [formData, setFormData] = useState({\n    project_name: \"\",\n    description: \"\",\n    start_date: \"\",\n    end_date: \"\",\n    budget: \"\",\n    client_id: clientId\n  });\n  useEffect(() => {\n    const fetchClientDetails = async () => {\n      try {\n        const response = await axios.get(`http://localhost:5005/api/client/${clientId}`);\n        setClient(response.data);\n      } catch (err) {\n        setError(\"Failed to load client details.\");\n      }\n    };\n    const fetchClientProjects = async () => {\n      try {\n        const response = await axios.get(`http://localhost:5005/api/projects/${clientId}`);\n        setProjects(response.data);\n      } catch (err) {\n        setError(\"Failed to load projects.\");\n      }\n    };\n    fetchClientDetails();\n    fetchClientProjects();\n  }, [clientId]);\n  const handleFormChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData({\n      ...formData,\n      [name]: value\n    });\n  };\n  const handleFormSubmit = async e => {\n    e.preventDefault();\n    try {\n      const response = await axios.post(\"http://localhost:5005/api/projects\", formData);\n      setProjects([...projects, response.data]);\n      setShowForm(false);\n    } catch (error) {\n      console.error(\"Error submitting form:\", error);\n    }\n  };\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(Typography, {\n      color: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 12\n    }, this);\n  }\n  if (!client) {\n    return /*#__PURE__*/_jsxDEV(Typography, {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: \"24px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      align: \"center\",\n      gutterBottom: true,\n      children: [\"Projects for \", client.client_name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      style: {\n        padding: \"20px\"\n      },\n      children: [projects.length === 0 ? /*#__PURE__*/_jsxDEV(Typography, {\n        children: \"No projects found for this client.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(TableContainer, {\n        component: Paper,\n        children: /*#__PURE__*/_jsxDEV(Table, {\n          children: [/*#__PURE__*/_jsxDEV(TableHead, {\n            children: /*#__PURE__*/_jsxDEV(TableRow, {\n              children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                children: \"Project Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 283,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: \"Description\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 284,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: \"Start Date\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 285,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: \"End Date\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 286,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: \"Budget\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 287,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 282,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 281,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n            children: projects.map(project => /*#__PURE__*/_jsxDEV(TableRow, {\n              children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                children: project.project_name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 293,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: project.description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 294,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: new Date(project.start_date).toLocaleDateString()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 295,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: new Date(project.end_date).toLocaleDateString()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 296,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: project.budget\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 297,\n                columnNumber: 21\n              }, this)]\n            }, project._id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 292,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 290,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: () => setShowForm(!showForm),\n        style: {\n          marginTop: \"20px\"\n        },\n        children: showForm ? \"Cancel\" : \"Add New Project\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal, {\n        open: showForm,\n        onClose: () => setShowForm(false),\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          style: {\n            padding: \"20px\",\n            maxWidth: \"500px\",\n            margin: \"auto\",\n            marginTop: \"10%\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            gutterBottom: true,\n            children: \"Create a New Project\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleFormSubmit,\n            children: [/*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"Project Name\",\n              name: \"project_name\",\n              value: formData.project_name,\n              onChange: handleFormChange,\n              margin: \"normal\",\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 318,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"Description\",\n              name: \"description\",\n              value: formData.description,\n              onChange: handleFormChange,\n              margin: \"normal\",\n              multiline: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 327,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"Start Date\",\n              type: \"date\",\n              name: \"start_date\",\n              value: formData.start_date,\n              onChange: handleFormChange,\n              margin: \"normal\",\n              InputLabelProps: {\n                shrink: true\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 336,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"End Date\",\n              type: \"date\",\n              name: \"end_date\",\n              value: formData.end_date,\n              onChange: handleFormChange,\n              margin: \"normal\",\n              InputLabelProps: {\n                shrink: true\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 346,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"Budget\",\n              type: \"number\",\n              name: \"budget\",\n              value: formData.budget,\n              onChange: handleFormChange,\n              margin: \"normal\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 356,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              color: \"primary\",\n              type: \"submit\",\n              style: {\n                marginTop: \"20px\"\n              },\n              children: \"Create Project\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 365,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 270,\n    columnNumber: 5\n  }, this);\n};\n_s(ClientProfile, \"F9UIPMZ4uOsEyznTnMDvT2CCuJw=\", false, function () {\n  return [useParams];\n});\n_c = ClientProfile;\nexport default ClientProfile;\n// import React, { useEffect, useState } from \"react\";\n// import { useParams } from \"react-router-dom\";\n// import { Button, Table, Modal, Input, Form, Typography, message, Spin, Card, Alert } from \"antd\";\n// import { EditOutlined, PlusOutlined } from \"@ant-design/icons\";\n// import \"antd/dist/reset.css\";\n\n// const { Title } = Typography;\n\n// const ClientProfile = () => {\n//   const { clientId } = useParams();\n//   const [client, setClient] = useState(null);\n//   const [projects, setProjects] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [showForm, setShowForm] = useState(false);\n//   const [showEditClientForm, setShowEditClientForm] = useState(false);\n//   const [editProject, setEditProject] = useState(null);\n//   const [form] = Form.useForm();\n//   const [clientForm] = Form.useForm();\n\n//   useEffect(() => {\n//     const fetchClientDetails = async () => {\n//       try {\n//         const response = await fetch(`http://localhost:5005/api/client/${clientId}`);\n//         const data = await response.json();\n//         setClient(data);\n//         clientForm.setFieldsValue(data);\n//       } catch (err) {\n//         setError(\"Failed to load client details.\");\n//       }\n//     };\n\n//     const fetchClientProjects = async () => {\n//       try {\n//         const response = await fetch(`http://localhost:5005/api/projects/${clientId}`);\n//         const data = await response.json();\n//         setProjects(data);\n//       } catch (err) {\n//         setError(\"Failed to load projects.\");\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchClientDetails();\n//     fetchClientProjects();\n//   }, [clientId]);\n\n//   const handleFormSubmit = async () => {\n//     try {\n//       const formData = await form.validateFields();\n//       if (editProject) {\n//         // Update project\n//         await fetch(`http://localhost:5005/api/projects/${editProject._id}`, {\n//           method: \"PUT\",\n//           headers: { \"Content-Type\": \"application/json\" },\n//           body: JSON.stringify(formData),\n//         });\n//         setProjects(projects.map((p) => (p._id === editProject._id ? { ...p, ...formData } : p)));\n//       } else {\n//         // Create new project\n//         const response = await fetch(\"http://localhost:5005/api/projects\", {\n//           method: \"POST\",\n//           headers: { \"Content-Type\": \"application/json\" },\n//           body: JSON.stringify({ ...formData, client_id: clientId }),\n//         });\n//         const newProject = await response.json();\n//         setProjects([...projects, newProject]);\n//       }\n//       setShowForm(false);\n//       setEditProject(null);\n//       form.resetFields();\n//       message.success(\"Project saved successfully\");\n//     } catch (error) {\n//       message.error(\"Error saving project\");\n//     }\n//   };\n\n//   const handleClientUpdate = async () => {\n//     try {\n//       const formData = await clientForm.validateFields();\n//       await fetch(`http://localhost:5005/api/client/${clientId}`, {\n//         method: \"PUT\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify(formData),\n//       });\n//       setClient(formData);\n//       setShowEditClientForm(false);\n//       message.success(\"Client details updated successfully\");\n//     } catch (error) {\n//       message.error(\"Error updating client details\");\n//     }\n//   };\n\n//   if (loading) return <Spin size=\"large\" style={{ display: \"block\", margin: \"auto\" }} />;\n//   if (error) return <Alert message={error} type=\"error\" showIcon />;\n//   if (!client) return <Typography>Loading...</Typography>;\n\n//   return (\n//     <div style={{ padding: \"24px\" }}>\n//       <Card>\n//         <Title level={3}>\n//           {client.client_name} <EditOutlined onClick={() => setShowEditClientForm(true)} style={{ cursor: \"pointer\", marginLeft: 10 }} />\n//         </Title>\n//         <Table\n//           dataSource={projects}\n//           rowKey=\"_id\"\n//           columns={[\n//             { title: \"Project Name\", dataIndex: \"project_name\" },\n//             { title: \"Description\", dataIndex: \"description\" },\n//             { title: \"Start Date\", dataIndex: \"start_date\", render: (date) => new Date(date).toLocaleDateString() },\n//             { title: \"End Date\", dataIndex: \"end_date\", render: (date) => new Date(date).toLocaleDateString() },\n//             { title: \"Budget\", dataIndex: \"budget\" },\n//             {\n//               title: \"Actions\",\n//               render: (_, record) => (\n//                 <Button icon={<EditOutlined />} onClick={() => { setEditProject(record); setShowForm(true); form.setFieldsValue(record); }} />\n//               ),\n//             },\n//           ]}\n//         />\n//         <Button type=\"primary\" icon={<PlusOutlined />} onClick={() => { setEditProject(null); setShowForm(true); }} style={{ marginTop: \"20px\" }}>\n//           Add New Project\n//         </Button>\n//       </Card>\n\n//       <Modal title=\"Edit Client Details\" open={showEditClientForm} onCancel={() => setShowEditClientForm(false)} onOk={handleClientUpdate}>\n//         <Form form={clientForm} layout=\"vertical\">\n//           <Form.Item name=\"client_name\" label=\"Client Name\" rules={[{ required: true, message: \"Please enter a client name\" }]}> <Input /> </Form.Item>\n//           <Form.Item name=\"client_email\" label=\"Client Email\" rules={[{ required: true, message: \"Please enter a valid email\" }]}> <Input type=\"email\" /> </Form.Item>\n//         </Form>\n//       </Modal>\n\n//       <Modal\n//         title={editProject ? \"Edit Project\" : \"Create a New Project\"}\n//         open={showForm}\n//         onCancel={() => setShowForm(false)}\n//         onOk={handleFormSubmit}\n//         okText={editProject ? \"Update Project\" : \"Create Project\"}\n//       >\n//         <Form form={form} layout=\"vertical\">\n//           <Form.Item name=\"project_name\" label=\"Project Name\" rules={[{ required: true, message: \"Please enter a project name\" }]}> <Input /> </Form.Item>\n//           <Form.Item name=\"description\" label=\"Description\"> <Input.TextArea /> </Form.Item>\n//           <Form.Item name=\"start_date\" label=\"Start Date\" rules={[{ required: true, message: \"Please select a start date\" }]}> <Input type=\"date\" /> </Form.Item>\n//           <Form.Item name=\"end_date\" label=\"End Date\" rules={[{ required: true, message: \"Please select an end date\" }]}> <Input type=\"date\" /> </Form.Item>\n//           <Form.Item name=\"budget\" label=\"Budget\"> <Input type=\"number\" /> </Form.Item>\n//         </Form>\n//       </Modal>\n//     </div>\n//   );\n// };\n\n// export default ClientProfile;\nvar _c;\n$RefreshReg$(_c, \"ClientProfile\");","map":{"version":3,"names":["React","useState","useEffect","useParams","Button","Card","TextField","Typography","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","Modal","axios","jsxDEV","_jsxDEV","ClientProfile","_s","clientId","client","setClient","projects","setProjects","error","setError","showForm","setShowForm","formData","setFormData","project_name","description","start_date","end_date","budget","client_id","fetchClientDetails","response","get","data","err","fetchClientProjects","handleFormChange","e","name","value","target","handleFormSubmit","preventDefault","post","console","color","children","fileName","_jsxFileName","lineNumber","columnNumber","style","padding","variant","align","gutterBottom","client_name","length","component","map","project","Date","toLocaleDateString","_id","onClick","marginTop","open","onClose","maxWidth","margin","onSubmit","fullWidth","label","onChange","required","multiline","type","InputLabelProps","shrink","_c","$RefreshReg$"],"sources":["/Users/harshitrishav/Demo/jwt-auth-frontend/src/components/ContractManagement.js"],"sourcesContent":["\n// import React, { useState, useEffect } from \"react\";\n// import { useParams } from \"react-router-dom\";\n// import axios from \"axios\";\n// import \"../App.css\";\n\n// const ClientProfile = () => {\n//   const { clientId } = useParams(); // Get the clientId from the URL params\n//   const [client, setClient] = useState(null);\n//   const [projects, setProjects] = useState([]); // State to store projects\n//   const [error, setError] = useState(\"\");\n//   const [showForm, setShowForm] = useState(false); // Toggle form visibility\n//   const [formData, setFormData] = useState({\n//     project_name: \"\",\n//     description: \"\",\n//     start_date: \"\",\n//     end_date: \"\",\n//     budget: \"\",\n//     client_id: clientId,\n//   });\n\n//   useEffect(() => {\n//     const fetchClientDetails = async () => {\n//       try {\n//         const response = await axios.get(`http://localhost:5005/api/client/${clientId}`);\n//         setClient(response.data);\n//       } catch (err) {\n//         setError(\"Failed to load client details.\");\n//       }\n//     };\n\n//     const fetchClientProjects = async () => {\n//       try {\n//         const response = await axios.get(`http://localhost:5005/api/projects/${clientId}`);\n//         // Make sure team_members is always an array\n//         const updatedProjects = response.data.map((project) => ({\n//           ...project,\n//           team_members: Array.isArray(project.team_members) ? project.team_members : [],\n//         }));\n//         setProjects(updatedProjects);\n//       } catch (err) {\n//         setError(\"Failed to load projects.\");\n//       }\n//     };\n\n//     fetchClientDetails();\n//     fetchClientProjects();\n//   }, [clientId]);\n\n//   const handleFormChange = (e) => {\n//     const { name, value } = e.target;\n\n//     setFormData({\n//       ...formData,\n//       [name]: value,\n//     });\n//   };\n\n//   const handleFormSubmit = async (e) => {\n//     e.preventDefault();\n//     try {\n//       const response = await axios.post(\"http://localhost:5005/api/projects\", formData);\n//       setProjects([...projects, response.data]); // Add new project to the list\n//       setShowForm(false); // Hide form after submission\n//       console.log(response.data); // Handle the response data (e.g., display success message)\n//     } catch (error) {\n//       console.error(\"Error submitting form:\", error);\n//     }\n//   };\n\n//   if (error) {\n//     return <div>{error}</div>;\n//   }\n\n//   if (!client) {\n//     return <div>Loading...</div>;\n//   }\n\n//   return (\n//     <div>\n//       <h1 style={{ textAlign: \"center\" }}>Projects for {client.client_name}</h1>\n\n//       {/* Display Projects in Table Format */}\n//       <h2>Projects</h2>\n//       {projects.length === 0 ? (\n//         <p>No projects found for this client.</p>\n//       ) : (\n//         <table className=\"project-table\">\n//           <thead>\n//             <tr>\n//               <th>Project Name</th>\n//               <th>Description</th>\n//               <th>Start Date</th>\n//               <th>End Date</th>\n//               <th>Budget</th>\n//               <th>Team Members</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {projects.map((project) => (\n//               <tr key={project._id}>\n//                 <td>{project.project_name}</td>\n//                 <td>{project.description}</td>\n//                 <td>{new Date(project.start_date).toLocaleDateString()}</td>\n//                 <td>{new Date(project.end_date).toLocaleDateString()}</td>\n//                 <td>{project.budget}</td>\n//                 <td>{(project.team_members || []).join(\", \")}</td>\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       )}\n\n//       <div className=\"client-profile-card\">\n//         {/* Button to Show/Hide Form */}\n//         <button onClick={() => setShowForm(!showForm)}>\n//           {showForm ? \"Cancel\" : \"Add New Project\"}\n//         </button>\n\n//         {/* Project Creation Form */}\n//         {showForm && (\n//           <div className=\"project-form\">\n//           <h2>Create a New Project</h2>\n//           <form onSubmit={handleFormSubmit}>\n//             <div>\n//               <label>Project Name</label>\n//               <input\n//                 type=\"text\"\n//                 name=\"project_name\"\n//                 value={formData.project_name}\n//                 onChange={handleFormChange}\n//                 required\n//               />\n//             </div>\n//             <div>\n//               <label>Description</label>\n//               <textarea\n//                 name=\"description\"\n//                 value={formData.description}\n//                 onChange={handleFormChange}\n//                 className=\"description-input\"\n//               />\n//             </div>\n//             <div>\n//               <label>Start Date</label>\n//               <input\n//                 type=\"date\"\n//                 name=\"start_date\"\n//                 value={formData.start_date}\n//                 onChange={handleFormChange}\n//                 className=\"date-input\"\n//               />\n//             </div>\n//             <div>\n//               <label>End Date</label>\n//               <input\n//                 type=\"date\"\n//                 name=\"end_date\"\n//                 value={formData.end_date}\n//                 onChange={handleFormChange}\n//                 className=\"date-input\"\n//               />\n//             </div>\n//             <div>\n//               <label>Budget</label>\n//               <input\n//                 type=\"number\"\n//                 name=\"budget\"\n//                 value={formData.budget}\n//                 onChange={handleFormChange}\n//               />\n//             </div>\n//             <div>\n//               <button type=\"submit\">Create Project</button>\n//             </div>\n//           </form>\n//         </div>\n        \n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ClientProfile;\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport {\n  Button,\n  Card,\n  TextField,\n  Typography,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  Modal,\n} from \"@mui/material\";\nimport axios from \"axios\";\n\nconst ClientProfile = () => {\n  const { clientId } = useParams();\n  const [client, setClient] = useState(null);\n  const [projects, setProjects] = useState([]);\n  const [error, setError] = useState(\"\");\n  const [showForm, setShowForm] = useState(false);\n  const [formData, setFormData] = useState({\n    project_name: \"\",\n    description: \"\",\n    start_date: \"\",\n    end_date: \"\",\n    budget: \"\",\n    client_id: clientId,\n  });\n\n  useEffect(() => {\n    const fetchClientDetails = async () => {\n      try {\n        const response = await axios.get(`http://localhost:5005/api/client/${clientId}`);\n        setClient(response.data);\n      } catch (err) {\n        setError(\"Failed to load client details.\");\n      }\n    };\n\n    const fetchClientProjects = async () => {\n      try {\n        const response = await axios.get(`http://localhost:5005/api/projects/${clientId}`);\n        setProjects(response.data);\n      } catch (err) {\n        setError(\"Failed to load projects.\");\n      }\n    };\n\n    fetchClientDetails();\n    fetchClientProjects();\n  }, [clientId]);\n\n  const handleFormChange = (e) => {\n    const { name, value } = e.target;\n    setFormData({\n      ...formData,\n      [name]: value,\n    });\n  };\n\n  const handleFormSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      const response = await axios.post(\"http://localhost:5005/api/projects\", formData);\n      setProjects([...projects, response.data]);\n      setShowForm(false);\n    } catch (error) {\n      console.error(\"Error submitting form:\", error);\n    }\n  };\n\n  if (error) {\n    return <Typography color=\"error\">{error}</Typography>;\n  }\n\n  if (!client) {\n    return <Typography>Loading...</Typography>;\n  }\n\n  return (\n    <div style={{ padding: \"24px\" }}>\n      <Typography variant=\"h4\" align=\"center\" gutterBottom>\n        Projects for {client.client_name}\n      </Typography>\n      <Card style={{ padding: \"20px\" }}>\n        {/* <Typography variant=\"h5\">Projects</Typography> */}\n        {projects.length === 0 ? (\n          <Typography>No projects found for this client.</Typography>\n        ) : (\n          <TableContainer component={Paper}>\n            <Table>\n              <TableHead>\n                <TableRow>\n                  <TableCell>Project Name</TableCell>\n                  <TableCell>Description</TableCell>\n                  <TableCell>Start Date</TableCell>\n                  <TableCell>End Date</TableCell>\n                  <TableCell>Budget</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {projects.map((project) => (\n                  <TableRow key={project._id}>\n                    <TableCell>{project.project_name}</TableCell>\n                    <TableCell>{project.description}</TableCell>\n                    <TableCell>{new Date(project.start_date).toLocaleDateString()}</TableCell>\n                    <TableCell>{new Date(project.end_date).toLocaleDateString()}</TableCell>\n                    <TableCell>{project.budget}</TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        )}\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={() => setShowForm(!showForm)}\n          style={{ marginTop: \"20px\" }}\n        >\n          {showForm ? \"Cancel\" : \"Add New Project\"}\n        </Button>\n        <Modal open={showForm} onClose={() => setShowForm(false)}>\n          <Card style={{ padding: \"20px\", maxWidth: \"500px\", margin: \"auto\", marginTop: \"10%\" }}>\n            <Typography variant=\"h6\" gutterBottom>\n              Create a New Project\n            </Typography>\n            <form onSubmit={handleFormSubmit}>\n              <TextField\n                fullWidth\n                label=\"Project Name\"\n                name=\"project_name\"\n                value={formData.project_name}\n                onChange={handleFormChange}\n                margin=\"normal\"\n                required\n              />\n              <TextField\n                fullWidth\n                label=\"Description\"\n                name=\"description\"\n                value={formData.description}\n                onChange={handleFormChange}\n                margin=\"normal\"\n                multiline\n              />\n              <TextField\n                fullWidth\n                label=\"Start Date\"\n                type=\"date\"\n                name=\"start_date\"\n                value={formData.start_date}\n                onChange={handleFormChange}\n                margin=\"normal\"\n                InputLabelProps={{ shrink: true }}\n              />\n              <TextField\n                fullWidth\n                label=\"End Date\"\n                type=\"date\"\n                name=\"end_date\"\n                value={formData.end_date}\n                onChange={handleFormChange}\n                margin=\"normal\"\n                InputLabelProps={{ shrink: true }}\n              />\n              <TextField\n                fullWidth\n                label=\"Budget\"\n                type=\"number\"\n                name=\"budget\"\n                value={formData.budget}\n                onChange={handleFormChange}\n                margin=\"normal\"\n              />\n              <Button variant=\"contained\" color=\"primary\" type=\"submit\" style={{ marginTop: \"20px\" }}>\n                Create Project\n              </Button>\n            </form>\n          </Card>\n        </Modal>\n      </Card>\n    </div>\n  );\n};\n\nexport default ClientProfile;\n// import React, { useEffect, useState } from \"react\";\n// import { useParams } from \"react-router-dom\";\n// import { Button, Table, Modal, Input, Form, Typography, message, Spin, Card, Alert } from \"antd\";\n// import { EditOutlined, PlusOutlined } from \"@ant-design/icons\";\n// import \"antd/dist/reset.css\";\n\n// const { Title } = Typography;\n\n// const ClientProfile = () => {\n//   const { clientId } = useParams();\n//   const [client, setClient] = useState(null);\n//   const [projects, setProjects] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [showForm, setShowForm] = useState(false);\n//   const [showEditClientForm, setShowEditClientForm] = useState(false);\n//   const [editProject, setEditProject] = useState(null);\n//   const [form] = Form.useForm();\n//   const [clientForm] = Form.useForm();\n\n//   useEffect(() => {\n//     const fetchClientDetails = async () => {\n//       try {\n//         const response = await fetch(`http://localhost:5005/api/client/${clientId}`);\n//         const data = await response.json();\n//         setClient(data);\n//         clientForm.setFieldsValue(data);\n//       } catch (err) {\n//         setError(\"Failed to load client details.\");\n//       }\n//     };\n\n//     const fetchClientProjects = async () => {\n//       try {\n//         const response = await fetch(`http://localhost:5005/api/projects/${clientId}`);\n//         const data = await response.json();\n//         setProjects(data);\n//       } catch (err) {\n//         setError(\"Failed to load projects.\");\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchClientDetails();\n//     fetchClientProjects();\n//   }, [clientId]);\n\n//   const handleFormSubmit = async () => {\n//     try {\n//       const formData = await form.validateFields();\n//       if (editProject) {\n//         // Update project\n//         await fetch(`http://localhost:5005/api/projects/${editProject._id}`, {\n//           method: \"PUT\",\n//           headers: { \"Content-Type\": \"application/json\" },\n//           body: JSON.stringify(formData),\n//         });\n//         setProjects(projects.map((p) => (p._id === editProject._id ? { ...p, ...formData } : p)));\n//       } else {\n//         // Create new project\n//         const response = await fetch(\"http://localhost:5005/api/projects\", {\n//           method: \"POST\",\n//           headers: { \"Content-Type\": \"application/json\" },\n//           body: JSON.stringify({ ...formData, client_id: clientId }),\n//         });\n//         const newProject = await response.json();\n//         setProjects([...projects, newProject]);\n//       }\n//       setShowForm(false);\n//       setEditProject(null);\n//       form.resetFields();\n//       message.success(\"Project saved successfully\");\n//     } catch (error) {\n//       message.error(\"Error saving project\");\n//     }\n//   };\n\n//   const handleClientUpdate = async () => {\n//     try {\n//       const formData = await clientForm.validateFields();\n//       await fetch(`http://localhost:5005/api/client/${clientId}`, {\n//         method: \"PUT\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify(formData),\n//       });\n//       setClient(formData);\n//       setShowEditClientForm(false);\n//       message.success(\"Client details updated successfully\");\n//     } catch (error) {\n//       message.error(\"Error updating client details\");\n//     }\n//   };\n\n//   if (loading) return <Spin size=\"large\" style={{ display: \"block\", margin: \"auto\" }} />;\n//   if (error) return <Alert message={error} type=\"error\" showIcon />;\n//   if (!client) return <Typography>Loading...</Typography>;\n\n//   return (\n//     <div style={{ padding: \"24px\" }}>\n//       <Card>\n//         <Title level={3}>\n//           {client.client_name} <EditOutlined onClick={() => setShowEditClientForm(true)} style={{ cursor: \"pointer\", marginLeft: 10 }} />\n//         </Title>\n//         <Table\n//           dataSource={projects}\n//           rowKey=\"_id\"\n//           columns={[\n//             { title: \"Project Name\", dataIndex: \"project_name\" },\n//             { title: \"Description\", dataIndex: \"description\" },\n//             { title: \"Start Date\", dataIndex: \"start_date\", render: (date) => new Date(date).toLocaleDateString() },\n//             { title: \"End Date\", dataIndex: \"end_date\", render: (date) => new Date(date).toLocaleDateString() },\n//             { title: \"Budget\", dataIndex: \"budget\" },\n//             {\n//               title: \"Actions\",\n//               render: (_, record) => (\n//                 <Button icon={<EditOutlined />} onClick={() => { setEditProject(record); setShowForm(true); form.setFieldsValue(record); }} />\n//               ),\n//             },\n//           ]}\n//         />\n//         <Button type=\"primary\" icon={<PlusOutlined />} onClick={() => { setEditProject(null); setShowForm(true); }} style={{ marginTop: \"20px\" }}>\n//           Add New Project\n//         </Button>\n//       </Card>\n\n//       <Modal title=\"Edit Client Details\" open={showEditClientForm} onCancel={() => setShowEditClientForm(false)} onOk={handleClientUpdate}>\n//         <Form form={clientForm} layout=\"vertical\">\n//           <Form.Item name=\"client_name\" label=\"Client Name\" rules={[{ required: true, message: \"Please enter a client name\" }]}> <Input /> </Form.Item>\n//           <Form.Item name=\"client_email\" label=\"Client Email\" rules={[{ required: true, message: \"Please enter a valid email\" }]}> <Input type=\"email\" /> </Form.Item>\n//         </Form>\n//       </Modal>\n\n//       <Modal\n//         title={editProject ? \"Edit Project\" : \"Create a New Project\"}\n//         open={showForm}\n//         onCancel={() => setShowForm(false)}\n//         onOk={handleFormSubmit}\n//         okText={editProject ? \"Update Project\" : \"Create Project\"}\n//       >\n//         <Form form={form} layout=\"vertical\">\n//           <Form.Item name=\"project_name\" label=\"Project Name\" rules={[{ required: true, message: \"Please enter a project name\" }]}> <Input /> </Form.Item>\n//           <Form.Item name=\"description\" label=\"Description\"> <Input.TextArea /> </Form.Item>\n//           <Form.Item name=\"start_date\" label=\"Start Date\" rules={[{ required: true, message: \"Please select a start date\" }]}> <Input type=\"date\" /> </Form.Item>\n//           <Form.Item name=\"end_date\" label=\"End Date\" rules={[{ required: true, message: \"Please select an end date\" }]}> <Input type=\"date\" /> </Form.Item>\n//           <Form.Item name=\"budget\" label=\"Budget\"> <Input type=\"number\" /> </Form.Item>\n//         </Form>\n//       </Modal>\n//     </div>\n//   );\n// };\n\n// export default ClientProfile;\n"],"mappings":";;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,SACEC,MAAM,EACNC,IAAI,EACJC,SAAS,EACTC,UAAU,EACVC,KAAK,EACLC,SAAS,EACTC,SAAS,EACTC,cAAc,EACdC,SAAS,EACTC,QAAQ,EACRC,KAAK,EACLC,KAAK,QACA,eAAe;AACtB,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM;IAAE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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}