{"ast":null,"code":"var _jsxFileName = \"/Users/harshitrishav/Demo/jwt-auth-frontend/src/components/ContractManagement.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport axios from \"axios\";\nimport \"../App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ClientProfile = () => {\n  _s();\n  const {\n    clientId\n  } = useParams();\n  const [client, setClient] = useState(null);\n  const [projects, setProjects] = useState([]);\n  const [error, setError] = useState(\"\");\n  const [showForm, setShowForm] = useState(false);\n  const [formData, setFormData] = useState({\n    project_name: \"\",\n    description: \"\",\n    start_date: \"\",\n    end_date: \"\",\n    budget: \"\",\n    client_id: clientId\n  });\n  useEffect(() => {\n    const fetchClientDetails = async () => {\n      try {\n        const response = await axios.get(`http://localhost:5005/api/client/${clientId}`);\n        setClient(response.data);\n      } catch (err) {\n        setError(\"Failed to load client details.\");\n      }\n    };\n    const fetchClientProjects = async () => {\n      try {\n        const response = await axios.get(`http://localhost:5005/api/projects/${clientId}`);\n        const updatedProjects = response.data.map(project => ({\n          ...project,\n          team_members: Array.isArray(project.team_members) ? project.team_members : []\n        }));\n        setProjects(updatedProjects);\n      } catch (err) {\n        setError(\"Failed to load projects.\");\n      }\n    };\n    fetchClientDetails();\n    fetchClientProjects();\n  }, [clientId]);\n  const handleFormChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData({\n      ...formData,\n      [name]: value\n    });\n  };\n  const handleFormSubmit = async e => {\n    e.preventDefault();\n    try {\n      const response = await axios.post(\"http://localhost:5005/api/projects\", formData);\n      setProjects([...projects, response.data]);\n      setShowForm(false);\n      setFormData({\n        project_name: \"\",\n        description: \"\",\n        start_date: \"\",\n        end_date: \"\",\n        budget: \"\",\n        client_id: clientId\n      });\n    } catch (error) {\n      console.error(\"Error submitting form:\", error);\n    }\n  };\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 12\n    }, this);\n  }\n  if (!client) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"client-profile-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"client-name\",\n      children: `Projects for ${client.client_name}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"projects-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"section-heading\",\n        children: \"Projects\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), projects.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"no-projects-message\",\n        children: \"No projects found for this client.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"project-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Project Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Start Date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"End Date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Budget\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Team Members\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: projects.map(project => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: project.project_name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: project.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: new Date(project.start_date).toLocaleDateString()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: new Date(project.end_date).toLocaleDateString()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: project.budget\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: (project.team_members || []).join(\", \")\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 19\n            }, this)]\n          }, project._id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"toggle-button\",\n        onClick: () => setShowForm(!showForm),\n        children: showForm ? \"Cancel\" : \"Add New Project\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), showForm && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"project-form-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Create a New Project\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleFormSubmit,\n          className: \"project-form\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-field\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"project_name\",\n              children: \"Project Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"project_name\",\n              value: formData.project_name,\n              onChange: handleFormChange,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-field\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"description\",\n              children: \"Description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n              name: \"description\",\n              value: formData.description,\n              onChange: handleFormChange,\n              className: \"description-input\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-field\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"start_date\",\n              children: \"Start Date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"date\",\n              name: \"start_date\",\n              value: formData.start_date,\n              onChange: handleFormChange,\n              className: \"date-input\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-field\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"end_date\",\n              children: \"End Date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"date\",\n              name: \"end_date\",\n              value: formData.end_date,\n              onChange: handleFormChange,\n              className: \"date-input\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-field\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"budget\",\n              children: \"Budget\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              name: \"budget\",\n              value: formData.budget,\n              onChange: handleFormChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-field\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              className: \"submit-button\",\n              children: \"Create Project\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n_s(ClientProfile, \"F9UIPMZ4uOsEyznTnMDvT2CCuJw=\", false, function () {\n  return [useParams];\n});\n_c = ClientProfile;\nexport default ClientProfile;\n\n// import React, { useState, useEffect } from \"react\";\n// import { useParams } from \"react-router-dom\";\n// import {\n//   Button,\n//   Card,\n//   TextField,\n//   Typography,\n//   Table,\n//   TableBody,\n//   TableCell,\n//   TableContainer,\n//   TableHead,\n//   TableRow,\n//   Paper,\n//   Modal,\n// } from \"@mui/material\";\n// import axios from \"axios\";\n\n// const ClientProfile = () => {\n//   const { clientId } = useParams();\n//   const [client, setClient] = useState(null);\n//   const [projects, setProjects] = useState([]);\n//   const [error, setError] = useState(\"\");\n//   const [showForm, setShowForm] = useState(false);\n//   const [formData, setFormData] = useState({\n//     project_name: \"\",\n//     description: \"\",\n//     start_date: \"\",\n//     end_date: \"\",\n//     budget: \"\",\n//     client_id: clientId,\n//   });\n\n//   useEffect(() => {\n//     const fetchClientDetails = async () => {\n//       try {\n//         const response = await axios.get(`http://localhost:5005/api/client/${clientId}`);\n//         setClient(response.data);\n//       } catch (err) {\n//         setError(\"Failed to load client details.\");\n//       }\n//     };\n\n//     const fetchClientProjects = async () => {\n//       try {\n//         const response = await axios.get(`http://localhost:5005/api/projects/${clientId}`);\n//         setProjects(response.data);\n//       } catch (err) {\n//         setError(\"Failed to load projects.\");\n//       }\n//     };\n\n//     fetchClientDetails();\n//     fetchClientProjects();\n//   }, [clientId]);\n\n//   const handleFormChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData({\n//       ...formData,\n//       [name]: value,\n//     });\n//   };\n\n//   const handleFormSubmit = async (e) => {\n//     e.preventDefault();\n//     try {\n//       const response = await axios.post(\"http://localhost:5005/api/projects\", formData);\n//       setProjects([...projects, response.data]);\n//       setShowForm(false);\n//     } catch (error) {\n//       console.error(\"Error submitting form:\", error);\n//     }\n//   };\n\n//   if (error) {\n//     return <Typography color=\"error\">{error}</Typography>;\n//   }\n\n//   if (!client) {\n//     return <Typography>Loading...</Typography>;\n//   }\n\n//   return (\n//     <div style={{ padding: \"24px\" }}>\n//       <Typography variant=\"h4\" align=\"center\" gutterBottom>\n//         Projects for {client.client_name}\n//       </Typography>\n//       <Card style={{ padding: \"20px\" }}>\n//         {/* <Typography variant=\"h5\">Projects</Typography> */}\n//         {projects.length === 0 ? (\n//           <Typography>No projects found for this client.</Typography>\n//         ) : (\n//           <TableContainer component={Paper}>\n//             <Table>\n//               <TableHead>\n//                 <TableRow>\n//                   <TableCell>Project Name</TableCell>\n//                   <TableCell>Description</TableCell>\n//                   <TableCell>Start Date</TableCell>\n//                   <TableCell>End Date</TableCell>\n//                   <TableCell>Budget</TableCell>\n//                 </TableRow>\n//               </TableHead>\n//               <TableBody>\n//                 {projects.map((project) => (\n//                   <TableRow key={project._id}>\n//                     <TableCell>{project.project_name}</TableCell>\n//                     <TableCell>{project.description}</TableCell>\n//                     <TableCell>{new Date(project.start_date).toLocaleDateString()}</TableCell>\n//                     <TableCell>{new Date(project.end_date).toLocaleDateString()}</TableCell>\n//                     <TableCell>{project.budget}</TableCell>\n//                   </TableRow>\n//                 ))}\n//               </TableBody>\n//             </Table>\n//           </TableContainer>\n//         )}\n//         <Button\n//           variant=\"contained\"\n//           color=\"primary\"\n//           onClick={() => setShowForm(!showForm)}\n//           style={{ marginTop: \"20px\" }}\n//         >\n//           {showForm ? \"Cancel\" : \"Add New Project\"}\n//         </Button>\n//         <Modal open={showForm} onClose={() => setShowForm(false)}>\n//           <Card style={{ padding: \"20px\", maxWidth: \"500px\", margin: \"auto\", marginTop: \"10%\" }}>\n//             <Typography variant=\"h6\" gutterBottom>\n//               Create a New Project\n//             </Typography>\n//             <form onSubmit={handleFormSubmit}>\n//               <TextField\n//                 fullWidth\n//                 label=\"Project Name\"\n//                 name=\"project_name\"\n//                 value={formData.project_name}\n//                 onChange={handleFormChange}\n//                 margin=\"normal\"\n//                 required\n//               />\n//               <TextField\n//                 fullWidth\n//                 label=\"Description\"\n//                 name=\"description\"\n//                 value={formData.description}\n//                 onChange={handleFormChange}\n//                 margin=\"normal\"\n//                 multiline\n//               />\n//               <TextField\n//                 fullWidth\n//                 label=\"Start Date\"\n//                 type=\"date\"\n//                 name=\"start_date\"\n//                 value={formData.start_date}\n//                 onChange={handleFormChange}\n//                 margin=\"normal\"\n//                 InputLabelProps={{ shrink: true }}\n//               />\n//               <TextField\n//                 fullWidth\n//                 label=\"End Date\"\n//                 type=\"date\"\n//                 name=\"end_date\"\n//                 value={formData.end_date}\n//                 onChange={handleFormChange}\n//                 margin=\"normal\"\n//                 InputLabelProps={{ shrink: true }}\n//               />\n//               <TextField\n//                 fullWidth\n//                 label=\"Budget\"\n//                 type=\"number\"\n//                 name=\"budget\"\n//                 value={formData.budget}\n//                 onChange={handleFormChange}\n//                 margin=\"normal\"\n//               />\n//               <Button variant=\"contained\" color=\"primary\" type=\"submit\" style={{ marginTop: \"20px\" }}>\n//                 Create Project\n//               </Button>\n//             </form>\n//           </Card>\n//         </Modal>\n//       </Card>\n//     </div>\n//   );\n// };\n\n// export default ClientProfile;\n// import React, { useEffect, useState } from \"react\";\n// import { useParams } from \"react-router-dom\";\n// import { Button, Table, Modal, Input, Form, Typography, message, Spin, Card, Alert } from \"antd\";\n// import { EditOutlined, PlusOutlined } from \"@ant-design/icons\";\n// import \"antd/dist/reset.css\";\n\n// const { Title } = Typography;\n\n// const ClientProfile = () => {\n//   const { clientId } = useParams();\n//   const [client, setClient] = useState(null);\n//   const [projects, setProjects] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [showForm, setShowForm] = useState(false);\n//   const [showEditClientForm, setShowEditClientForm] = useState(false);\n//   const [editProject, setEditProject] = useState(null);\n//   const [form] = Form.useForm();\n//   const [clientForm] = Form.useForm();\n\n//   useEffect(() => {\n//     const fetchClientDetails = async () => {\n//       try {\n//         const response = await fetch(`http://localhost:5005/api/client/${clientId}`);\n//         const data = await response.json();\n//         setClient(data);\n//         clientForm.setFieldsValue(data);\n//       } catch (err) {\n//         setError(\"Failed to load client details.\");\n//       }\n//     };\n\n//     const fetchClientProjects = async () => {\n//       try {\n//         const response = await fetch(`http://localhost:5005/api/projects/${clientId}`);\n//         const data = await response.json();\n//         setProjects(data);\n//       } catch (err) {\n//         setError(\"Failed to load projects.\");\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchClientDetails();\n//     fetchClientProjects();\n//   }, [clientId]);\n\n//   const handleFormSubmit = async () => {\n//     try {\n//       const formData = await form.validateFields();\n//       if (editProject) {\n//         // Update project\n//         await fetch(`http://localhost:5005/api/projects/${editProject._id}`, {\n//           method: \"PUT\",\n//           headers: { \"Content-Type\": \"application/json\" },\n//           body: JSON.stringify(formData),\n//         });\n//         setProjects(projects.map((p) => (p._id === editProject._id ? { ...p, ...formData } : p)));\n//       } else {\n//         // Create new project\n//         const response = await fetch(\"http://localhost:5005/api/projects\", {\n//           method: \"POST\",\n//           headers: { \"Content-Type\": \"application/json\" },\n//           body: JSON.stringify({ ...formData, client_id: clientId }),\n//         });\n//         const newProject = await response.json();\n//         setProjects([...projects, newProject]);\n//       }\n//       setShowForm(false);\n//       setEditProject(null);\n//       form.resetFields();\n//       message.success(\"Project saved successfully\");\n//     } catch (error) {\n//       message.error(\"Error saving project\");\n//     }\n//   };\n\n//   const handleClientUpdate = async () => {\n//     try {\n//       const formData = await clientForm.validateFields();\n//       await fetch(`http://localhost:5005/api/client/${clientId}`, {\n//         method: \"PUT\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify(formData),\n//       });\n//       setClient(formData);\n//       setShowEditClientForm(false);\n//       message.success(\"Client details updated successfully\");\n//     } catch (error) {\n//       message.error(\"Error updating client details\");\n//     }\n//   };\n\n//   if (loading) return <Spin size=\"large\" style={{ display: \"block\", margin: \"auto\" }} />;\n//   if (error) return <Alert message={error} type=\"error\" showIcon />;\n//   if (!client) return <Typography>Loading...</Typography>;\n\n//   return (\n//     <div style={{ padding: \"24px\" }}>\n//       <Card>\n//         <Title level={3}>\n//           {client.client_name} <EditOutlined onClick={() => setShowEditClientForm(true)} style={{ cursor: \"pointer\", marginLeft: 10 }} />\n//         </Title>\n//         <Table\n//           dataSource={projects}\n//           rowKey=\"_id\"\n//           columns={[\n//             { title: \"Project Name\", dataIndex: \"project_name\" },\n//             { title: \"Description\", dataIndex: \"description\" },\n//             { title: \"Start Date\", dataIndex: \"start_date\", render: (date) => new Date(date).toLocaleDateString() },\n//             { title: \"End Date\", dataIndex: \"end_date\", render: (date) => new Date(date).toLocaleDateString() },\n//             { title: \"Budget\", dataIndex: \"budget\" },\n//             {\n//               title: \"Actions\",\n//               render: (_, record) => (\n//                 <Button icon={<EditOutlined />} onClick={() => { setEditProject(record); setShowForm(true); form.setFieldsValue(record); }} />\n//               ),\n//             },\n//           ]}\n//         />\n//         <Button type=\"primary\" icon={<PlusOutlined />} onClick={() => { setEditProject(null); setShowForm(true); }} style={{ marginTop: \"20px\" }}>\n//           Add New Project\n//         </Button>\n//       </Card>\n\n//       <Modal title=\"Edit Client Details\" open={showEditClientForm} onCancel={() => setShowEditClientForm(false)} onOk={handleClientUpdate}>\n//         <Form form={clientForm} layout=\"vertical\">\n//           <Form.Item name=\"client_name\" label=\"Client Name\" rules={[{ required: true, message: \"Please enter a client name\" }]}> <Input /> </Form.Item>\n//           <Form.Item name=\"client_email\" label=\"Client Email\" rules={[{ required: true, message: \"Please enter a valid email\" }]}> <Input type=\"email\" /> </Form.Item>\n//         </Form>\n//       </Modal>\n\n//       <Modal\n//         title={editProject ? \"Edit Project\" : \"Create a New Project\"}\n//         open={showForm}\n//         onCancel={() => setShowForm(false)}\n//         onOk={handleFormSubmit}\n//         okText={editProject ? \"Update Project\" : \"Create Project\"}\n//       >\n//         <Form form={form} layout=\"vertical\">\n//           <Form.Item name=\"project_name\" label=\"Project Name\" rules={[{ required: true, message: \"Please enter a project name\" }]}> <Input /> </Form.Item>\n//           <Form.Item name=\"description\" label=\"Description\"> <Input.TextArea /> </Form.Item>\n//           <Form.Item name=\"start_date\" label=\"Start Date\" rules={[{ required: true, message: \"Please select a start date\" }]}> <Input type=\"date\" /> </Form.Item>\n//           <Form.Item name=\"end_date\" label=\"End Date\" rules={[{ required: true, message: \"Please select an end date\" }]}> <Input type=\"date\" /> </Form.Item>\n//           <Form.Item name=\"budget\" label=\"Budget\"> <Input type=\"number\" /> </Form.Item>\n//         </Form>\n//       </Modal>\n//     </div>\n//   );\n// };\n\n// export default ClientProfile;\nvar _c;\n$RefreshReg$(_c, \"ClientProfile\");","map":{"version":3,"names":["React","useState","useEffect","useParams","axios","jsxDEV","_jsxDEV","ClientProfile","_s","clientId","client","setClient","projects","setProjects","error","setError","showForm","setShowForm","formData","setFormData","project_name","description","start_date","end_date","budget","client_id","fetchClientDetails","response","get","data","err","fetchClientProjects","updatedProjects","map","project","team_members","Array","isArray","handleFormChange","e","name","value","target","handleFormSubmit","preventDefault","post","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","client_name","length","Date","toLocaleDateString","join","_id","onClick","onSubmit","htmlFor","type","onChange","required","_c","$RefreshReg$"],"sources":["/Users/harshitrishav/Demo/jwt-auth-frontend/src/components/ContractManagement.js"],"sourcesContent":["\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport axios from \"axios\";\nimport \"../App.css\";\n\nconst ClientProfile = () => {\n  const { clientId } = useParams();\n  const [client, setClient] = useState(null);\n  const [projects, setProjects] = useState([]);\n  const [error, setError] = useState(\"\");\n  const [showForm, setShowForm] = useState(false);\n  const [formData, setFormData] = useState({\n    project_name: \"\",\n    description: \"\",\n    start_date: \"\",\n    end_date: \"\",\n    budget: \"\",\n    client_id: clientId,\n  });\n\n  useEffect(() => {\n    const fetchClientDetails = async () => {\n      try {\n        const response = await axios.get(`http://localhost:5005/api/client/${clientId}`);\n        setClient(response.data);\n      } catch (err) {\n        setError(\"Failed to load client details.\");\n      }\n    };\n\n    const fetchClientProjects = async () => {\n      try {\n        const response = await axios.get(`http://localhost:5005/api/projects/${clientId}`);\n        const updatedProjects = response.data.map((project) => ({\n          ...project,\n          team_members: Array.isArray(project.team_members) ? project.team_members : [],\n        }));\n        setProjects(updatedProjects);\n      } catch (err) {\n        setError(\"Failed to load projects.\");\n      }\n    };\n\n    fetchClientDetails();\n    fetchClientProjects();\n  }, [clientId]);\n\n  const handleFormChange = (e) => {\n    const { name, value } = e.target;\n\n    setFormData({\n      ...formData,\n      [name]: value,\n    });\n  };\n\n  const handleFormSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      const response = await axios.post(\"http://localhost:5005/api/projects\", formData);\n      setProjects([...projects, response.data]);\n      setShowForm(false);\n      setFormData({\n        project_name: \"\",\n        description: \"\",\n        start_date: \"\",\n        end_date: \"\",\n        budget: \"\",\n        client_id: clientId,\n      });\n    } catch (error) {\n      console.error(\"Error submitting form:\", error);\n    }\n  };\n\n  if (error) {\n    return <div className=\"error-message\">{error}</div>;\n  }\n\n  if (!client) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div className=\"client-profile-container\">\n      <h1 className=\"client-name\">{`Projects for ${client.client_name}`}</h1>\n\n      <div className=\"projects-section\">\n        <h2 className=\"section-heading\">Projects</h2>\n        {projects.length === 0 ? (\n          <p className=\"no-projects-message\">No projects found for this client.</p>\n        ) : (\n          <table className=\"project-table\">\n            <thead>\n              <tr>\n                <th>Project Name</th>\n                <th>Description</th>\n                <th>Start Date</th>\n                <th>End Date</th>\n                <th>Budget</th>\n                <th>Team Members</th>\n              </tr>\n            </thead>\n            <tbody>\n              {projects.map((project) => (\n                <tr key={project._id}>\n                  <td>{project.project_name}</td>\n                  <td>{project.description}</td>\n                  <td>{new Date(project.start_date).toLocaleDateString()}</td>\n                  <td>{new Date(project.end_date).toLocaleDateString()}</td>\n                  <td>{project.budget}</td>\n                  <td>{(project.team_members || []).join(\", \")}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        )}\n      </div>\n\n      <div className=\"form-container\">\n        <button className=\"toggle-button\" onClick={() => setShowForm(!showForm)}>\n          {showForm ? \"Cancel\" : \"Add New Project\"}\n        </button>\n\n        {showForm && (\n          <div className=\"project-form-container\">\n            <h2>Create a New Project</h2>\n            <form onSubmit={handleFormSubmit} className=\"project-form\">\n              <div className=\"form-field\">\n                <label htmlFor=\"project_name\">Project Name</label>\n                <input\n                  type=\"text\"\n                  name=\"project_name\"\n                  value={formData.project_name}\n                  onChange={handleFormChange}\n                  required\n                />\n              </div>\n              <div className=\"form-field\">\n                <label htmlFor=\"description\">Description</label>\n                <textarea\n                  name=\"description\"\n                  value={formData.description}\n                  onChange={handleFormChange}\n                  className=\"description-input\"\n                />\n              </div>\n              <div className=\"form-field\">\n                <label htmlFor=\"start_date\">Start Date</label>\n                <input\n                  type=\"date\"\n                  name=\"start_date\"\n                  value={formData.start_date}\n                  onChange={handleFormChange}\n                  className=\"date-input\"\n                />\n              </div>\n              <div className=\"form-field\">\n                <label htmlFor=\"end_date\">End Date</label>\n                <input\n                  type=\"date\"\n                  name=\"end_date\"\n                  value={formData.end_date}\n                  onChange={handleFormChange}\n                  className=\"date-input\"\n                />\n              </div>\n              <div className=\"form-field\">\n                <label htmlFor=\"budget\">Budget</label>\n                <input\n                  type=\"number\"\n                  name=\"budget\"\n                  value={formData.budget}\n                  onChange={handleFormChange}\n                />\n              </div>\n              <div className=\"form-field\">\n                <button type=\"submit\" className=\"submit-button\">Create Project</button>\n              </div>\n            </form>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ClientProfile;\n\n// import React, { useState, useEffect } from \"react\";\n// import { useParams } from \"react-router-dom\";\n// import {\n//   Button,\n//   Card,\n//   TextField,\n//   Typography,\n//   Table,\n//   TableBody,\n//   TableCell,\n//   TableContainer,\n//   TableHead,\n//   TableRow,\n//   Paper,\n//   Modal,\n// } from \"@mui/material\";\n// import axios from \"axios\";\n\n// const ClientProfile = () => {\n//   const { clientId } = useParams();\n//   const [client, setClient] = useState(null);\n//   const [projects, setProjects] = useState([]);\n//   const [error, setError] = useState(\"\");\n//   const [showForm, setShowForm] = useState(false);\n//   const [formData, setFormData] = useState({\n//     project_name: \"\",\n//     description: \"\",\n//     start_date: \"\",\n//     end_date: \"\",\n//     budget: \"\",\n//     client_id: clientId,\n//   });\n\n//   useEffect(() => {\n//     const fetchClientDetails = async () => {\n//       try {\n//         const response = await axios.get(`http://localhost:5005/api/client/${clientId}`);\n//         setClient(response.data);\n//       } catch (err) {\n//         setError(\"Failed to load client details.\");\n//       }\n//     };\n\n//     const fetchClientProjects = async () => {\n//       try {\n//         const response = await axios.get(`http://localhost:5005/api/projects/${clientId}`);\n//         setProjects(response.data);\n//       } catch (err) {\n//         setError(\"Failed to load projects.\");\n//       }\n//     };\n\n//     fetchClientDetails();\n//     fetchClientProjects();\n//   }, [clientId]);\n\n//   const handleFormChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData({\n//       ...formData,\n//       [name]: value,\n//     });\n//   };\n\n//   const handleFormSubmit = async (e) => {\n//     e.preventDefault();\n//     try {\n//       const response = await axios.post(\"http://localhost:5005/api/projects\", formData);\n//       setProjects([...projects, response.data]);\n//       setShowForm(false);\n//     } catch (error) {\n//       console.error(\"Error submitting form:\", error);\n//     }\n//   };\n\n//   if (error) {\n//     return <Typography color=\"error\">{error}</Typography>;\n//   }\n\n//   if (!client) {\n//     return <Typography>Loading...</Typography>;\n//   }\n\n//   return (\n//     <div style={{ padding: \"24px\" }}>\n//       <Typography variant=\"h4\" align=\"center\" gutterBottom>\n//         Projects for {client.client_name}\n//       </Typography>\n//       <Card style={{ padding: \"20px\" }}>\n//         {/* <Typography variant=\"h5\">Projects</Typography> */}\n//         {projects.length === 0 ? (\n//           <Typography>No projects found for this client.</Typography>\n//         ) : (\n//           <TableContainer component={Paper}>\n//             <Table>\n//               <TableHead>\n//                 <TableRow>\n//                   <TableCell>Project Name</TableCell>\n//                   <TableCell>Description</TableCell>\n//                   <TableCell>Start Date</TableCell>\n//                   <TableCell>End Date</TableCell>\n//                   <TableCell>Budget</TableCell>\n//                 </TableRow>\n//               </TableHead>\n//               <TableBody>\n//                 {projects.map((project) => (\n//                   <TableRow key={project._id}>\n//                     <TableCell>{project.project_name}</TableCell>\n//                     <TableCell>{project.description}</TableCell>\n//                     <TableCell>{new Date(project.start_date).toLocaleDateString()}</TableCell>\n//                     <TableCell>{new Date(project.end_date).toLocaleDateString()}</TableCell>\n//                     <TableCell>{project.budget}</TableCell>\n//                   </TableRow>\n//                 ))}\n//               </TableBody>\n//             </Table>\n//           </TableContainer>\n//         )}\n//         <Button\n//           variant=\"contained\"\n//           color=\"primary\"\n//           onClick={() => setShowForm(!showForm)}\n//           style={{ marginTop: \"20px\" }}\n//         >\n//           {showForm ? \"Cancel\" : \"Add New Project\"}\n//         </Button>\n//         <Modal open={showForm} onClose={() => setShowForm(false)}>\n//           <Card style={{ padding: \"20px\", maxWidth: \"500px\", margin: \"auto\", marginTop: \"10%\" }}>\n//             <Typography variant=\"h6\" gutterBottom>\n//               Create a New Project\n//             </Typography>\n//             <form onSubmit={handleFormSubmit}>\n//               <TextField\n//                 fullWidth\n//                 label=\"Project Name\"\n//                 name=\"project_name\"\n//                 value={formData.project_name}\n//                 onChange={handleFormChange}\n//                 margin=\"normal\"\n//                 required\n//               />\n//               <TextField\n//                 fullWidth\n//                 label=\"Description\"\n//                 name=\"description\"\n//                 value={formData.description}\n//                 onChange={handleFormChange}\n//                 margin=\"normal\"\n//                 multiline\n//               />\n//               <TextField\n//                 fullWidth\n//                 label=\"Start Date\"\n//                 type=\"date\"\n//                 name=\"start_date\"\n//                 value={formData.start_date}\n//                 onChange={handleFormChange}\n//                 margin=\"normal\"\n//                 InputLabelProps={{ shrink: true }}\n//               />\n//               <TextField\n//                 fullWidth\n//                 label=\"End Date\"\n//                 type=\"date\"\n//                 name=\"end_date\"\n//                 value={formData.end_date}\n//                 onChange={handleFormChange}\n//                 margin=\"normal\"\n//                 InputLabelProps={{ shrink: true }}\n//               />\n//               <TextField\n//                 fullWidth\n//                 label=\"Budget\"\n//                 type=\"number\"\n//                 name=\"budget\"\n//                 value={formData.budget}\n//                 onChange={handleFormChange}\n//                 margin=\"normal\"\n//               />\n//               <Button variant=\"contained\" color=\"primary\" type=\"submit\" style={{ marginTop: \"20px\" }}>\n//                 Create Project\n//               </Button>\n//             </form>\n//           </Card>\n//         </Modal>\n//       </Card>\n//     </div>\n//   );\n// };\n\n// export default ClientProfile;\n// import React, { useEffect, useState } from \"react\";\n// import { useParams } from \"react-router-dom\";\n// import { Button, Table, Modal, Input, Form, Typography, message, Spin, Card, Alert } from \"antd\";\n// import { EditOutlined, PlusOutlined } from \"@ant-design/icons\";\n// import \"antd/dist/reset.css\";\n\n// const { Title } = Typography;\n\n// const ClientProfile = () => {\n//   const { clientId } = useParams();\n//   const [client, setClient] = useState(null);\n//   const [projects, setProjects] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [showForm, setShowForm] = useState(false);\n//   const [showEditClientForm, setShowEditClientForm] = useState(false);\n//   const [editProject, setEditProject] = useState(null);\n//   const [form] = Form.useForm();\n//   const [clientForm] = Form.useForm();\n\n//   useEffect(() => {\n//     const fetchClientDetails = async () => {\n//       try {\n//         const response = await fetch(`http://localhost:5005/api/client/${clientId}`);\n//         const data = await response.json();\n//         setClient(data);\n//         clientForm.setFieldsValue(data);\n//       } catch (err) {\n//         setError(\"Failed to load client details.\");\n//       }\n//     };\n\n//     const fetchClientProjects = async () => {\n//       try {\n//         const response = await fetch(`http://localhost:5005/api/projects/${clientId}`);\n//         const data = await response.json();\n//         setProjects(data);\n//       } catch (err) {\n//         setError(\"Failed to load projects.\");\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchClientDetails();\n//     fetchClientProjects();\n//   }, [clientId]);\n\n//   const handleFormSubmit = async () => {\n//     try {\n//       const formData = await form.validateFields();\n//       if (editProject) {\n//         // Update project\n//         await fetch(`http://localhost:5005/api/projects/${editProject._id}`, {\n//           method: \"PUT\",\n//           headers: { \"Content-Type\": \"application/json\" },\n//           body: JSON.stringify(formData),\n//         });\n//         setProjects(projects.map((p) => (p._id === editProject._id ? { ...p, ...formData } : p)));\n//       } else {\n//         // Create new project\n//         const response = await fetch(\"http://localhost:5005/api/projects\", {\n//           method: \"POST\",\n//           headers: { \"Content-Type\": \"application/json\" },\n//           body: JSON.stringify({ ...formData, client_id: clientId }),\n//         });\n//         const newProject = await response.json();\n//         setProjects([...projects, newProject]);\n//       }\n//       setShowForm(false);\n//       setEditProject(null);\n//       form.resetFields();\n//       message.success(\"Project saved successfully\");\n//     } catch (error) {\n//       message.error(\"Error saving project\");\n//     }\n//   };\n\n//   const handleClientUpdate = async () => {\n//     try {\n//       const formData = await clientForm.validateFields();\n//       await fetch(`http://localhost:5005/api/client/${clientId}`, {\n//         method: \"PUT\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify(formData),\n//       });\n//       setClient(formData);\n//       setShowEditClientForm(false);\n//       message.success(\"Client details updated successfully\");\n//     } catch (error) {\n//       message.error(\"Error updating client details\");\n//     }\n//   };\n\n//   if (loading) return <Spin size=\"large\" style={{ display: \"block\", margin: \"auto\" }} />;\n//   if (error) return <Alert message={error} type=\"error\" showIcon />;\n//   if (!client) return <Typography>Loading...</Typography>;\n\n//   return (\n//     <div style={{ padding: \"24px\" }}>\n//       <Card>\n//         <Title level={3}>\n//           {client.client_name} <EditOutlined onClick={() => setShowEditClientForm(true)} style={{ cursor: \"pointer\", marginLeft: 10 }} />\n//         </Title>\n//         <Table\n//           dataSource={projects}\n//           rowKey=\"_id\"\n//           columns={[\n//             { title: \"Project Name\", dataIndex: \"project_name\" },\n//             { title: \"Description\", dataIndex: \"description\" },\n//             { title: \"Start Date\", dataIndex: \"start_date\", render: (date) => new Date(date).toLocaleDateString() },\n//             { title: \"End Date\", dataIndex: \"end_date\", render: (date) => new Date(date).toLocaleDateString() },\n//             { title: \"Budget\", dataIndex: \"budget\" },\n//             {\n//               title: \"Actions\",\n//               render: (_, record) => (\n//                 <Button icon={<EditOutlined />} onClick={() => { setEditProject(record); setShowForm(true); form.setFieldsValue(record); }} />\n//               ),\n//             },\n//           ]}\n//         />\n//         <Button type=\"primary\" icon={<PlusOutlined />} onClick={() => { setEditProject(null); setShowForm(true); }} style={{ marginTop: \"20px\" }}>\n//           Add New Project\n//         </Button>\n//       </Card>\n\n//       <Modal title=\"Edit Client Details\" open={showEditClientForm} onCancel={() => setShowEditClientForm(false)} onOk={handleClientUpdate}>\n//         <Form form={clientForm} layout=\"vertical\">\n//           <Form.Item name=\"client_name\" label=\"Client Name\" rules={[{ required: true, message: \"Please enter a client name\" }]}> <Input /> </Form.Item>\n//           <Form.Item name=\"client_email\" label=\"Client Email\" rules={[{ required: true, message: \"Please enter a valid email\" }]}> <Input type=\"email\" /> </Form.Item>\n//         </Form>\n//       </Modal>\n\n//       <Modal\n//         title={editProject ? \"Edit Project\" : \"Create a New Project\"}\n//         open={showForm}\n//         onCancel={() => setShowForm(false)}\n//         onOk={handleFormSubmit}\n//         okText={editProject ? \"Update Project\" : \"Create Project\"}\n//       >\n//         <Form form={form} layout=\"vertical\">\n//           <Form.Item name=\"project_name\" label=\"Project Name\" rules={[{ required: true, message: \"Please enter a project name\" }]}> <Input /> </Form.Item>\n//           <Form.Item name=\"description\" label=\"Description\"> <Input.TextArea /> </Form.Item>\n//           <Form.Item name=\"start_date\" label=\"Start Date\" rules={[{ required: true, message: \"Please select a start date\" }]}> <Input type=\"date\" /> </Form.Item>\n//           <Form.Item name=\"end_date\" label=\"End Date\" rules={[{ required: true, message: \"Please select an end date\" }]}> <Input type=\"date\" /> </Form.Item>\n//           <Form.Item name=\"budget\" label=\"Budget\"> <Input type=\"number\" /> </Form.Item>\n//         </Form>\n//       </Modal>\n//     </div>\n//   );\n// };\n\n// export default ClientProfile;\n"],"mappings":"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CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAA0D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}