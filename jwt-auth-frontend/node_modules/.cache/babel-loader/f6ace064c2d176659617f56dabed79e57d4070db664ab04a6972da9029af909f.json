{"ast":null,"code":"// import React, { useState } from \"react\";\n// import axios from \"axios\";\n// import \"./chatbot.css\"; // Import the CSS file\n// const Chatbot = () => {\n//   const [messages, setMessages] = useState([]);\n//   const [input, setInput] = useState(\"\");\n//   const sendMessage = async () => {\n//     if (!input.trim()) return;\n//     const userMessage = { role: \"user\", content: input, timestamp: new Date() };\n//     // Add user message to UI\n//     setMessages((prevMessages) => [...prevMessages, userMessage]);\n//     try {\n//       // Sending message to the backend\n//       const response = await axios.post(\"http://localhost:5001/chat\", {\n//         message: input,\n//       });\n//       // Checking the response structure and handling the reply\n//       const botMessage = {\n//         role: \"bot\",\n//         content: response.data.reply || \"Sorry, I couldn't understand that.\",\n//         timestamp: new Date(),\n//       };\n//       // Add bot response to UI\n//       setMessages((prevMessages) => [...prevMessages, userMessage, botMessage]);\n//     } catch (error) {\n//       console.error(\"Error:\", error);\n//       // In case of error, display a fallback message\n//       const botMessage = {\n//         role: \"bot\",\n//         content: \"Sorry, there was an error with the chatbot service.\",\n//         timestamp: new Date(),\n//       };\n//       setMessages((prevMessages) => [...prevMessages, userMessage, botMessage]);\n//     }\n//     setInput(\"\"); // Clear the input field\n//   };\n//   return (\n//     <div className=\"chatbot-container\">\n//       <div className=\"header\">\n//         <h2>Chatbot</h2>\n//       </div>\n//       <div className=\"messages-container\">\n//         {messages.map((msg, index) => (\n//           <div\n//             key={index}\n//             className={`message ${msg.role === \"user\" ? \"user\" : \"bot\"}`}\n//           >\n//             <div className=\"message-content\">\n//               <p className=\"message-text\">{msg.content}</p>\n//               <span className=\"message-time\">\n//                 {msg.timestamp.toLocaleTimeString()}\n//               </span>\n//             </div>\n//           </div>\n//         ))}\n//       </div>\n//       <div className=\"input-container\">\n//         <input\n//           type=\"text\"\n//           value={input}\n//           onChange={(e) => setInput(e.target.value)}\n//           placeholder=\"Type a message...\"\n//           className=\"input-field\"\n//         />\n//         <button onClick={sendMessage} className=\"send-button\">\n//           Send\n//         </button>\n//       </div>\n//     </div>\n//   );\n// };\n// export default Chatbot;\nimport React,{useState}from\"react\";import axios from\"axios\";import'./chatbot.css';// Import the CSS file for Chatbot styles\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Chatbot=()=>{const[messages,setMessages]=useState([]);const[input,setInput]=useState(\"\");const sendMessage=async()=>{if(!input.trim())return;const userMessage={role:\"user\",content:input};// Add user message to UI\nsetMessages(prevMessages=>[...prevMessages,userMessage]);try{// Sending message to the backend\nconst response=await axios.post(\"http://localhost:5001/chat\",{message:input});// Checking the response structure and handling the reply\nconst botMessage={role:\"bot\",content:response.data.reply||\"Sorry, I couldn't understand that.\"};// Add bot response to UI\nsetMessages(prevMessages=>[...prevMessages,userMessage,botMessage]);}catch(error){console.error(\"Error:\",error);// In case of error, display a fallback message\nconst botMessage={role:\"bot\",content:\"Sorry, there was an error with the chatbot service.\"};setMessages(prevMessages=>[...prevMessages,userMessage,botMessage]);}setInput(\"\");// Clear the input field\n};return/*#__PURE__*/_jsxs(\"div\",{className:\"chatbox-container\",children:[/*#__PURE__*/_jsx(\"h3\",{style:{textAlign:\"center\",fontWeight:\"bold\"},children:\"Hey! Need any help?\"}),/*#__PURE__*/_jsx(\"div\",{className:\"messages-container\",children:messages.map((msg,index)=>/*#__PURE__*/_jsxs(\"div\",{className:`message ${msg.role===\"user\"?\"user-message\":\"bot-message\"}`,children:[msg.role===\"bot\"&&/*#__PURE__*/_jsx(\"img\",{src:\"/polsialogo.jpeg\",alt:\"Bot\",className:\"bot-avatar\"}),/*#__PURE__*/_jsxs(\"strong\",{children:[msg.role===\"user\"?\"You\":\"Polysia\",\":\"]}),\" \",msg.content]},index))}),/*#__PURE__*/_jsxs(\"div\",{className:\"input-container\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:input,onChange:e=>setInput(e.target.value),placeholder:\"Type a message...\",className:\"chat-input\"}),/*#__PURE__*/_jsx(\"button\",{onClick:sendMessage,className:\"send-button\",children:\"Send\"})]})]});};export default Chatbot;","map":{"version":3,"names":["React","useState","axios","jsx","_jsx","jsxs","_jsxs","Chatbot","messages","setMessages","input","setInput","sendMessage","trim","userMessage","role","content","prevMessages","response","post","message","botMessage","data","reply","error","console","className","children","style","textAlign","fontWeight","map","msg","index","src","alt","type","value","onChange","e","target","placeholder","onClick"],"sources":["/Users/harshitrishav/Demo/jwt-auth-frontend/src/components/Bot.js"],"sourcesContent":["// import React, { useState } from \"react\";\n// import axios from \"axios\";\n// import \"./chatbot.css\"; // Import the CSS file\n\n// const Chatbot = () => {\n//   const [messages, setMessages] = useState([]);\n//   const [input, setInput] = useState(\"\");\n\n//   const sendMessage = async () => {\n//     if (!input.trim()) return;\n\n//     const userMessage = { role: \"user\", content: input, timestamp: new Date() };\n\n//     // Add user message to UI\n//     setMessages((prevMessages) => [...prevMessages, userMessage]);\n\n//     try {\n//       // Sending message to the backend\n//       const response = await axios.post(\"http://localhost:5001/chat\", {\n//         message: input,\n//       });\n\n//       // Checking the response structure and handling the reply\n//       const botMessage = {\n//         role: \"bot\",\n//         content: response.data.reply || \"Sorry, I couldn't understand that.\",\n//         timestamp: new Date(),\n//       };\n\n//       // Add bot response to UI\n//       setMessages((prevMessages) => [...prevMessages, userMessage, botMessage]);\n//     } catch (error) {\n//       console.error(\"Error:\", error);\n\n//       // In case of error, display a fallback message\n//       const botMessage = {\n//         role: \"bot\",\n//         content: \"Sorry, there was an error with the chatbot service.\",\n//         timestamp: new Date(),\n//       };\n//       setMessages((prevMessages) => [...prevMessages, userMessage, botMessage]);\n//     }\n\n//     setInput(\"\"); // Clear the input field\n//   };\n\n//   return (\n//     <div className=\"chatbot-container\">\n//       <div className=\"header\">\n//         <h2>Chatbot</h2>\n//       </div>\n//       <div className=\"messages-container\">\n//         {messages.map((msg, index) => (\n//           <div\n//             key={index}\n//             className={`message ${msg.role === \"user\" ? \"user\" : \"bot\"}`}\n//           >\n//             <div className=\"message-content\">\n//               <p className=\"message-text\">{msg.content}</p>\n//               <span className=\"message-time\">\n//                 {msg.timestamp.toLocaleTimeString()}\n//               </span>\n//             </div>\n//           </div>\n//         ))}\n//       </div>\n//       <div className=\"input-container\">\n//         <input\n//           type=\"text\"\n//           value={input}\n//           onChange={(e) => setInput(e.target.value)}\n//           placeholder=\"Type a message...\"\n//           className=\"input-field\"\n//         />\n//         <button onClick={sendMessage} className=\"send-button\">\n//           Send\n//         </button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Chatbot;\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport './chatbot.css'; // Import the CSS file for Chatbot styles\n\nconst Chatbot = () => {\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(\"\");\n\n  const sendMessage = async () => {\n    if (!input.trim()) return;\n\n    const userMessage = { role: \"user\", content: input };\n\n    // Add user message to UI\n    setMessages((prevMessages) => [...prevMessages, userMessage]);\n\n    try {\n      // Sending message to the backend\n      const response = await axios.post(\"http://localhost:5001/chat\", {\n        message: input,\n      });\n\n      // Checking the response structure and handling the reply\n      const botMessage = {\n        role: \"bot\",\n        content: response.data.reply || \"Sorry, I couldn't understand that.\",\n      };\n\n      // Add bot response to UI\n      setMessages((prevMessages) => [...prevMessages, userMessage, botMessage]);\n    } catch (error) {\n      console.error(\"Error:\", error);\n\n      // In case of error, display a fallback message\n      const botMessage = {\n        role: \"bot\",\n        content: \"Sorry, there was an error with the chatbot service.\",\n      };\n      setMessages((prevMessages) => [...prevMessages, userMessage, botMessage]);\n    }\n\n    setInput(\"\"); // Clear the input field\n  };\n\n  return (\n    <div className=\"chatbox-container\">\n <h3 style={{ textAlign: \"center\", fontWeight: \"bold\" }}>Hey! Need any help?</h3>\n  <div className=\"messages-container\">\n    {messages.map((msg, index) => (\n      <div\n        key={index}\n        className={`message ${msg.role === \"user\" ? \"user-message\" : \"bot-message\"}`}\n      >\n        {msg.role === \"bot\" && (\n          <img\n            src=\"/polsialogo.jpeg\"\n            alt=\"Bot\"\n            className=\"bot-avatar\"\n          />\n        )}\n        <strong>{msg.role === \"user\" ? \"You\" : \"Polysia\"}:</strong> {msg.content}\n      </div>\n    ))}\n  </div>\n  <div className=\"input-container\">\n    <input\n      type=\"text\"\n      value={input}\n      onChange={(e) => setInput(e.target.value)}\n      placeholder=\"Type a message...\"\n      className=\"chat-input\"\n    />\n    <button onClick={sendMessage} className=\"send-button\">\n      Send\n    </button>\n  </div>\n</div>\n\n  );\n};\n\nexport default Chatbot;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}