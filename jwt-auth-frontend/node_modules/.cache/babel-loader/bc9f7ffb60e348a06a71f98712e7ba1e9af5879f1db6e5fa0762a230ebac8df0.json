{"ast":null,"code":"var _jsxFileName = \"/Users/harshitrishav/Demo/jwt-auth-frontend/src/components/Dashboard.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import { Link } from 'react-router-dom';\n// import axios from 'axios'; // Ensure axios is installed: `npm install axios`\n// import './Dashboard.css'; // Custom CSS for the dashboard\n\n// const Dashboard = () => {\n//   const [clients, setClients] = useState([]);\n//   const [search, setSearch] = useState('');\n//   const [filters, setFilters] = useState({\n//     region: '',\n//     industry: '',\n//     status: ''\n//   });\n//   const [sortOrder, setSortOrder] = useState('asc'); // 'asc' or 'desc'\n//   const [sortColumn, setSortColumn] = useState('client_name'); // Default column to sort\n//   const [authToken, setAuthToken] = useState(localStorage.getItem('token') || ''); // Get the token from localStorage\n\n//   // Fetch clients from backend when the component mounts or filters/sort change\n//   useEffect(() => {\n//     fetchClients();\n//   }, [filters, sortColumn, sortOrder]);\n\n//   const fetchClients = () => {\n//     const query = new URLSearchParams({\n//       search,\n//       region: filters.region,\n//       industry: filters.industry,\n//       status: filters.status,\n//       sortColumn,\n//       sortOrder\n//     });\n\n//     axios\n//       .get(`http://localhost:5005/api/users?${query.toString()}`, {\n//         headers: {\n//           Authorization: `Bearer ${authToken}`, // Pass token in Authorization header\n//         },\n//       })\n//       .then((response) => {\n//         setClients(response.data);\n//       })\n//       .catch((err) => {\n//         console.error('Error fetching clients:', err);\n//         // Handle error (e.g., logout if token is invalid)\n//       });\n//   };\n\n//   const handleSearch = (e) => {\n//     setSearch(e.target.value);\n//   };\n\n//   const handleFilterChange = (e) => {\n//     const { name, value } = e.target;\n//     setFilters({ ...filters, [name]: value });\n//   };\n\n//   const handleSort = (column) => {\n//     const newSortOrder = sortOrder === 'asc' ? 'desc' : 'asc';\n//     setSortOrder(newSortOrder);\n//     setSortColumn(column);\n//   };\n\n//   const exportData = (format) => {\n//     // Logic to export as excel, pdf, csv\n//     alert(`Exporting data as ${format}`);\n//   };\n\n//   return (\n//     <div className=\"dashboard\">\n//       <h1>Client Dashboard</h1>\n\n//       {/* Search Bar */}\n//       <input\n//         type=\"text\"\n//         placeholder=\"Search clients...\"\n//         value={search}\n//         onChange={handleSearch}\n//       />\n\n//       {/* Filter Options */}\n//       <select name=\"region\" onChange={handleFilterChange} value={filters.region}>\n//         <option value=\"\">All Regions</option>\n//         <option value=\"North America\">North America</option>\n//         <option value=\"Europe\">Europe</option>\n//         <option value=\"Asia\">Asia</option>\n//       </select>\n\n//       <select name=\"industry\" onChange={handleFilterChange} value={filters.industry}>\n//         <option value=\"\">All Industries</option>\n//         <option value=\"Finance\">Finance</option>\n//         <option value=\"Technology\">Technology</option>\n//         <option value=\"Healthcare\">Healthcare</option>\n//       </select>\n\n//       <select name=\"status\" onChange={handleFilterChange} value={filters.status}>\n//         <option value=\"\">All Statuses</option>\n//         <option value=\"Active\">Active</option>\n//         <option value=\"Inactive\">Inactive</option>\n//       </select>\n\n//       {/* Export Buttons */}\n//       <button onClick={() => exportData('excel')}>Export as Excel</button>\n//       <button onClick={() => exportData('pdf')}>Export as PDF</button>\n//       <button onClick={() => exportData('csv')}>Export as CSV</button>\n\n//       {/* Client Data Table */}\n//       <table>\n//         <thead>\n//           <tr>\n//             <th onClick={() => handleSort('client_name')}>Client Name</th>\n//             <th onClick={() => handleSort('industry')}>Industry</th>\n//             <th onClick={() => handleSort('status')}>Status</th>\n//             <th>Contact Person</th>\n//             <th>Location</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {clients.length > 0 ? (\n//             clients.map((client) => (\n//               <tr key={client._id}>\n//                 <td>\n//                   <Link to={`/client/${client._id}`}>{client.client_name}</Link>\n//                 </td>\n//                 <td>{client.industry}</td>\n//                 <td>{client.status}</td>\n//                 <td>{client.contact_person}</td>\n//                 <td>\n//                   {`${client.address.street}, ${client.address.city}, ${client.address.state}, ${client.address.postal_code}, ${client.address.country}`}\n//                 </td>\n//               </tr>\n//             ))\n//           ) : (\n//             <tr>\n//               <td colSpan=\"5\">No clients found</td>\n//             </tr>\n//           )}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default Dashboard;\n// import React, { useState, useEffect } from 'react';\n// import { Link } from 'react-router-dom';\n// import axios from 'axios';\n// import './Dashboard.css';\n\n// const Dashboard = () => {\n//   const [clients, setClients] = useState([]);\n//   const [search, setSearch] = useState('');\n//   const [filters, setFilters] = useState({\n//     region: '',\n//     industry: '',\n//     status: '',\n//   });\n//   const [sortOrder, setSortOrder] = useState('asc'); // 'asc' or 'desc'\n//   const [sortColumn, setSortColumn] = useState('client_name'); // Default column to sort\n//   const [authToken, setAuthToken] = useState(localStorage.getItem('token') || ''); // Get the token from localStorage\n//   const [editingClientId, setEditingClientId] = useState(null); // Track client being edited\n//   const [editData, setEditData] = useState({}); // Track data being edited\n\n//   useEffect(() => {\n//     fetchClients();\n//   }, [filters, sortColumn, sortOrder]);\n\n//   const fetchClients = () => {\n//     const query = new URLSearchParams({\n//       search,\n//       region: filters.region,\n//       industry: filters.industry,\n//       status: filters.status,\n//       sortColumn,\n//       sortOrder,\n//     });\n\n//     axios\n//       .get(`http://localhost:5005/api/users?${query.toString()}`, {\n//         headers: {\n//           Authorization: `Bearer ${authToken}`,\n//         },\n//       })\n//       .then((response) => {\n//         setClients(response.data);\n//       })\n//       .catch((err) => {\n//         console.error('Error fetching clients:', err);\n//       });\n//   };\n\n//   const handleSearch = (e) => {\n//     setSearch(e.target.value);\n//   };\n\n//   const handleFilterChange = (e) => {\n//     const { name, value } = e.target;\n//     setFilters({ ...filters, [name]: value });\n//   };\n\n//   const handleSort = (column) => {\n//     const newSortOrder = sortOrder === 'asc' ? 'desc' : 'asc';\n//     setSortOrder(newSortOrder);\n//     setSortColumn(column);\n//   };\n\n//   const handleEdit = (clientId) => {\n//     setEditingClientId(clientId);\n//     const clientToEdit = clients.find((client) => client._id === clientId);\n//     setEditData(clientToEdit);\n//   };\n\n//   const handleEditChange = (e) => {\n//     const { name, value } = e.target;\n//     setEditData({ ...editData, [name]: value });\n//   };\n\n//   const handleSaveEdit = () => {\n//     console.log('Editing Client ID:', editingClientId);\n//     console.log('Data to be updated:', editData);\n\n//     axios\n//       .put(`http://localhost:5005/api/users/${editingClientId}`, editData, {\n//         headers: {\n//           Authorization: `Bearer ${authToken}`,\n//         },\n//       })\n//       .then((response) => {\n//         console.log('Server response:', response);\n//         setClients((prevClients) =>\n//           prevClients.map((client) =>\n//             client._id === editingClientId ? response.data : client\n//           )\n//         );\n//         setEditingClientId(null);\n//       })\n//       .catch((err) => {\n//         console.error('Error saving client edits:', err);\n//       });\n//   };\n\n//   const handleDelete = (clientId) => {\n//     if (window.confirm('Are you sure you want to delete this client?')) {\n//       axios\n//         .delete(`http://localhost:5005/api/users/${clientId}`, {\n//           headers: {\n//             Authorization: `Bearer ${authToken}`,\n//           },\n//         })\n//         .then(() => {\n//           setClients((prevClients) => prevClients.filter((client) => client._id !== clientId));\n//         })\n//         .catch((err) => {\n//           console.error('Error deleting client:', err);\n//         });\n//     }\n//   };\n\n//   return (\n//     <div className=\"dashboard\">\n//       <h1>Client Dashboard</h1>\n\n//       {/* Search Bar */}\n//       <input\n//         type=\"text\"\n//         placeholder=\"Search clients...\"\n//         value={search}\n//         onChange={handleSearch}\n//       />\n\n//       {/* Filter Options */}\n//       <select name=\"region\" onChange={handleFilterChange} value={filters.region}>\n//         <option value=\"\">All Regions</option>\n//         <option value=\"North America\">North America</option>\n//         <option value=\"Europe\">Europe</option>\n//         <option value=\"Asia\">Asia</option>\n//       </select>\n\n//       <select name=\"industry\" onChange={handleFilterChange} value={filters.industry}>\n//         <option value=\"\">All Industries</option>\n//         <option value=\"Finance\">Finance</option>\n//         <option value=\"Technology\">Technology</option>\n//         <option value=\"Healthcare\">Healthcare</option>\n//       </select>\n\n//       <select name=\"status\" onChange={handleFilterChange} value={filters.status}>\n//         <option value=\"\">All Statuses</option>\n//         <option value=\"Active\">Active</option>\n//         <option value=\"Inactive\">Inactive</option>\n//       </select>\n\n//       {/* Client Data Table */}\n//       <table>\n//         <thead>\n//           <tr>\n//             <th onClick={() => handleSort('client_name')}>Client Name</th>\n//             <th onClick={() => handleSort('industry')}>Industry</th>\n//             <th onClick={() => handleSort('status')}>Status</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {clients.length > 0 ? (\n//             clients.map((client) => (\n//               <tr key={client._id}>\n//                 {editingClientId === client._id ? (\n//                   <>\n//                     <td>\n//                       <input\n//                         type=\"text\"\n//                         name=\"client_name\"\n//                         value={editData.client_name}\n//                         onChange={handleEditChange}\n//                       />\n//                     </td>\n//                     <td>\n//                       <input\n//                         type=\"text\"\n//                         name=\"industry\"\n//                         value={editData.industry}\n//                         onChange={handleEditChange}\n//                       />\n//                     </td>\n//                     <td>\n//                       <input\n//                         type=\"text\"\n//                         name=\"status\"\n//                         value={editData.status}\n//                         onChange={handleEditChange}\n//                       />\n//                     </td>\n//                     <td>\n//                       <button onClick={handleSaveEdit}>Save</button>\n//                       <button onClick={() => setEditingClientId(null)}>Cancel</button>\n//                     </td>\n//                   </>\n//                 ) : (\n//                   <>\n//                     <td>{client.client_name}</td>\n//                     <td>{client.industry}</td>\n//                     <td>{client.status}</td>\n//                     <td>\n//                       <button onClick={() => handleEdit(client._id)}>Edit</button>\n//                       <button onClick={() => handleDelete(client._id)}>Delete</button>\n//                     </td>\n//                   </>\n//                 )}\n//               </tr>\n//             ))\n//           ) : (\n//             <tr>\n//               <td colSpan=\"4\">No clients found</td>\n//             </tr>\n//           )}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default Dashboard;\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios'; // Ensure axios is installed: `npm install axios`\nimport './Dashboard.css'; // Custom CSS for the dashboard\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const [clients, setClients] = useState([]);\n  const [search, setSearch] = useState('');\n  const [filters, setFilters] = useState({\n    region: '',\n    industry: '',\n    status: ''\n  });\n  const [sortOrder, setSortOrder] = useState('asc'); // 'asc' or 'desc'\n  const [sortColumn, setSortColumn] = useState('client_name'); // Default column to sort\n  const [authToken, setAuthToken] = useState(localStorage.getItem('token') || ''); // Get the token from localStorage\n\n  // Fetch clients from backend when the component mounts or filters/sort change\n  useEffect(() => {\n    fetchClients();\n  }, [filters, sortColumn, sortOrder]);\n  const fetchClients = () => {\n    const query = new URLSearchParams({\n      search,\n      region: filters.region,\n      industry: filters.industry,\n      status: filters.status,\n      sortColumn,\n      sortOrder\n    });\n    axios.get(`http://localhost:5005/api/users?${query.toString()}`, {\n      headers: {\n        Authorization: `Bearer ${authToken}` // Pass token in Authorization header\n      }\n    }).then(response => {\n      setClients(response.data);\n    }).catch(err => {\n      console.error('Error fetching clients:', err);\n      // Handle error (e.g., logout if token is invalid)\n    });\n  };\n  const handleSearch = e => {\n    setSearch(e.target.value);\n  };\n  const handleFilterChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFilters({\n      ...filters,\n      [name]: value\n    });\n  };\n  const handleSort = column => {\n    const newSortOrder = sortOrder === 'asc' ? 'desc' : 'asc';\n    setSortOrder(newSortOrder);\n    setSortColumn(column);\n  };\n  const handleEdit = clientId => {\n    setEditingClientId(clientId);\n    const clientToEdit = clients.find(client => client._id === clientId);\n    setEditData(clientToEdit);\n  };\n  const handleEditChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setEditData({\n      ...editData,\n      [name]: value\n    });\n  };\n  const handleSaveEdit = () => {\n    console.log('Editing Client ID:', editingClientId);\n    console.log('Data to be updated:', editData);\n    axios.put(`http://localhost:5005/api/users/${editingClientId}`, editData, {\n      headers: {\n        Authorization: `Bearer ${authToken}`\n      }\n    }).then(response => {\n      console.log('Server response:', response);\n      setClients(prevClients => prevClients.map(client => client._id === editingClientId ? response.data : client));\n      setEditingClientId(null);\n    }).catch(err => {\n      console.error('Error saving client edits:', err);\n    });\n  };\n  const handleDelete = clientId => {\n    // Make API call to delete client\n    axios.delete(`http://localhost:5005/api/users/${clientId}`, {\n      headers: {\n        Authorization: `Bearer ${authToken}`\n      }\n    }).then(response => {\n      // Remove deleted client from the list\n      setClients(clients.filter(client => client._id !== clientId));\n      alert('Client deleted successfully');\n    }).catch(err => {\n      console.error('Error deleting client:', err);\n      alert('Failed to delete client');\n    });\n  };\n  const exportData = format => {\n    // Logic to export as excel, pdf, csv\n    alert(`Exporting data as ${format}`);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Client Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 486,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Search clients...\",\n      value: search,\n      onChange: handleSearch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 489,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      name: \"region\",\n      onChange: handleFilterChange,\n      value: filters.region,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        children: \"All Regions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 498,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"North America\",\n        children: \"North America\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 499,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Europe\",\n        children: \"Europe\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 500,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Asia\",\n        children: \"Asia\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 501,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 497,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      name: \"industry\",\n      onChange: handleFilterChange,\n      value: filters.industry,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        children: \"All Industries\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 505,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Finance\",\n        children: \"Finance\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 506,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Technology\",\n        children: \"Technology\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 507,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Healthcare\",\n        children: \"Healthcare\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 508,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 504,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      name: \"status\",\n      onChange: handleFilterChange,\n      value: filters.status,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        children: \"All Statuses\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 512,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Active\",\n        children: \"Active\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 513,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Inactive\",\n        children: \"Inactive\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 514,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 511,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => exportData('excel'),\n      children: \"Export as Excel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 518,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => exportData('pdf'),\n      children: \"Export as PDF\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 519,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => exportData('csv'),\n      children: \"Export as CSV\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 520,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            onClick: () => handleSort('client_name'),\n            children: \"Client Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 526,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            onClick: () => handleSort('industry'),\n            children: \"Industry\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 527,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            onClick: () => handleSort('status'),\n            children: \"Status\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 528,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 529,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Phone\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 530,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Contact Person\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 531,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Location\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 532,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Actions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 533,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 525,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 524,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: clients.length > 0 ? clients.map(client => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: `/client/${client._id}`,\n              children: client.client_name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 541,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 540,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: client.industry\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 543,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: client.status\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 544,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: client.email\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 545,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: client.phone\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 546,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: client.contact_person\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 547,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: `${client.address.street}, ${client.address.city}, ${client.address.state}, ${client.address.postal_code}, ${client.address.country}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 548,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleEdit(client._id),\n              children: \"Edit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 552,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleDelete(client._id),\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 553,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 551,\n            columnNumber: 17\n          }, this)]\n        }, client._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 539,\n          columnNumber: 15\n        }, this)) : /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: /*#__PURE__*/_jsxDEV(\"td\", {\n            colSpan: \"6\",\n            children: \"No clients found\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 559,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 558,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 536,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 523,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 485,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"BtKqZ5psT2V0QrfreTgPLIG2ct8=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","Link","axios","jsxDEV","_jsxDEV","Dashboard","_s","clients","setClients","search","setSearch","filters","setFilters","region","industry","status","sortOrder","setSortOrder","sortColumn","setSortColumn","authToken","setAuthToken","localStorage","getItem","fetchClients","query","URLSearchParams","get","toString","headers","Authorization","then","response","data","catch","err","console","error","handleSearch","e","target","value","handleFilterChange","name","handleSort","column","newSortOrder","handleEdit","clientId","setEditingClientId","clientToEdit","find","client","_id","setEditData","handleEditChange","editData","handleSaveEdit","log","editingClientId","put","prevClients","map","handleDelete","delete","filter","alert","exportData","format","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","onClick","length","to","client_name","email","phone","contact_person","address","street","city","state","postal_code","country","colSpan","_c","$RefreshReg$"],"sources":["/Users/harshitrishav/Demo/jwt-auth-frontend/src/components/Dashboard.js"],"sourcesContent":["\n// import React, { useState, useEffect } from 'react';\n// import { Link } from 'react-router-dom';\n// import axios from 'axios'; // Ensure axios is installed: `npm install axios`\n// import './Dashboard.css'; // Custom CSS for the dashboard\n\n// const Dashboard = () => {\n//   const [clients, setClients] = useState([]);\n//   const [search, setSearch] = useState('');\n//   const [filters, setFilters] = useState({\n//     region: '',\n//     industry: '',\n//     status: ''\n//   });\n//   const [sortOrder, setSortOrder] = useState('asc'); // 'asc' or 'desc'\n//   const [sortColumn, setSortColumn] = useState('client_name'); // Default column to sort\n//   const [authToken, setAuthToken] = useState(localStorage.getItem('token') || ''); // Get the token from localStorage\n\n//   // Fetch clients from backend when the component mounts or filters/sort change\n//   useEffect(() => {\n//     fetchClients();\n//   }, [filters, sortColumn, sortOrder]);\n\n//   const fetchClients = () => {\n//     const query = new URLSearchParams({\n//       search,\n//       region: filters.region,\n//       industry: filters.industry,\n//       status: filters.status,\n//       sortColumn,\n//       sortOrder\n//     });\n\n//     axios\n//       .get(`http://localhost:5005/api/users?${query.toString()}`, {\n//         headers: {\n//           Authorization: `Bearer ${authToken}`, // Pass token in Authorization header\n//         },\n//       })\n//       .then((response) => {\n//         setClients(response.data);\n//       })\n//       .catch((err) => {\n//         console.error('Error fetching clients:', err);\n//         // Handle error (e.g., logout if token is invalid)\n//       });\n//   };\n\n//   const handleSearch = (e) => {\n//     setSearch(e.target.value);\n//   };\n\n//   const handleFilterChange = (e) => {\n//     const { name, value } = e.target;\n//     setFilters({ ...filters, [name]: value });\n//   };\n\n//   const handleSort = (column) => {\n//     const newSortOrder = sortOrder === 'asc' ? 'desc' : 'asc';\n//     setSortOrder(newSortOrder);\n//     setSortColumn(column);\n//   };\n\n//   const exportData = (format) => {\n//     // Logic to export as excel, pdf, csv\n//     alert(`Exporting data as ${format}`);\n//   };\n\n//   return (\n//     <div className=\"dashboard\">\n//       <h1>Client Dashboard</h1>\n\n//       {/* Search Bar */}\n//       <input\n//         type=\"text\"\n//         placeholder=\"Search clients...\"\n//         value={search}\n//         onChange={handleSearch}\n//       />\n\n//       {/* Filter Options */}\n//       <select name=\"region\" onChange={handleFilterChange} value={filters.region}>\n//         <option value=\"\">All Regions</option>\n//         <option value=\"North America\">North America</option>\n//         <option value=\"Europe\">Europe</option>\n//         <option value=\"Asia\">Asia</option>\n//       </select>\n\n//       <select name=\"industry\" onChange={handleFilterChange} value={filters.industry}>\n//         <option value=\"\">All Industries</option>\n//         <option value=\"Finance\">Finance</option>\n//         <option value=\"Technology\">Technology</option>\n//         <option value=\"Healthcare\">Healthcare</option>\n//       </select>\n\n//       <select name=\"status\" onChange={handleFilterChange} value={filters.status}>\n//         <option value=\"\">All Statuses</option>\n//         <option value=\"Active\">Active</option>\n//         <option value=\"Inactive\">Inactive</option>\n//       </select>\n\n//       {/* Export Buttons */}\n//       <button onClick={() => exportData('excel')}>Export as Excel</button>\n//       <button onClick={() => exportData('pdf')}>Export as PDF</button>\n//       <button onClick={() => exportData('csv')}>Export as CSV</button>\n\n//       {/* Client Data Table */}\n//       <table>\n//         <thead>\n//           <tr>\n//             <th onClick={() => handleSort('client_name')}>Client Name</th>\n//             <th onClick={() => handleSort('industry')}>Industry</th>\n//             <th onClick={() => handleSort('status')}>Status</th>\n//             <th>Contact Person</th>\n//             <th>Location</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {clients.length > 0 ? (\n//             clients.map((client) => (\n//               <tr key={client._id}>\n//                 <td>\n//                   <Link to={`/client/${client._id}`}>{client.client_name}</Link>\n//                 </td>\n//                 <td>{client.industry}</td>\n//                 <td>{client.status}</td>\n//                 <td>{client.contact_person}</td>\n//                 <td>\n//                   {`${client.address.street}, ${client.address.city}, ${client.address.state}, ${client.address.postal_code}, ${client.address.country}`}\n//                 </td>\n//               </tr>\n//             ))\n//           ) : (\n//             <tr>\n//               <td colSpan=\"5\">No clients found</td>\n//             </tr>\n//           )}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default Dashboard;\n// import React, { useState, useEffect } from 'react';\n// import { Link } from 'react-router-dom';\n// import axios from 'axios';\n// import './Dashboard.css';\n\n// const Dashboard = () => {\n//   const [clients, setClients] = useState([]);\n//   const [search, setSearch] = useState('');\n//   const [filters, setFilters] = useState({\n//     region: '',\n//     industry: '',\n//     status: '',\n//   });\n//   const [sortOrder, setSortOrder] = useState('asc'); // 'asc' or 'desc'\n//   const [sortColumn, setSortColumn] = useState('client_name'); // Default column to sort\n//   const [authToken, setAuthToken] = useState(localStorage.getItem('token') || ''); // Get the token from localStorage\n//   const [editingClientId, setEditingClientId] = useState(null); // Track client being edited\n//   const [editData, setEditData] = useState({}); // Track data being edited\n\n//   useEffect(() => {\n//     fetchClients();\n//   }, [filters, sortColumn, sortOrder]);\n\n//   const fetchClients = () => {\n//     const query = new URLSearchParams({\n//       search,\n//       region: filters.region,\n//       industry: filters.industry,\n//       status: filters.status,\n//       sortColumn,\n//       sortOrder,\n//     });\n\n//     axios\n//       .get(`http://localhost:5005/api/users?${query.toString()}`, {\n//         headers: {\n//           Authorization: `Bearer ${authToken}`,\n//         },\n//       })\n//       .then((response) => {\n//         setClients(response.data);\n//       })\n//       .catch((err) => {\n//         console.error('Error fetching clients:', err);\n//       });\n//   };\n\n//   const handleSearch = (e) => {\n//     setSearch(e.target.value);\n//   };\n\n//   const handleFilterChange = (e) => {\n//     const { name, value } = e.target;\n//     setFilters({ ...filters, [name]: value });\n//   };\n\n//   const handleSort = (column) => {\n//     const newSortOrder = sortOrder === 'asc' ? 'desc' : 'asc';\n//     setSortOrder(newSortOrder);\n//     setSortColumn(column);\n//   };\n\n//   const handleEdit = (clientId) => {\n//     setEditingClientId(clientId);\n//     const clientToEdit = clients.find((client) => client._id === clientId);\n//     setEditData(clientToEdit);\n//   };\n\n//   const handleEditChange = (e) => {\n//     const { name, value } = e.target;\n//     setEditData({ ...editData, [name]: value });\n//   };\n\n//   const handleSaveEdit = () => {\n//     console.log('Editing Client ID:', editingClientId);\n//     console.log('Data to be updated:', editData);\n  \n//     axios\n//       .put(`http://localhost:5005/api/users/${editingClientId}`, editData, {\n//         headers: {\n//           Authorization: `Bearer ${authToken}`,\n//         },\n//       })\n//       .then((response) => {\n//         console.log('Server response:', response);\n//         setClients((prevClients) =>\n//           prevClients.map((client) =>\n//             client._id === editingClientId ? response.data : client\n//           )\n//         );\n//         setEditingClientId(null);\n//       })\n//       .catch((err) => {\n//         console.error('Error saving client edits:', err);\n//       });\n//   };\n  \n//   const handleDelete = (clientId) => {\n//     if (window.confirm('Are you sure you want to delete this client?')) {\n//       axios\n//         .delete(`http://localhost:5005/api/users/${clientId}`, {\n//           headers: {\n//             Authorization: `Bearer ${authToken}`,\n//           },\n//         })\n//         .then(() => {\n//           setClients((prevClients) => prevClients.filter((client) => client._id !== clientId));\n//         })\n//         .catch((err) => {\n//           console.error('Error deleting client:', err);\n//         });\n//     }\n//   };\n\n//   return (\n//     <div className=\"dashboard\">\n//       <h1>Client Dashboard</h1>\n\n//       {/* Search Bar */}\n//       <input\n//         type=\"text\"\n//         placeholder=\"Search clients...\"\n//         value={search}\n//         onChange={handleSearch}\n//       />\n\n//       {/* Filter Options */}\n//       <select name=\"region\" onChange={handleFilterChange} value={filters.region}>\n//         <option value=\"\">All Regions</option>\n//         <option value=\"North America\">North America</option>\n//         <option value=\"Europe\">Europe</option>\n//         <option value=\"Asia\">Asia</option>\n//       </select>\n\n//       <select name=\"industry\" onChange={handleFilterChange} value={filters.industry}>\n//         <option value=\"\">All Industries</option>\n//         <option value=\"Finance\">Finance</option>\n//         <option value=\"Technology\">Technology</option>\n//         <option value=\"Healthcare\">Healthcare</option>\n//       </select>\n\n//       <select name=\"status\" onChange={handleFilterChange} value={filters.status}>\n//         <option value=\"\">All Statuses</option>\n//         <option value=\"Active\">Active</option>\n//         <option value=\"Inactive\">Inactive</option>\n//       </select>\n\n//       {/* Client Data Table */}\n//       <table>\n//         <thead>\n//           <tr>\n//             <th onClick={() => handleSort('client_name')}>Client Name</th>\n//             <th onClick={() => handleSort('industry')}>Industry</th>\n//             <th onClick={() => handleSort('status')}>Status</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {clients.length > 0 ? (\n//             clients.map((client) => (\n//               <tr key={client._id}>\n//                 {editingClientId === client._id ? (\n//                   <>\n//                     <td>\n//                       <input\n//                         type=\"text\"\n//                         name=\"client_name\"\n//                         value={editData.client_name}\n//                         onChange={handleEditChange}\n//                       />\n//                     </td>\n//                     <td>\n//                       <input\n//                         type=\"text\"\n//                         name=\"industry\"\n//                         value={editData.industry}\n//                         onChange={handleEditChange}\n//                       />\n//                     </td>\n//                     <td>\n//                       <input\n//                         type=\"text\"\n//                         name=\"status\"\n//                         value={editData.status}\n//                         onChange={handleEditChange}\n//                       />\n//                     </td>\n//                     <td>\n//                       <button onClick={handleSaveEdit}>Save</button>\n//                       <button onClick={() => setEditingClientId(null)}>Cancel</button>\n//                     </td>\n//                   </>\n//                 ) : (\n//                   <>\n//                     <td>{client.client_name}</td>\n//                     <td>{client.industry}</td>\n//                     <td>{client.status}</td>\n//                     <td>\n//                       <button onClick={() => handleEdit(client._id)}>Edit</button>\n//                       <button onClick={() => handleDelete(client._id)}>Delete</button>\n//                     </td>\n//                   </>\n//                 )}\n//               </tr>\n//             ))\n//           ) : (\n//             <tr>\n//               <td colSpan=\"4\">No clients found</td>\n//             </tr>\n//           )}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default Dashboard;\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios'; // Ensure axios is installed: `npm install axios`\nimport './Dashboard.css'; // Custom CSS for the dashboard\n\nconst Dashboard = () => {\n  const [clients, setClients] = useState([]);\n  const [search, setSearch] = useState('');\n  const [filters, setFilters] = useState({\n    region: '',\n    industry: '',\n    status: ''\n  });\n  const [sortOrder, setSortOrder] = useState('asc'); // 'asc' or 'desc'\n  const [sortColumn, setSortColumn] = useState('client_name'); // Default column to sort\n  const [authToken, setAuthToken] = useState(localStorage.getItem('token') || ''); // Get the token from localStorage\n\n  // Fetch clients from backend when the component mounts or filters/sort change\n  useEffect(() => {\n    fetchClients();\n  }, [filters, sortColumn, sortOrder]);\n\n  const fetchClients = () => {\n    const query = new URLSearchParams({\n      search,\n      region: filters.region,\n      industry: filters.industry,\n      status: filters.status,\n      sortColumn,\n      sortOrder\n    });\n\n    axios\n      .get(`http://localhost:5005/api/users?${query.toString()}`, {\n        headers: {\n          Authorization: `Bearer ${authToken}`, // Pass token in Authorization header\n        },\n      })\n      .then((response) => {\n        setClients(response.data);\n      })\n      .catch((err) => {\n        console.error('Error fetching clients:', err);\n        // Handle error (e.g., logout if token is invalid)\n      });\n  };\n\n  const handleSearch = (e) => {\n    setSearch(e.target.value);\n  };\n\n  const handleFilterChange = (e) => {\n    const { name, value } = e.target;\n    setFilters({ ...filters, [name]: value });\n  };\n\n  const handleSort = (column) => {\n    const newSortOrder = sortOrder === 'asc' ? 'desc' : 'asc';\n    setSortOrder(newSortOrder);\n    setSortColumn(column);\n  };\n\n  const handleEdit = (clientId) => {\n    setEditingClientId(clientId);\n    const clientToEdit = clients.find((client) => client._id === clientId);\n    setEditData(clientToEdit);\n  };\n\n  const handleEditChange = (e) => {\n    const { name, value } = e.target;\n    setEditData({ ...editData, [name]: value });\n  };\n\n  const handleSaveEdit = () => {\n    console.log('Editing Client ID:', editingClientId);\n    console.log('Data to be updated:', editData);\n  \n    axios\n      .put(`http://localhost:5005/api/users/${editingClientId}`, editData, {\n        headers: {\n          Authorization: `Bearer ${authToken}`,\n        },\n      })\n      .then((response) => {\n        console.log('Server response:', response);\n        setClients((prevClients) =>\n          prevClients.map((client) =>\n            client._id === editingClientId ? response.data : client\n          )\n        );\n        setEditingClientId(null);\n      })\n      .catch((err) => {\n        console.error('Error saving client edits:', err);\n      });\n  };\n  \n\n  const handleDelete = (clientId) => {\n    // Make API call to delete client\n    axios\n      .delete(`http://localhost:5005/api/users/${clientId}`, {\n        headers: {\n          Authorization: `Bearer ${authToken}`,\n        },\n      })\n      .then((response) => {\n        // Remove deleted client from the list\n        setClients(clients.filter((client) => client._id !== clientId));\n        alert('Client deleted successfully');\n      })\n      .catch((err) => {\n        console.error('Error deleting client:', err);\n        alert('Failed to delete client');\n      });\n  };\n\n  const exportData = (format) => {\n    // Logic to export as excel, pdf, csv\n    alert(`Exporting data as ${format}`);\n  };\n\n  return (\n    <div className=\"dashboard\">\n      <h1>Client Dashboard</h1>\n\n      {/* Search Bar */}\n      <input\n        type=\"text\"\n        placeholder=\"Search clients...\"\n        value={search}\n        onChange={handleSearch}\n      />\n\n      {/* Filter Options */}\n      <select name=\"region\" onChange={handleFilterChange} value={filters.region}>\n        <option value=\"\">All Regions</option>\n        <option value=\"North America\">North America</option>\n        <option value=\"Europe\">Europe</option>\n        <option value=\"Asia\">Asia</option>\n      </select>\n\n      <select name=\"industry\" onChange={handleFilterChange} value={filters.industry}>\n        <option value=\"\">All Industries</option>\n        <option value=\"Finance\">Finance</option>\n        <option value=\"Technology\">Technology</option>\n        <option value=\"Healthcare\">Healthcare</option>\n      </select>\n\n      <select name=\"status\" onChange={handleFilterChange} value={filters.status}>\n        <option value=\"\">All Statuses</option>\n        <option value=\"Active\">Active</option>\n        <option value=\"Inactive\">Inactive</option>\n      </select>\n\n      {/* Export Buttons */}\n      <button onClick={() => exportData('excel')}>Export as Excel</button>\n      <button onClick={() => exportData('pdf')}>Export as PDF</button>\n      <button onClick={() => exportData('csv')}>Export as CSV</button>\n\n      {/* Client Data Table */}\n      <table>\n        <thead>\n          <tr>\n            <th onClick={() => handleSort('client_name')}>Client Name</th>\n            <th onClick={() => handleSort('industry')}>Industry</th>\n            <th onClick={() => handleSort('status')}>Status</th>\n            <th>Email</th>\n            <th>Phone</th>\n            <th>Contact Person</th>\n            <th>Location</th>\n            <th>Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n          {clients.length > 0 ? (\n            clients.map((client) => (\n              <tr key={client._id}>\n                <td>\n                  <Link to={`/client/${client._id}`}>{client.client_name}</Link>\n                </td>\n                <td>{client.industry}</td>\n                <td>{client.status}</td>\n                <td>{client.email}</td>\n                <td>{client.phone}</td>\n                <td>{client.contact_person}</td>\n                <td>\n                  {`${client.address.street}, ${client.address.city}, ${client.address.state}, ${client.address.postal_code}, ${client.address.country}`}\n                </td>\n                <td>\n                  <button onClick={() => handleEdit(client._id)}>Edit</button>\n                  <button onClick={() => handleDelete(client._id)}>Delete</button>\n                </td>\n              </tr>\n            ))\n          ) : (\n            <tr>\n              <td colSpan=\"6\">No clients found</td>\n            </tr>\n          )}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default Dashboard;\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}