{"ast":null,"code":"const express = require(\"express\");\nconst cors = require(\"cors\");\nconst bodyParser = require(\"body-parser\");\nconst dotenv = require(\"dotenv\");\nconst {\n  OpenAI\n} = require(\"openai\");\ndotenv.config();\nconst app = express();\napp.use(cors()); // Enable CORS\napp.use(bodyParser.json());\nconst openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY // Ensure this is correct\n});\napp.post(\"/chat\", async (req, res) => {\n  try {\n    const {\n      message\n    } = req.body;\n    if (!message) {\n      return res.status(400).json({\n        error: \"Message is required\"\n      });\n    }\n    const response = await openai.chat.completions.create({\n      model: \"gpt-3.5-turbo\",\n      messages: [{\n        role: \"system\",\n        content: \"You are a helpful chatbot.\"\n      }, {\n        role: \"user\",\n        content: message\n      }]\n    });\n    if (!response.choices || response.choices.length === 0) {\n      throw new Error(\"Invalid OpenAI response\");\n    }\n    res.json({\n      reply: response.choices[0].message.content\n    });\n  } catch (error) {\n    console.error(\"Chatbot Error:\", error);\n    res.status(500).json({\n      error: \"Something went wrong!\"\n    });\n  }\n});\nconst PORT = process.env.PORT || 5001;\napp.listen(PORT, () => console.log(`Server running on port ${PORT}`));","map":{"version":3,"names":["express","require","cors","bodyParser","dotenv","OpenAI","config","app","use","json","openai","apiKey","process","env","OPENAI_API_KEY","post","req","res","message","body","status","error","response","chat","completions","create","model","messages","role","content","choices","length","Error","reply","console","PORT","listen","log"],"sources":["/Users/harshitrishav/Demo/jwt-auth-frontend/src/components/Chatbot.js"],"sourcesContent":["const express = require(\"express\");\nconst cors = require(\"cors\");\nconst bodyParser = require(\"body-parser\");\nconst dotenv = require(\"dotenv\");\nconst { OpenAI } = require(\"openai\");\n\ndotenv.config();\n\nconst app = express();\napp.use(cors()); // Enable CORS\napp.use(bodyParser.json());\n\nconst openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY, // Ensure this is correct\n});\n\napp.post(\"/chat\", async (req, res) => {\n  try {\n    const { message } = req.body;\n    if (!message) {\n      return res.status(400).json({ error: \"Message is required\" });\n    }\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-3.5-turbo\",\n      messages: [{ role: \"system\", content: \"You are a helpful chatbot.\" }, { role: \"user\", content: message }],\n    });\n\n    if (!response.choices || response.choices.length === 0) {\n      throw new Error(\"Invalid OpenAI response\");\n    }\n\n    res.json({ reply: response.choices[0].message.content });\n  } catch (error) {\n    console.error(\"Chatbot Error:\", error);\n    res.status(500).json({ error: \"Something went wrong!\" });\n  }\n});\n\nconst PORT = process.env.PORT || 5001;\napp.listen(PORT, () => console.log(`Server running on port ${PORT}`));\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAME,UAAU,GAAGF,OAAO,CAAC,aAAa,CAAC;AACzC,MAAMG,MAAM,GAAGH,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAM;EAAEI;AAAO,CAAC,GAAGJ,OAAO,CAAC,QAAQ,CAAC;AAEpCG,MAAM,CAACE,MAAM,CAAC,CAAC;AAEf,MAAMC,GAAG,GAAGP,OAAO,CAAC,CAAC;AACrBO,GAAG,CAACC,GAAG,CAACN,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;AACjBK,GAAG,CAACC,GAAG,CAACL,UAAU,CAACM,IAAI,CAAC,CAAC,CAAC;AAE1B,MAAMC,MAAM,GAAG,IAAIL,MAAM,CAAC;EACxBM,MAAM,EAAEC,OAAO,CAACC,GAAG,CAACC,cAAc,CAAE;AACtC,CAAC,CAAC;AAEFP,GAAG,CAACQ,IAAI,CAAC,OAAO,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EACpC,IAAI;IACF,MAAM;MAAEC;IAAQ,CAAC,GAAGF,GAAG,CAACG,IAAI;IAC5B,IAAI,CAACD,OAAO,EAAE;MACZ,OAAOD,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACX,IAAI,CAAC;QAAEY,KAAK,EAAE;MAAsB,CAAC,CAAC;IAC/D;IAEA,MAAMC,QAAQ,GAAG,MAAMZ,MAAM,CAACa,IAAI,CAACC,WAAW,CAACC,MAAM,CAAC;MACpDC,KAAK,EAAE,eAAe;MACtBC,QAAQ,EAAE,CAAC;QAAEC,IAAI,EAAE,QAAQ;QAAEC,OAAO,EAAE;MAA6B,CAAC,EAAE;QAAED,IAAI,EAAE,MAAM;QAAEC,OAAO,EAAEX;MAAQ,CAAC;IAC1G,CAAC,CAAC;IAEF,IAAI,CAACI,QAAQ,CAACQ,OAAO,IAAIR,QAAQ,CAACQ,OAAO,CAACC,MAAM,KAAK,CAAC,EAAE;MACtD,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;IAC5C;IAEAf,GAAG,CAACR,IAAI,CAAC;MAAEwB,KAAK,EAAEX,QAAQ,CAACQ,OAAO,CAAC,CAAC,CAAC,CAACZ,OAAO,CAACW;IAAQ,CAAC,CAAC;EAC1D,CAAC,CAAC,OAAOR,KAAK,EAAE;IACda,OAAO,CAACb,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;IACtCJ,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACX,IAAI,CAAC;MAAEY,KAAK,EAAE;IAAwB,CAAC,CAAC;EAC1D;AACF,CAAC,CAAC;AAEF,MAAMc,IAAI,GAAGvB,OAAO,CAACC,GAAG,CAACsB,IAAI,IAAI,IAAI;AACrC5B,GAAG,CAAC6B,MAAM,CAACD,IAAI,EAAE,MAAMD,OAAO,CAACG,GAAG,CAAC,0BAA0BF,IAAI,EAAE,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}