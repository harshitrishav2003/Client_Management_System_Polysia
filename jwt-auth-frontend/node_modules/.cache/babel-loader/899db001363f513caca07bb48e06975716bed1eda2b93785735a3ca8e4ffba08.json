{"ast":null,"code":"// import React, { useState, useEffect } from \"react\";\n// import { useParams } from \"react-router-dom\";\n// import axios from \"axios\";\n// import \"../App.css\";\n// const ClientProfile = () => {\n//   const { clientId } = useParams(); // Get the clientId from the URL params\n//   const [client, setClient] = useState(null);\n//   const [projects, setProjects] = useState([]); // State to store projects\n//   const [error, setError] = useState(\"\");\n//   const [showForm, setShowForm] = useState(false); // Toggle form visibility\n//   const [formData, setFormData] = useState({\n//     project_name: \"\",\n//     description: \"\",\n//     start_date: \"\",\n//     end_date: \"\",\n//     budget: \"\",\n//     client_id: clientId,\n//   });\n//   useEffect(() => {\n//     const fetchClientDetails = async () => {\n//       try {\n//         const response = await axios.get(`http://localhost:5005/api/client/${clientId}`);\n//         setClient(response.data);\n//       } catch (err) {\n//         setError(\"Failed to load client details.\");\n//       }\n//     };\n//     const fetchClientProjects = async () => {\n//       try {\n//         const response = await axios.get(`http://localhost:5005/api/projects/${clientId}`);\n//         // Make sure team_members is always an array\n//         const updatedProjects = response.data.map((project) => ({\n//           ...project,\n//           team_members: Array.isArray(project.team_members) ? project.team_members : [],\n//         }));\n//         setProjects(updatedProjects);\n//       } catch (err) {\n//         setError(\"Failed to load projects.\");\n//       }\n//     };\n//     fetchClientDetails();\n//     fetchClientProjects();\n//   }, [clientId]);\n//   const handleFormChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData({\n//       ...formData,\n//       [name]: value,\n//     });\n//   };\n//   const handleFormSubmit = async (e) => {\n//     e.preventDefault();\n//     try {\n//       const response = await axios.post(\"http://localhost:5005/api/projects\", formData);\n//       setProjects([...projects, response.data]); // Add new project to the list\n//       setShowForm(false); // Hide form after submission\n//       console.log(response.data); // Handle the response data (e.g., display success message)\n//     } catch (error) {\n//       console.error(\"Error submitting form:\", error);\n//     }\n//   };\n//   if (error) {\n//     return <div>{error}</div>;\n//   }\n//   if (!client) {\n//     return <div>Loading...</div>;\n//   }\n//   return (\n//     <div>\n//       <h1 style={{ textAlign: \"center\" }}>Projects for {client.client_name}</h1>\n//       {/* Display Projects in Table Format */}\n//       <h2>Projects</h2>\n//       {projects.length === 0 ? (\n//         <p>No projects found for this client.</p>\n//       ) : (\n//         <table className=\"project-table\">\n//           <thead>\n//             <tr>\n//               <th>Project Name</th>\n//               <th>Description</th>\n//               <th>Start Date</th>\n//               <th>End Date</th>\n//               <th>Budget</th>\n//               <th>Team Members</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {projects.map((project) => (\n//               <tr key={project._id}>\n//                 <td>{project.project_name}</td>\n//                 <td>{project.description}</td>\n//                 <td>{new Date(project.start_date).toLocaleDateString()}</td>\n//                 <td>{new Date(project.end_date).toLocaleDateString()}</td>\n//                 <td>{project.budget}</td>\n//                 <td>{(project.team_members || []).join(\", \")}</td>\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       )}\n//       <div className=\"client-profile-card\">\n//         {/* Button to Show/Hide Form */}\n//         <button onClick={() => setShowForm(!showForm)}>\n//           {showForm ? \"Cancel\" : \"Add New Project\"}\n//         </button>\n//         {/* Project Creation Form */}\n//         {showForm && (\n//           <div className=\"project-form\">\n//           <h2>Create a New Project</h2>\n//           <form onSubmit={handleFormSubmit}>\n//             <div>\n//               <label>Project Name</label>\n//               <input\n//                 type=\"text\"\n//                 name=\"project_name\"\n//                 value={formData.project_name}\n//                 onChange={handleFormChange}\n//                 required\n//               />\n//             </div>\n//             <div>\n//               <label>Description</label>\n//               <textarea\n//                 name=\"description\"\n//                 value={formData.description}\n//                 onChange={handleFormChange}\n//                 className=\"description-input\"\n//               />\n//             </div>\n//             <div>\n//               <label>Start Date</label>\n//               <input\n//                 type=\"date\"\n//                 name=\"start_date\"\n//                 value={formData.start_date}\n//                 onChange={handleFormChange}\n//                 className=\"date-input\"\n//               />\n//             </div>\n//             <div>\n//               <label>End Date</label>\n//               <input\n//                 type=\"date\"\n//                 name=\"end_date\"\n//                 value={formData.end_date}\n//                 onChange={handleFormChange}\n//                 className=\"date-input\"\n//               />\n//             </div>\n//             <div>\n//               <label>Budget</label>\n//               <input\n//                 type=\"number\"\n//                 name=\"budget\"\n//                 value={formData.budget}\n//                 onChange={handleFormChange}\n//               />\n//             </div>\n//             <div>\n//               <button type=\"submit\">Create Project</button>\n//             </div>\n//           </form>\n//         </div>\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n// export default ClientProfile;\nimport React,{useState,useEffect}from\"react\";import{useParams}from\"react-router-dom\";import axios from\"axios\";import{Button,Input,Form,Table,Modal,DatePicker,message,Typography}from\"antd\";import\"antd/dist/reset.css\";// Ensures Ant Design's default styles are loaded\nimport moment from'moment';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const{Title}=Typography;const ClientProfile=()=>{const{clientId}=useParams();// Get the clientId from the URL params\nconst[client,setClient]=useState(null);const[projects,setProjects]=useState([]);// State to store projects\nconst[error,setError]=useState(\"\");const[showForm,setShowForm]=useState(false);// Toggle form visibility\nconst[formData,setFormData]=useState({project_name:\"\",description:\"\",start_date:\"\",end_date:\"\",budget:\"\",client_id:clientId});const[isModalVisible,setIsModalVisible]=useState(false);// Modal visibility state\nuseEffect(()=>{const fetchClientDetails=async()=>{try{const response=await axios.get(`http://localhost:5005/api/client/${clientId}`);setClient(response.data);}catch(err){setError(\"Failed to load client details.\");}};const fetchClientProjects=async()=>{try{const response=await axios.get(`http://localhost:5005/api/projects/${clientId}`);// Make sure team_members is always an array\nconst updatedProjects=response.data.map(project=>({...project,team_members:Array.isArray(project.team_members)?project.team_members:[]}));setProjects(updatedProjects);}catch(err){setError(\"Failed to load projects.\");}};fetchClientDetails();fetchClientProjects();},[clientId]);const handleFormChange=e=>{const{name,value}=e.target;setFormData({...formData,[name]:value});};const handleFormSubmit=async values=>{try{const response=await axios.post(\"http://localhost:5005/api/projects\",{...formData,...values});setProjects([...projects,response.data]);// Add new project to the list\nsetShowForm(false);// Hide form after submission\nmessage.success(\"Project created successfully!\");setIsModalVisible(true);// Show the confirmation modal\n}catch(error){message.error(\"Error submitting form.\");}};const columns=[{title:\"Project Name\",dataIndex:\"project_name\",key:\"project_name\"},{title:\"Description\",dataIndex:\"description\",key:\"description\"},{title:\"Start Date\",dataIndex:\"start_date\",key:\"start_date\",render:date=>new Date(date).toLocaleDateString()},{title:\"End Date\",dataIndex:\"end_date\",key:\"end_date\",render:date=>new Date(date).toLocaleDateString()},{title:\"Budget\",dataIndex:\"budget\",key:\"budget\"}];if(error){return/*#__PURE__*/_jsx(\"div\",{children:error});}if(!client){return/*#__PURE__*/_jsx(\"div\",{children:\"Loading...\"});}return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(Title,{level:1,style:{textAlign:\"center\"},children:[\"Projects for \",client.client_name]}),projects.length===0?/*#__PURE__*/_jsx(\"p\",{children:\"No projects found for this client.\"}):/*#__PURE__*/_jsx(Table,{columns:columns,dataSource:projects,rowKey:\"_id\"}),/*#__PURE__*/_jsx(Button,{type:\"primary\",onClick:()=>setShowForm(!showForm),style:{marginBottom:\"20px\"},children:showForm?\"Cancel\":\"Add New Project\"}),/*#__PURE__*/_jsx(Modal,{title:\"Create a New Project\",visible:showForm,onCancel:()=>setShowForm(false),footer:null,children:/*#__PURE__*/_jsxs(Form,{initialValues:formData,onFinish:handleFormSubmit,layout:\"vertical\",children:[/*#__PURE__*/_jsx(Form.Item,{label:\"Project Name\",name:\"project_name\",rules:[{required:true,message:\"Please input the project name!\"}],children:/*#__PURE__*/_jsx(Input,{value:formData.project_name,onChange:handleFormChange,name:\"project_name\"})}),/*#__PURE__*/_jsx(Form.Item,{label:\"Description\",name:\"description\",rules:[{required:true,message:\"Please input the project description!\"}],children:/*#__PURE__*/_jsx(Input.TextArea,{value:formData.description,onChange:handleFormChange,name:\"description\"})}),/*#__PURE__*/_jsx(Form.Item,{label:\"Start Date\",name:\"start_date\",rules:[{required:true,message:\"Please select the start date!\"}],children:/*#__PURE__*/_jsx(DatePicker,{value:formData.start_date?moment(formData.start_date):null,onChange:date=>setFormData({...formData,start_date:date}),style:{width:\"100%\"}})}),/*#__PURE__*/_jsx(Form.Item,{label:\"End Date\",name:\"end_date\",rules:[{required:true,message:\"Please select the end date!\"}],children:/*#__PURE__*/_jsx(DatePicker,{value:formData.end_date?moment(formData.end_date):null,onChange:date=>setFormData({...formData,end_date:date}),style:{width:\"100%\"}})}),/*#__PURE__*/_jsx(Form.Item,{label:\"Budget\",name:\"budget\",rules:[{required:true,message:\"Please input the budget!\"}],children:/*#__PURE__*/_jsx(Input,{type:\"number\",value:formData.budget,onChange:handleFormChange,name:\"budget\"})}),/*#__PURE__*/_jsx(Form.Item,{children:/*#__PURE__*/_jsx(Button,{type:\"primary\",htmlType:\"submit\",style:{width:\"100%\"},children:\"Create Project\"})})]})}),/*#__PURE__*/_jsx(Modal,{title:\"Project Submitted\",visible:isModalVisible,onCancel:()=>setIsModalVisible(false),footer:[/*#__PURE__*/_jsx(Button,{onClick:()=>setIsModalVisible(false),children:\"OK\"},\"ok\")],children:/*#__PURE__*/_jsx(\"p\",{children:\"We will review your project soon and get back to you.\"})})]});};export default ClientProfile;","map":{"version":3,"names":["React","useState","useEffect","useParams","axios","Button","Input","Form","Table","Modal","DatePicker","message","Typography","moment","jsx","_jsx","jsxs","_jsxs","Title","ClientProfile","clientId","client","setClient","projects","setProjects","error","setError","showForm","setShowForm","formData","setFormData","project_name","description","start_date","end_date","budget","client_id","isModalVisible","setIsModalVisible","fetchClientDetails","response","get","data","err","fetchClientProjects","updatedProjects","map","project","team_members","Array","isArray","handleFormChange","e","name","value","target","handleFormSubmit","values","post","success","columns","title","dataIndex","key","render","date","Date","toLocaleDateString","children","level","style","textAlign","client_name","length","dataSource","rowKey","type","onClick","marginBottom","visible","onCancel","footer","initialValues","onFinish","layout","Item","label","rules","required","onChange","TextArea","width","htmlType"],"sources":["/Users/harshitrishav/Demo/jwt-auth-frontend/src/components/ContractManagement.js"],"sourcesContent":["\n// import React, { useState, useEffect } from \"react\";\n// import { useParams } from \"react-router-dom\";\n// import axios from \"axios\";\n// import \"../App.css\";\n\n// const ClientProfile = () => {\n//   const { clientId } = useParams(); // Get the clientId from the URL params\n//   const [client, setClient] = useState(null);\n//   const [projects, setProjects] = useState([]); // State to store projects\n//   const [error, setError] = useState(\"\");\n//   const [showForm, setShowForm] = useState(false); // Toggle form visibility\n//   const [formData, setFormData] = useState({\n//     project_name: \"\",\n//     description: \"\",\n//     start_date: \"\",\n//     end_date: \"\",\n//     budget: \"\",\n//     client_id: clientId,\n//   });\n\n//   useEffect(() => {\n//     const fetchClientDetails = async () => {\n//       try {\n//         const response = await axios.get(`http://localhost:5005/api/client/${clientId}`);\n//         setClient(response.data);\n//       } catch (err) {\n//         setError(\"Failed to load client details.\");\n//       }\n//     };\n\n//     const fetchClientProjects = async () => {\n//       try {\n//         const response = await axios.get(`http://localhost:5005/api/projects/${clientId}`);\n//         // Make sure team_members is always an array\n//         const updatedProjects = response.data.map((project) => ({\n//           ...project,\n//           team_members: Array.isArray(project.team_members) ? project.team_members : [],\n//         }));\n//         setProjects(updatedProjects);\n//       } catch (err) {\n//         setError(\"Failed to load projects.\");\n//       }\n//     };\n\n//     fetchClientDetails();\n//     fetchClientProjects();\n//   }, [clientId]);\n\n//   const handleFormChange = (e) => {\n//     const { name, value } = e.target;\n\n//     setFormData({\n//       ...formData,\n//       [name]: value,\n//     });\n//   };\n\n//   const handleFormSubmit = async (e) => {\n//     e.preventDefault();\n//     try {\n//       const response = await axios.post(\"http://localhost:5005/api/projects\", formData);\n//       setProjects([...projects, response.data]); // Add new project to the list\n//       setShowForm(false); // Hide form after submission\n//       console.log(response.data); // Handle the response data (e.g., display success message)\n//     } catch (error) {\n//       console.error(\"Error submitting form:\", error);\n//     }\n//   };\n\n//   if (error) {\n//     return <div>{error}</div>;\n//   }\n\n//   if (!client) {\n//     return <div>Loading...</div>;\n//   }\n\n//   return (\n//     <div>\n//       <h1 style={{ textAlign: \"center\" }}>Projects for {client.client_name}</h1>\n\n//       {/* Display Projects in Table Format */}\n//       <h2>Projects</h2>\n//       {projects.length === 0 ? (\n//         <p>No projects found for this client.</p>\n//       ) : (\n//         <table className=\"project-table\">\n//           <thead>\n//             <tr>\n//               <th>Project Name</th>\n//               <th>Description</th>\n//               <th>Start Date</th>\n//               <th>End Date</th>\n//               <th>Budget</th>\n//               <th>Team Members</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {projects.map((project) => (\n//               <tr key={project._id}>\n//                 <td>{project.project_name}</td>\n//                 <td>{project.description}</td>\n//                 <td>{new Date(project.start_date).toLocaleDateString()}</td>\n//                 <td>{new Date(project.end_date).toLocaleDateString()}</td>\n//                 <td>{project.budget}</td>\n//                 <td>{(project.team_members || []).join(\", \")}</td>\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       )}\n\n//       <div className=\"client-profile-card\">\n//         {/* Button to Show/Hide Form */}\n//         <button onClick={() => setShowForm(!showForm)}>\n//           {showForm ? \"Cancel\" : \"Add New Project\"}\n//         </button>\n\n//         {/* Project Creation Form */}\n//         {showForm && (\n//           <div className=\"project-form\">\n//           <h2>Create a New Project</h2>\n//           <form onSubmit={handleFormSubmit}>\n//             <div>\n//               <label>Project Name</label>\n//               <input\n//                 type=\"text\"\n//                 name=\"project_name\"\n//                 value={formData.project_name}\n//                 onChange={handleFormChange}\n//                 required\n//               />\n//             </div>\n//             <div>\n//               <label>Description</label>\n//               <textarea\n//                 name=\"description\"\n//                 value={formData.description}\n//                 onChange={handleFormChange}\n//                 className=\"description-input\"\n//               />\n//             </div>\n//             <div>\n//               <label>Start Date</label>\n//               <input\n//                 type=\"date\"\n//                 name=\"start_date\"\n//                 value={formData.start_date}\n//                 onChange={handleFormChange}\n//                 className=\"date-input\"\n//               />\n//             </div>\n//             <div>\n//               <label>End Date</label>\n//               <input\n//                 type=\"date\"\n//                 name=\"end_date\"\n//                 value={formData.end_date}\n//                 onChange={handleFormChange}\n//                 className=\"date-input\"\n//               />\n//             </div>\n//             <div>\n//               <label>Budget</label>\n//               <input\n//                 type=\"number\"\n//                 name=\"budget\"\n//                 value={formData.budget}\n//                 onChange={handleFormChange}\n//               />\n//             </div>\n//             <div>\n//               <button type=\"submit\">Create Project</button>\n//             </div>\n//           </form>\n//         </div>\n        \n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ClientProfile;\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { Button, Input, Form, Table, Modal, DatePicker, message, Typography } from \"antd\";\nimport \"antd/dist/reset.css\"; // Ensures Ant Design's default styles are loaded\nimport moment from 'moment';\n\nconst { Title } = Typography;\n\nconst ClientProfile = () => {\n  const { clientId } = useParams(); // Get the clientId from the URL params\n  const [client, setClient] = useState(null);\n  const [projects, setProjects] = useState([]); // State to store projects\n  const [error, setError] = useState(\"\");\n  const [showForm, setShowForm] = useState(false); // Toggle form visibility\n  const [formData, setFormData] = useState({\n    project_name: \"\",\n    description: \"\",\n    start_date: \"\",\n    end_date: \"\",\n    budget: \"\",\n    client_id: clientId,\n  });\n  const [isModalVisible, setIsModalVisible] = useState(false); // Modal visibility state\n\n  useEffect(() => {\n    const fetchClientDetails = async () => {\n      try {\n        const response = await axios.get(`http://localhost:5005/api/client/${clientId}`);\n        setClient(response.data);\n      } catch (err) {\n        setError(\"Failed to load client details.\");\n      }\n    };\n\n    const fetchClientProjects = async () => {\n      try {\n        const response = await axios.get(`http://localhost:5005/api/projects/${clientId}`);\n        // Make sure team_members is always an array\n        const updatedProjects = response.data.map((project) => ({\n          ...project,\n          team_members: Array.isArray(project.team_members) ? project.team_members : [],\n        }));\n        setProjects(updatedProjects);\n      } catch (err) {\n        setError(\"Failed to load projects.\");\n      }\n    };\n\n    fetchClientDetails();\n    fetchClientProjects();\n  }, [clientId]);\n\n  const handleFormChange = (e) => {\n    const { name, value } = e.target;\n    setFormData({\n      ...formData,\n      [name]: value,\n    });\n  };\n\n  const handleFormSubmit = async (values) => {\n    try {\n      const response = await axios.post(\"http://localhost:5005/api/projects\", { ...formData, ...values });\n      setProjects([...projects, response.data]); // Add new project to the list\n      setShowForm(false); // Hide form after submission\n      message.success(\"Project created successfully!\");\n      setIsModalVisible(true); // Show the confirmation modal\n    } catch (error) {\n      message.error(\"Error submitting form.\");\n    }\n  };\n\n  const columns = [\n    {\n      title: \"Project Name\",\n      dataIndex: \"project_name\",\n      key: \"project_name\",\n    },\n    {\n      title: \"Description\",\n      dataIndex: \"description\",\n      key: \"description\",\n    },\n    {\n      title: \"Start Date\",\n      dataIndex: \"start_date\",\n      key: \"start_date\",\n      render: (date) => new Date(date).toLocaleDateString(),\n    },\n    {\n      title: \"End Date\",\n      dataIndex: \"end_date\",\n      key: \"end_date\",\n      render: (date) => new Date(date).toLocaleDateString(),\n    },\n    {\n      title: \"Budget\",\n      dataIndex: \"budget\",\n      key: \"budget\",\n    },\n  ];\n\n  if (error) {\n    return <div>{error}</div>;\n  }\n\n  if (!client) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div>\n      <Title level={1} style={{ textAlign: \"center\" }}>\n        Projects for {client.client_name}\n      </Title>\n\n      {/* Display Projects in Table Format */}\n      {projects.length === 0 ? (\n        <p>No projects found for this client.</p>\n      ) : (\n        <Table columns={columns} dataSource={projects} rowKey=\"_id\" />\n      )}\n\n      {/* Button to Show/Hide Form */}\n      <Button\n        type=\"primary\"\n        onClick={() => setShowForm(!showForm)}\n        style={{ marginBottom: \"20px\" }}\n      >\n        {showForm ? \"Cancel\" : \"Add New Project\"}\n      </Button>\n\n      {/* Project Creation Form using Ant Design Modal */}\n      <Modal\n        title=\"Create a New Project\"\n        visible={showForm}\n        onCancel={() => setShowForm(false)}\n        footer={null}\n      >\n        <Form\n          initialValues={formData}\n          onFinish={handleFormSubmit}\n          layout=\"vertical\"\n        >\n          <Form.Item\n            label=\"Project Name\"\n            name=\"project_name\"\n            rules={[{ required: true, message: \"Please input the project name!\" }]}\n          >\n            <Input\n              value={formData.project_name}\n              onChange={handleFormChange}\n              name=\"project_name\"\n            />\n          </Form.Item>\n          <Form.Item\n            label=\"Description\"\n            name=\"description\"\n            rules={[{ required: true, message: \"Please input the project description!\" }]}\n          >\n            <Input.TextArea\n              value={formData.description}\n              onChange={handleFormChange}\n              name=\"description\"\n            />\n          </Form.Item>\n          <Form.Item\n            label=\"Start Date\"\n            name=\"start_date\"\n            rules={[{ required: true, message: \"Please select the start date!\" }]}\n          >\n            <DatePicker\n              value={formData.start_date ? moment(formData.start_date) : null}\n              onChange={(date) => setFormData({ ...formData, start_date: date })}\n              style={{ width: \"100%\" }}\n            />\n          </Form.Item>\n          <Form.Item\n            label=\"End Date\"\n            name=\"end_date\"\n            rules={[{ required: true, message: \"Please select the end date!\" }]}\n          >\n            <DatePicker\n              value={formData.end_date ? moment(formData.end_date) : null}\n              onChange={(date) => setFormData({ ...formData, end_date: date })}\n              style={{ width: \"100%\" }}\n            />\n          </Form.Item>\n          <Form.Item\n            label=\"Budget\"\n            name=\"budget\"\n            rules={[{ required: true, message: \"Please input the budget!\" }]}\n          >\n            <Input\n              type=\"number\"\n              value={formData.budget}\n              onChange={handleFormChange}\n              name=\"budget\"\n            />\n          </Form.Item>\n          <Form.Item>\n            <Button type=\"primary\" htmlType=\"submit\" style={{ width: \"100%\" }}>\n              Create Project\n            </Button>\n          </Form.Item>\n        </Form>\n      </Modal>\n\n      {/* Confirmation Modal */}\n      <Modal\n        title=\"Project Submitted\"\n        visible={isModalVisible}\n        onCancel={() => setIsModalVisible(false)}\n        footer={[\n          <Button key=\"ok\" onClick={() => setIsModalVisible(false)}>\n            OK\n          </Button>\n        ]}\n      >\n        <p>We will review your project soon and get back to you.</p>\n      </Modal>\n    </div>\n  );\n};\n\nexport default ClientProfile;\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}