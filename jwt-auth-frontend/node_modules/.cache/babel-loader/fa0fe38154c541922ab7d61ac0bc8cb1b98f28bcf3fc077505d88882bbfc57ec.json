{"ast":null,"code":"var _jsxFileName = \"/Users/harshitrishav/Demo/jwt-auth-frontend/src/components/ContractManagement.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import { useParams } from \"react-router-dom\";\n// import axios from \"axios\";\n// import \"../App.css\";\n\n// const ClientProfile = () => {\n//   const { clientId } = useParams(); // Get the clientId from the URL params\n//   const [client, setClient] = useState(null);\n//   const [projects, setProjects] = useState([]); // State to store projects\n//   const [error, setError] = useState(\"\");\n//   const [showForm, setShowForm] = useState(false); // Toggle form visibility\n//   const [formData, setFormData] = useState({\n//     project_name: \"\",\n//     description: \"\",\n//     start_date: \"\",\n//     end_date: \"\",\n//     budget: \"\",\n//     client_id: clientId,\n//   });\n\n//   useEffect(() => {\n//     const fetchClientDetails = async () => {\n//       try {\n//         const response = await axios.get(`http://localhost:5005/api/client/${clientId}`);\n//         setClient(response.data);\n//       } catch (err) {\n//         setError(\"Failed to load client details.\");\n//       }\n//     };\n\n//     const fetchClientProjects = async () => {\n//       try {\n//         const response = await axios.get(`http://localhost:5005/api/projects/${clientId}`);\n//         // Make sure team_members is always an array\n//         const updatedProjects = response.data.map((project) => ({\n//           ...project,\n//           team_members: Array.isArray(project.team_members) ? project.team_members : [],\n//         }));\n//         setProjects(updatedProjects);\n//       } catch (err) {\n//         setError(\"Failed to load projects.\");\n//       }\n//     };\n\n//     fetchClientDetails();\n//     fetchClientProjects();\n//   }, [clientId]);\n\n//   const handleFormChange = (e) => {\n//     const { name, value } = e.target;\n\n//     setFormData({\n//       ...formData,\n//       [name]: value,\n//     });\n//   };\n\n//   const handleFormSubmit = async (e) => {\n//     e.preventDefault();\n//     try {\n//       const response = await axios.post(\"http://localhost:5005/api/projects\", formData);\n//       setProjects([...projects, response.data]); // Add new project to the list\n//       setShowForm(false); // Hide form after submission\n//       console.log(response.data); // Handle the response data (e.g., display success message)\n//     } catch (error) {\n//       console.error(\"Error submitting form:\", error);\n//     }\n//   };\n\n//   if (error) {\n//     return <div>{error}</div>;\n//   }\n\n//   if (!client) {\n//     return <div>Loading...</div>;\n//   }\n\n//   return (\n//     <div>\n//       <h1 style={{ textAlign: \"center\" }}>Projects for {client.client_name}</h1>\n\n//       {/* Display Projects in Table Format */}\n//       <h2>Projects</h2>\n//       {projects.length === 0 ? (\n//         <p>No projects found for this client.</p>\n//       ) : (\n//         <table className=\"project-table\">\n//           <thead>\n//             <tr>\n//               <th>Project Name</th>\n//               <th>Description</th>\n//               <th>Start Date</th>\n//               <th>End Date</th>\n//               <th>Budget</th>\n//               <th>Team Members</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {projects.map((project) => (\n//               <tr key={project._id}>\n//                 <td>{project.project_name}</td>\n//                 <td>{project.description}</td>\n//                 <td>{new Date(project.start_date).toLocaleDateString()}</td>\n//                 <td>{new Date(project.end_date).toLocaleDateString()}</td>\n//                 <td>{project.budget}</td>\n//                 <td>{(project.team_members || []).join(\", \")}</td>\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       )}\n\n//       <div className=\"client-profile-card\">\n//         {/* Button to Show/Hide Form */}\n//         <button onClick={() => setShowForm(!showForm)}>\n//           {showForm ? \"Cancel\" : \"Add New Project\"}\n//         </button>\n\n//         {/* Project Creation Form */}\n//         {showForm && (\n//           <div className=\"project-form\">\n//           <h2>Create a New Project</h2>\n//           <form onSubmit={handleFormSubmit}>\n//             <div>\n//               <label>Project Name</label>\n//               <input\n//                 type=\"text\"\n//                 name=\"project_name\"\n//                 value={formData.project_name}\n//                 onChange={handleFormChange}\n//                 required\n//               />\n//             </div>\n//             <div>\n//               <label>Description</label>\n//               <textarea\n//                 name=\"description\"\n//                 value={formData.description}\n//                 onChange={handleFormChange}\n//                 className=\"description-input\"\n//               />\n//             </div>\n//             <div>\n//               <label>Start Date</label>\n//               <input\n//                 type=\"date\"\n//                 name=\"start_date\"\n//                 value={formData.start_date}\n//                 onChange={handleFormChange}\n//                 className=\"date-input\"\n//               />\n//             </div>\n//             <div>\n//               <label>End Date</label>\n//               <input\n//                 type=\"date\"\n//                 name=\"end_date\"\n//                 value={formData.end_date}\n//                 onChange={handleFormChange}\n//                 className=\"date-input\"\n//               />\n//             </div>\n//             <div>\n//               <label>Budget</label>\n//               <input\n//                 type=\"number\"\n//                 name=\"budget\"\n//                 value={formData.budget}\n//                 onChange={handleFormChange}\n//               />\n//             </div>\n//             <div>\n//               <button type=\"submit\">Create Project</button>\n//             </div>\n//           </form>\n//         </div>\n\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ClientProfile;\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { Button, Input, Form, Table, Modal, DatePicker, message, Typography } from \"antd\";\nimport \"antd/dist/reset.css\"; // Ensures Ant Design's default styles are loaded\nimport moment from 'moment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Title\n} = Typography;\nconst ClientProfile = () => {\n  _s();\n  const {\n    clientId\n  } = useParams(); // Get the clientId from the URL params\n  const [client, setClient] = useState(null);\n  const [projects, setProjects] = useState([]); // State to store projects\n  const [error, setError] = useState(\"\");\n  const [showForm, setShowForm] = useState(false); // Toggle form visibility\n  const [formData, setFormData] = useState({\n    project_name: \"\",\n    description: \"\",\n    start_date: \"\",\n    end_date: \"\",\n    budget: \"\",\n    client_id: clientId\n  });\n  const [isModalVisible, setIsModalVisible] = useState(false); // Modal visibility state\n\n  useEffect(() => {\n    const fetchClientDetails = async () => {\n      try {\n        const response = await axios.get(`http://localhost:5005/api/client/${clientId}`);\n        setClient(response.data);\n      } catch (err) {\n        setError(\"Failed to load client details.\");\n      }\n    };\n    const fetchClientProjects = async () => {\n      try {\n        const response = await axios.get(`http://localhost:5005/api/projects/${clientId}`);\n        // Make sure team_members is always an array\n        const updatedProjects = response.data.map(project => ({\n          ...project,\n          team_members: Array.isArray(project.team_members) ? project.team_members : []\n        }));\n        setProjects(updatedProjects);\n      } catch (err) {\n        setError(\"Failed to load projects.\");\n      }\n    };\n    fetchClientDetails();\n    fetchClientProjects();\n  }, [clientId]);\n  const handleFormChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData({\n      ...formData,\n      [name]: value\n    });\n  };\n  const handleFormSubmit = async values => {\n    try {\n      const response = await axios.post(\"http://localhost:5005/api/projects\", {\n        ...formData,\n        ...values\n      });\n      setProjects([...projects, response.data]); // Add new project to the list\n      setShowForm(false); // Hide form after submission\n      message.success(\"Project created successfully!\");\n      setIsModalVisible(true); // Show the confirmation modal\n    } catch (error) {\n      message.error(\"Error submitting form.\");\n    }\n  };\n  const columns = [{\n    title: \"Project Name\",\n    dataIndex: \"project_name\",\n    key: \"project_name\"\n  }, {\n    title: \"Description\",\n    dataIndex: \"description\",\n    key: \"description\"\n  }, {\n    title: \"Start Date\",\n    dataIndex: \"start_date\",\n    key: \"start_date\",\n    render: date => new Date(date).toLocaleDateString()\n  }, {\n    title: \"End Date\",\n    dataIndex: \"end_date\",\n    key: \"end_date\",\n    render: date => new Date(date).toLocaleDateString()\n  }, {\n    title: \"Budget\",\n    dataIndex: \"budget\",\n    key: \"budget\"\n  }];\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 12\n    }, this);\n  }\n  if (!client) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Title, {\n      level: 1,\n      style: {\n        textAlign: \"center\"\n      },\n      children: [\"Projects for \", client.client_name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 7\n    }, this), projects.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No projects found for this client.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Table, {\n      columns: columns,\n      dataSource: projects,\n      rowKey: \"_id\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      type: \"primary\",\n      onClick: () => setShowForm(!showForm),\n      style: {\n        marginBottom: \"20px\"\n      },\n      children: showForm ? \"Cancel\" : \"Add New Project\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      title: \"Create a New Project\",\n      visible: showForm,\n      onCancel: () => setShowForm(false),\n      footer: null,\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        initialValues: formData,\n        onFinish: handleFormSubmit,\n        layout: \"vertical\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n          label: \"Project Name\",\n          name: \"project_name\",\n          rules: [{\n            required: true,\n            message: \"Please input the project name!\"\n          }],\n          children: /*#__PURE__*/_jsxDEV(Input, {\n            value: formData.project_name,\n            onChange: handleFormChange,\n            name: \"project_name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 336,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          label: \"Description\",\n          name: \"description\",\n          rules: [{\n            required: true,\n            message: \"Please input the project description!\"\n          }],\n          children: /*#__PURE__*/_jsxDEV(Input.TextArea, {\n            value: formData.description,\n            onChange: handleFormChange,\n            name: \"description\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 347,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          label: \"Start Date\",\n          name: \"start_date\",\n          rules: [{\n            required: true,\n            message: \"Please select the start date!\"\n          }],\n          children: /*#__PURE__*/_jsxDEV(DatePicker, {\n            value: formData.start_date ? moment(formData.start_date) : null,\n            onChange: date => setFormData({\n              ...formData,\n              start_date: date\n            }),\n            style: {\n              width: \"100%\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 358,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          label: \"End Date\",\n          name: \"end_date\",\n          rules: [{\n            required: true,\n            message: \"Please select the end date!\"\n          }],\n          children: /*#__PURE__*/_jsxDEV(DatePicker, {\n            value: formData.end_date ? moment(formData.end_date) : null,\n            onChange: date => setFormData({\n              ...formData,\n              end_date: date\n            }),\n            style: {\n              width: \"100%\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 369,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          label: \"Budget\",\n          name: \"budget\",\n          rules: [{\n            required: true,\n            message: \"Please input the budget!\"\n          }],\n          children: /*#__PURE__*/_jsxDEV(Input, {\n            type: \"number\",\n            value: formData.budget,\n            onChange: handleFormChange,\n            name: \"budget\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 380,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 375,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            type: \"primary\",\n            htmlType: \"submit\",\n            style: {\n              width: \"100%\"\n            },\n            children: \"Create Project\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 388,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      title: \"Project Submitted\",\n      visible: isModalVisible,\n      onCancel: () => setIsModalVisible(false),\n      footer: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => setIsModalVisible(false),\n        children: \"OK\"\n      }, \"ok\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 401,\n        columnNumber: 11\n      }, this)],\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"We will review your project soon and get back to you.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 406,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 298,\n    columnNumber: 5\n  }, this);\n};\n_s(ClientProfile, \"/u4Bnh5Cux5TC0yIl0bT3W8dtt4=\", false, function () {\n  return [useParams];\n});\n_c = ClientProfile;\nexport default ClientProfile;\nvar _c;\n$RefreshReg$(_c, \"ClientProfile\");","map":{"version":3,"names":["React","useState","useEffect","useParams","axios","Button","Input","Form","Table","Modal","DatePicker","message","Typography","moment","jsxDEV","_jsxDEV","Title","ClientProfile","_s","clientId","client","setClient","projects","setProjects","error","setError","showForm","setShowForm","formData","setFormData","project_name","description","start_date","end_date","budget","client_id","isModalVisible","setIsModalVisible","fetchClientDetails","response","get","data","err","fetchClientProjects","updatedProjects","map","project","team_members","Array","isArray","handleFormChange","e","name","value","target","handleFormSubmit","values","post","success","columns","title","dataIndex","key","render","date","Date","toLocaleDateString","children","fileName","_jsxFileName","lineNumber","columnNumber","level","style","textAlign","client_name","length","dataSource","rowKey","type","onClick","marginBottom","visible","onCancel","footer","initialValues","onFinish","layout","Item","label","rules","required","onChange","TextArea","width","htmlType","_c","$RefreshReg$"],"sources":["/Users/harshitrishav/Demo/jwt-auth-frontend/src/components/ContractManagement.js"],"sourcesContent":["\n// import React, { useState, useEffect } from \"react\";\n// import { useParams } from \"react-router-dom\";\n// import axios from \"axios\";\n// import \"../App.css\";\n\n// const ClientProfile = () => {\n//   const { clientId } = useParams(); // Get the clientId from the URL params\n//   const [client, setClient] = useState(null);\n//   const [projects, setProjects] = useState([]); // State to store projects\n//   const [error, setError] = useState(\"\");\n//   const [showForm, setShowForm] = useState(false); // Toggle form visibility\n//   const [formData, setFormData] = useState({\n//     project_name: \"\",\n//     description: \"\",\n//     start_date: \"\",\n//     end_date: \"\",\n//     budget: \"\",\n//     client_id: clientId,\n//   });\n\n//   useEffect(() => {\n//     const fetchClientDetails = async () => {\n//       try {\n//         const response = await axios.get(`http://localhost:5005/api/client/${clientId}`);\n//         setClient(response.data);\n//       } catch (err) {\n//         setError(\"Failed to load client details.\");\n//       }\n//     };\n\n//     const fetchClientProjects = async () => {\n//       try {\n//         const response = await axios.get(`http://localhost:5005/api/projects/${clientId}`);\n//         // Make sure team_members is always an array\n//         const updatedProjects = response.data.map((project) => ({\n//           ...project,\n//           team_members: Array.isArray(project.team_members) ? project.team_members : [],\n//         }));\n//         setProjects(updatedProjects);\n//       } catch (err) {\n//         setError(\"Failed to load projects.\");\n//       }\n//     };\n\n//     fetchClientDetails();\n//     fetchClientProjects();\n//   }, [clientId]);\n\n//   const handleFormChange = (e) => {\n//     const { name, value } = e.target;\n\n//     setFormData({\n//       ...formData,\n//       [name]: value,\n//     });\n//   };\n\n//   const handleFormSubmit = async (e) => {\n//     e.preventDefault();\n//     try {\n//       const response = await axios.post(\"http://localhost:5005/api/projects\", formData);\n//       setProjects([...projects, response.data]); // Add new project to the list\n//       setShowForm(false); // Hide form after submission\n//       console.log(response.data); // Handle the response data (e.g., display success message)\n//     } catch (error) {\n//       console.error(\"Error submitting form:\", error);\n//     }\n//   };\n\n//   if (error) {\n//     return <div>{error}</div>;\n//   }\n\n//   if (!client) {\n//     return <div>Loading...</div>;\n//   }\n\n//   return (\n//     <div>\n//       <h1 style={{ textAlign: \"center\" }}>Projects for {client.client_name}</h1>\n\n//       {/* Display Projects in Table Format */}\n//       <h2>Projects</h2>\n//       {projects.length === 0 ? (\n//         <p>No projects found for this client.</p>\n//       ) : (\n//         <table className=\"project-table\">\n//           <thead>\n//             <tr>\n//               <th>Project Name</th>\n//               <th>Description</th>\n//               <th>Start Date</th>\n//               <th>End Date</th>\n//               <th>Budget</th>\n//               <th>Team Members</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {projects.map((project) => (\n//               <tr key={project._id}>\n//                 <td>{project.project_name}</td>\n//                 <td>{project.description}</td>\n//                 <td>{new Date(project.start_date).toLocaleDateString()}</td>\n//                 <td>{new Date(project.end_date).toLocaleDateString()}</td>\n//                 <td>{project.budget}</td>\n//                 <td>{(project.team_members || []).join(\", \")}</td>\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       )}\n\n//       <div className=\"client-profile-card\">\n//         {/* Button to Show/Hide Form */}\n//         <button onClick={() => setShowForm(!showForm)}>\n//           {showForm ? \"Cancel\" : \"Add New Project\"}\n//         </button>\n\n//         {/* Project Creation Form */}\n//         {showForm && (\n//           <div className=\"project-form\">\n//           <h2>Create a New Project</h2>\n//           <form onSubmit={handleFormSubmit}>\n//             <div>\n//               <label>Project Name</label>\n//               <input\n//                 type=\"text\"\n//                 name=\"project_name\"\n//                 value={formData.project_name}\n//                 onChange={handleFormChange}\n//                 required\n//               />\n//             </div>\n//             <div>\n//               <label>Description</label>\n//               <textarea\n//                 name=\"description\"\n//                 value={formData.description}\n//                 onChange={handleFormChange}\n//                 className=\"description-input\"\n//               />\n//             </div>\n//             <div>\n//               <label>Start Date</label>\n//               <input\n//                 type=\"date\"\n//                 name=\"start_date\"\n//                 value={formData.start_date}\n//                 onChange={handleFormChange}\n//                 className=\"date-input\"\n//               />\n//             </div>\n//             <div>\n//               <label>End Date</label>\n//               <input\n//                 type=\"date\"\n//                 name=\"end_date\"\n//                 value={formData.end_date}\n//                 onChange={handleFormChange}\n//                 className=\"date-input\"\n//               />\n//             </div>\n//             <div>\n//               <label>Budget</label>\n//               <input\n//                 type=\"number\"\n//                 name=\"budget\"\n//                 value={formData.budget}\n//                 onChange={handleFormChange}\n//               />\n//             </div>\n//             <div>\n//               <button type=\"submit\">Create Project</button>\n//             </div>\n//           </form>\n//         </div>\n        \n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ClientProfile;\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { Button, Input, Form, Table, Modal, DatePicker, message, Typography } from \"antd\";\nimport \"antd/dist/reset.css\"; // Ensures Ant Design's default styles are loaded\nimport moment from 'moment';\n\nconst { Title } = Typography;\n\nconst ClientProfile = () => {\n  const { clientId } = useParams(); // Get the clientId from the URL params\n  const [client, setClient] = useState(null);\n  const [projects, setProjects] = useState([]); // State to store projects\n  const [error, setError] = useState(\"\");\n  const [showForm, setShowForm] = useState(false); // Toggle form visibility\n  const [formData, setFormData] = useState({\n    project_name: \"\",\n    description: \"\",\n    start_date: \"\",\n    end_date: \"\",\n    budget: \"\",\n    client_id: clientId,\n  });\n  const [isModalVisible, setIsModalVisible] = useState(false); // Modal visibility state\n\n  useEffect(() => {\n    const fetchClientDetails = async () => {\n      try {\n        const response = await axios.get(`http://localhost:5005/api/client/${clientId}`);\n        setClient(response.data);\n      } catch (err) {\n        setError(\"Failed to load client details.\");\n      }\n    };\n\n    const fetchClientProjects = async () => {\n      try {\n        const response = await axios.get(`http://localhost:5005/api/projects/${clientId}`);\n        // Make sure team_members is always an array\n        const updatedProjects = response.data.map((project) => ({\n          ...project,\n          team_members: Array.isArray(project.team_members) ? project.team_members : [],\n        }));\n        setProjects(updatedProjects);\n      } catch (err) {\n        setError(\"Failed to load projects.\");\n      }\n    };\n\n    fetchClientDetails();\n    fetchClientProjects();\n  }, [clientId]);\n\n  const handleFormChange = (e) => {\n    const { name, value } = e.target;\n    setFormData({\n      ...formData,\n      [name]: value,\n    });\n  };\n\n  const handleFormSubmit = async (values) => {\n    try {\n      const response = await axios.post(\"http://localhost:5005/api/projects\", { ...formData, ...values });\n      setProjects([...projects, response.data]); // Add new project to the list\n      setShowForm(false); // Hide form after submission\n      message.success(\"Project created successfully!\");\n      setIsModalVisible(true); // Show the confirmation modal\n    } catch (error) {\n      message.error(\"Error submitting form.\");\n    }\n  };\n\n  const columns = [\n    {\n      title: \"Project Name\",\n      dataIndex: \"project_name\",\n      key: \"project_name\",\n    },\n    {\n      title: \"Description\",\n      dataIndex: \"description\",\n      key: \"description\",\n    },\n    {\n      title: \"Start Date\",\n      dataIndex: \"start_date\",\n      key: \"start_date\",\n      render: (date) => new Date(date).toLocaleDateString(),\n    },\n    {\n      title: \"End Date\",\n      dataIndex: \"end_date\",\n      key: \"end_date\",\n      render: (date) => new Date(date).toLocaleDateString(),\n    },\n    {\n      title: \"Budget\",\n      dataIndex: \"budget\",\n      key: \"budget\",\n    },\n  ];\n\n  if (error) {\n    return <div>{error}</div>;\n  }\n\n  if (!client) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div>\n      <Title level={1} style={{ textAlign: \"center\" }}>\n        Projects for {client.client_name}\n      </Title>\n\n      {/* Display Projects in Table Format */}\n      {projects.length === 0 ? (\n        <p>No projects found for this client.</p>\n      ) : (\n        <Table columns={columns} dataSource={projects} rowKey=\"_id\" />\n      )}\n\n      {/* Button to Show/Hide Form */}\n      <Button\n        type=\"primary\"\n        onClick={() => setShowForm(!showForm)}\n        style={{ marginBottom: \"20px\" }}\n      >\n        {showForm ? \"Cancel\" : \"Add New Project\"}\n      </Button>\n\n      {/* Project Creation Form using Ant Design Modal */}\n      <Modal\n        title=\"Create a New Project\"\n        visible={showForm}\n        onCancel={() => setShowForm(false)}\n        footer={null}\n      >\n        <Form\n          initialValues={formData}\n          onFinish={handleFormSubmit}\n          layout=\"vertical\"\n        >\n          <Form.Item\n            label=\"Project Name\"\n            name=\"project_name\"\n            rules={[{ required: true, message: \"Please input the project name!\" }]}\n          >\n            <Input\n              value={formData.project_name}\n              onChange={handleFormChange}\n              name=\"project_name\"\n            />\n          </Form.Item>\n          <Form.Item\n            label=\"Description\"\n            name=\"description\"\n            rules={[{ required: true, message: \"Please input the project description!\" }]}\n          >\n            <Input.TextArea\n              value={formData.description}\n              onChange={handleFormChange}\n              name=\"description\"\n            />\n          </Form.Item>\n          <Form.Item\n            label=\"Start Date\"\n            name=\"start_date\"\n            rules={[{ required: true, message: \"Please select the start date!\" }]}\n          >\n            <DatePicker\n              value={formData.start_date ? moment(formData.start_date) : null}\n              onChange={(date) => setFormData({ ...formData, start_date: date })}\n              style={{ width: \"100%\" }}\n            />\n          </Form.Item>\n          <Form.Item\n            label=\"End Date\"\n            name=\"end_date\"\n            rules={[{ required: true, message: \"Please select the end date!\" }]}\n          >\n            <DatePicker\n              value={formData.end_date ? moment(formData.end_date) : null}\n              onChange={(date) => setFormData({ ...formData, end_date: date })}\n              style={{ width: \"100%\" }}\n            />\n          </Form.Item>\n          <Form.Item\n            label=\"Budget\"\n            name=\"budget\"\n            rules={[{ required: true, message: \"Please input the budget!\" }]}\n          >\n            <Input\n              type=\"number\"\n              value={formData.budget}\n              onChange={handleFormChange}\n              name=\"budget\"\n            />\n          </Form.Item>\n          <Form.Item>\n            <Button type=\"primary\" htmlType=\"submit\" style={{ width: \"100%\" }}>\n              Create Project\n            </Button>\n          </Form.Item>\n        </Form>\n      </Modal>\n\n      {/* Confirmation Modal */}\n      <Modal\n        title=\"Project Submitted\"\n        visible={isModalVisible}\n        onCancel={() => setIsModalVisible(false)}\n        footer={[\n          <Button key=\"ok\" onClick={() => setIsModalVisible(false)}>\n            OK\n          </Button>\n        ]}\n      >\n        <p>We will review your project soon and get back to you.</p>\n      </Modal>\n    </div>\n  );\n};\n\nexport default ClientProfile;\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}